
nios2_bare_metal.elf:     file format elf32-littlenios2
nios2_bare_metal.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00008214 memsz 0x00008364 flags rwx
    LOAD off    0x0000a000 vaddr 0x01001000 paddr 0x01001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01001000  01001000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000064ec  008001bc  008001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  008066a8  008066a8  000076a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  008066f4  008066f4  000076f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00808234  00808234  00009234  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00808384  00808384  0000a000  2**0
                  CONTENTS
  7 .flash        00000000  01001020  01001020  0000a000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000968  00000000  00000000  0000a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017286  00000000  00000000  0000a990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000061cf  00000000  00000000  00021c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006aab  00000000  00000000  00027de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000181c  00000000  00000000  0002e890  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002687  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000044ae  00000000  00000000  00032733  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00036be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002f0  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00039692  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00039695  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00039698  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00039699  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003969a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003969e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000396a2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000396a6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000396aa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000396ae  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  000396b2  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001d  00000000  00000000  000396b9  2**0
                  CONTENTS, READONLY
 30 .jdi          000035c3  00000000  00000000  000396d6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054897  00000000  00000000  0003cc99  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01001000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001bc l    d  .text	00000000 .text
008066a8 l    d  .rodata	00000000 .rodata
008066f4 l    d  .rwdata	00000000 .rwdata
00808234 l    d  .bss	00000000 .bss
00808384 l    d  .sdram	00000000 .sdram
01001020 l    d  .flash	00000000 .flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 G:/Altera/15.0/Nios/nios2_bare_metal_bsp//obj/HAL/src/crt0.o
008001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
008066f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801cd0 l     F .text	00000008 __fp_lock
00801cd8 l     F .text	00000008 __fp_unlock
00801cec l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00802d70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00802e98 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00802ec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00802fcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
008030c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008032ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080821c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803530 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803680 l     F .text	00000038 alt_dev_reg
008070c8 l     O .rwdata	00001060 jtag
00808128 l     O .rwdata	000000cc flash
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00803758 l     F .text	00000038 alt_flash_device_register
008037e4 l     F .text	00000290 alt_epcs_flash_query
00803a74 l     F .text	000000e8 alt_epcs_flash_memcmp
00803e48 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00804310 l     F .text	00000204 altera_avalon_jtag_uart_irq
00804514 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00804b34 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
00804c8c l     F .text	00000038 epcs_test_wip
00804cc4 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080539c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008058d0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00805a28 l     F .text	00000050 alt_get_errno
00805a78 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00803dbc g     F .text	0000008c alt_epcs_flash_get_info
00802c3c g     F .text	00000054 _isatty_r
008031f4 g     F .text	00000078 alt_main
00800228 g     F .text	000000b8 _puts_r
00808284 g     O .bss	00000100 alt_irq
00802c90 g     F .text	0000005c _lseek_r
00808384 g       *ABS*	00000000 __alt_heap_start
008029bc g     F .text	0000005c __sseek
00802034 g     F .text	00000010 __sinit
00801e8c g     F .text	00000078 __sfmoreglue
01001000 g       *ABS*	00000000 __alt_mem_flash
0080328c g     F .text	00000020 __malloc_unlock
008011f8 g     F .text	0000015c memmove
0080201c g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00804cfc g     F .text	000000f8 epcs_sector_erase
01001000 g     F .entry	00000000 __reset
00802be4 g     F .text	00000058 _fstat_r
00808240 g     O .bss	00000004 errno
00802938 g     F .text	00000008 __seofread
00808248 g     O .bss	00000004 alt_argv
008101f4 g       *ABS*	00000000 _gp
00806f48 g     O .rwdata	00000180 alt_fd_list
00804f38 g     F .text	00000068 epcs_write_status_register
0080608c g     F .text	00000090 alt_find_dev
008010c0 g     F .text	00000138 memcpy
00801ce0 g     F .text	0000000c _cleanup_r
008059b0 g     F .text	00000078 alt_io_redirect
008066a8 g       *ABS*	00000000 __DTOR_END__
008002e0 g     F .text	00000014 puts
00803f50 g     F .text	00000100 alt_epcs_flash_write_block
00804710 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080301c g     F .text	000000ac isatty
0080823c g     O .bss	00000004 __malloc_top_pad
0080038c g     F .text	000004a4 __sfvwrite_r
008018f4 g     F .text	00000054 _sbrk_r
00802cec g     F .text	0000005c _read_r
00808214 g     O .rwdata	00000004 alt_max_fd
00802ad0 g     F .text	00000100 _fclose_r
00801ca0 g     F .text	00000030 fflush
00808238 g     O .bss	00000004 __malloc_max_sbrked_mem
00803edc g     F .text	00000074 alt_epcs_flash_erase_block
00803118 g     F .text	000000dc lseek
008081f4 g     O .rwdata	00000004 _global_impure_ptr
00805200 g     F .text	0000005c epcs_exit_4_bytes_mode
00801354 g     F .text	000005a0 _realloc_r
00808384 g       *ABS*	00000000 __bss_end
008057e0 g     F .text	000000f0 alt_iic_isr_register
00805d64 g     F .text	00000104 alt_tick
00802054 g     F .text	00000018 __fp_lock_all
00805794 g     F .text	0000004c alt_ic_irq_enabled
00805ccc g     F .text	00000098 alt_alarm_stop
00808250 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000d0 alt_irq_handler
00806f20 g     O .rwdata	00000028 alt_dev_null
0080820c g     O .rwdata	00000008 alt_dev_list
00803580 g     F .text	00000100 write
00802f14 g     F .text	000000b8 fstat
008050bc g     F .text	00000068 epcs_read_electronic_signature
00808384 g       *ABS*	00000000 end
0080424c g     F .text	000000c4 altera_avalon_jtag_uart_init
008066a8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804ba8 g     F .text	00000088 alt_avalon_timer_sc_init
0080491c g     F .text	00000218 altera_avalon_jtag_uart_write
00802044 g     F .text	00000004 __sfp_lock_acquire
00800fd8 g     F .text	000000e8 memchr
008021a8 g     F .text	000002f0 _free_r
008064e0 g     F .text	00000194 __call_exitprocs
008081fc g     O .rwdata	00000004 __malloc_sbrk_base
008001bc g     F .text	00000038 _start
00808254 g     O .bss	00000004 _alt_tick_rate
00805e88 g     F .text	00000204 alt_avalon_spi_command
00808258 g     O .bss	00000004 _alt_nticks
008032fc g     F .text	00000104 read
008036ec g     F .text	0000006c alt_sys_init
008063cc g     F .text	00000114 __register_exitproc
008045bc g     F .text	00000068 altera_avalon_jtag_uart_close
00802d48 g     F .text	00000028 .hidden __mulsi3
0080825c g     O .bss	00000028 __malloc_current_mallinfo
00804c30 g     F .text	0000005c epcs_read_status_register
008040e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00806230 g     F .text	000000d4 alt_get_fd
00802a7c g     F .text	00000054 _close_r
00805124 g     F .text	00000080 epcs_read_device_id
00806350 g     F .text	0000007c memcmp
008041a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00808384 g       *ABS*	00000000 __alt_stack_base
008041f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00801948 g     F .text	00000130 __swsetup_r
00801f04 g     F .text	00000118 __sfp
00806b18 g     O .rwdata	00000408 __malloc_av_
00802050 g     F .text	00000004 __sinit_lock_release
008028e4 g     F .text	00000054 __sread
0080611c g     F .text	00000114 alt_find_file
008053ec g     F .text	000000a4 alt_dev_llist_insert
0080326c g     F .text	00000020 __malloc_lock
00803480 g     F .text	000000b0 sbrk
00801a78 g     F .text	00000228 _fflush_r
00808220 g     O .rwdata	00000008 alt_flash_dev_list
00808234 g       *ABS*	00000000 __bss_start
008027c0 g     F .text	00000124 memset
008001f4 g     F .text	00000034 main
0080824c g     O .bss	00000004 alt_envp
00808234 g     O .bss	00000004 __malloc_max_total_mem
00804148 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00802a18 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802bd0 g     F .text	00000014 fclose
00800830 g     F .text	000007a8 _malloc_r
00808218 g     O .rwdata	00000004 alt_errno
00802498 g     F .text	000000b8 _fwalk
00802084 g     F .text	00000124 _malloc_trim_r
008066a8 g       *ABS*	00000000 __CTOR_END__
00803b5c g     F .text	00000260 alt_epcs_flash_write
008066a8 g       *ABS*	00000000 __DTOR_LIST__
008036b8 g     F .text	00000034 alt_irq_init
00803400 g     F .text	00000080 alt_release_fd
00806304 g     F .text	00000014 atexit
00802a20 g     F .text	0000005c _write_r
008081f8 g     O .rwdata	00000004 _impure_ptr
00808244 g     O .bss	00000004 alt_argc
008054ec g     F .text	0000005c _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
0080206c g     F .text	00000018 __fp_unlock_all
00808204 g     O .rwdata	00000008 alt_fs_list
00804df4 g     F .text	000000f4 epcs_read_buffer
00803790 g     F .text	00000054 alt_epcs_flash_init
00805600 g     F .text	00000050 alt_ic_isr_register
00808234 g       *ABS*	00000000 _edata
00808384 g       *ABS*	00000000 _end
00805548 g     F .text	00000068 alt_flash_open_dev
00804624 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
008056f0 g     F .text	000000a4 alt_ic_irq_disable
008051a4 g     F .text	0000005c epcs_enter_4_bytes_mode
00802940 g     F .text	0000007c __swrite
00808200 g     O .rwdata	00000004 __malloc_trim_threshold
00805e68 g     F .text	00000020 altera_nios2_qsys_irq_init
00806318 g     F .text	00000038 exit
00802550 g     F .text	000000b8 _fwalk_reent
008055b0 g     F .text	00000050 alt_flash_close_dev
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00802048 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00806674 g     F .text	00000034 _exit
0080525c g     F .text	00000140 alt_alarm_start
00802608 g     F .text	000001b8 __smakebuf_r
008002f4 g     F .text	00000098 strlen
00804ee8 g     F .text	00000050 epcs_write_enable
00805b6c g     F .text	00000160 open
00808228 g     O .rwdata	00000004 alt_priority_mask
00805650 g     F .text	000000a0 alt_ic_irq_enable
00804050 g     F .text	00000098 alt_epcs_flash_read
0080822c g     O .rwdata	00000008 alt_alarm_list
00805490 g     F .text	0000005c _do_ctors
00802dc0 g     F .text	000000d8 close
00000000  w      *UND*	00000000 free
0080204c g     F .text	00000004 __sinit_lock_acquire
00804fa0 g     F .text	0000011c epcs_write_buffer



Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

00800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0fffb17 	ldw	r3,-20(fp)
  800120:	e0bffc17 	ldw	r2,-16(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	10001426 	beq	r2,zero,80017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	00802074 	movhi	r2,129
  800130:	10a0a104 	addi	r2,r2,-32124
  800134:	e0fffd17 	ldw	r3,-12(fp)
  800138:	180690fa 	slli	r3,r3,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	10c00017 	ldw	r3,0(r2)
  800144:	00802074 	movhi	r2,129
  800148:	10a0a104 	addi	r2,r2,-32124
  80014c:	e13ffd17 	ldw	r4,-12(fp)
  800150:	200890fa 	slli	r4,r4,3
  800154:	1105883a 	add	r2,r2,r4
  800158:	10800104 	addi	r2,r2,4
  80015c:	10800017 	ldw	r2,0(r2)
  800160:	1009883a 	mov	r4,r2
  800164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	00000706 	br	800198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80017c:	e0bffc17 	ldw	r2,-16(fp)
  800180:	1085883a 	add	r2,r2,r2
  800184:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800188:	e0bffd17 	ldw	r2,-12(fp)
  80018c:	10800044 	addi	r2,r2,1
  800190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  800194:	003fe106 	br	80011c <__reset+0xff7ff11c>

    active = alt_irq_pending ();
  800198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  80019c:	e0bffb17 	ldw	r2,-20(fp)
  8001a0:	103fdb1e 	bne	r2,zero,800110 <__reset+0xff7ff110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a4:	0001883a 	nop
}
  8001a8:	e037883a 	mov	sp,fp
  8001ac:	dfc00117 	ldw	ra,4(sp)
  8001b0:	df000017 	ldw	fp,0(sp)
  8001b4:	dec00204 	addi	sp,sp,8
  8001b8:	f800283a 	ret

Disassembly of section .text:

008001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001bc:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  8001c4:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c8:	d6807d14 	ori	gp,gp,500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001cc:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d0:	10a08d14 	ori	r2,r2,33332

    movhi r3, %hi(__bss_end)
  8001d4:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001d8:	18e0e114 	ori	r3,r3,33668

    beq r2, r3, 1f
  8001dc:	10c00326 	beq	r2,r3,8001ec <_start+0x30>

0:
    stw zero, (r2)
  8001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e8:	10fffd36 	bltu	r2,r3,8001e0 <__reset+0xff7ff1e0>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001ec:	08031f40 	call	8031f4 <alt_main>

008001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f0:	003fff06 	br	8001f0 <__reset+0xff7ff1f0>

008001f4 <main>:
 */

#include <stdio.h>

int main()
{
  8001f4:	defffe04 	addi	sp,sp,-8
  8001f8:	dfc00115 	stw	ra,4(sp)
  8001fc:	df000015 	stw	fp,0(sp)
  800200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  800204:	01002034 	movhi	r4,128
  800208:	2119aa04 	addi	r4,r4,26280
  80020c:	08002e00 	call	8002e0 <puts>

  return 0;
  800210:	0005883a 	mov	r2,zero
}
  800214:	e037883a 	mov	sp,fp
  800218:	dfc00117 	ldw	ra,4(sp)
  80021c:	df000017 	ldw	fp,0(sp)
  800220:	dec00204 	addi	sp,sp,8
  800224:	f800283a 	ret

00800228 <_puts_r>:
  800228:	defff604 	addi	sp,sp,-40
  80022c:	dc000715 	stw	r16,28(sp)
  800230:	2021883a 	mov	r16,r4
  800234:	2809883a 	mov	r4,r5
  800238:	dc400815 	stw	r17,32(sp)
  80023c:	dfc00915 	stw	ra,36(sp)
  800240:	2823883a 	mov	r17,r5
  800244:	08002f40 	call	8002f4 <strlen>
  800248:	00c02074 	movhi	r3,129
  80024c:	18e07e04 	addi	r3,r3,-32264
  800250:	18c00017 	ldw	r3,0(r3)
  800254:	11000044 	addi	r4,r2,1
  800258:	d8800115 	stw	r2,4(sp)
  80025c:	18c00217 	ldw	r3,8(r3)
  800260:	01402034 	movhi	r5,128
  800264:	2959af04 	addi	r5,r5,26300
  800268:	1880030b 	ldhu	r2,12(r3)
  80026c:	d9400215 	stw	r5,8(sp)
  800270:	d9000615 	stw	r4,24(sp)
  800274:	01400044 	movi	r5,1
  800278:	01000084 	movi	r4,2
  80027c:	d9000515 	stw	r4,20(sp)
  800280:	dc400015 	stw	r17,0(sp)
  800284:	d9400315 	stw	r5,12(sp)
  800288:	dec00415 	stw	sp,16(sp)
  80028c:	1108000c 	andi	r4,r2,8192
  800290:	2000061e 	bne	r4,zero,8002ac <_puts_r+0x84>
  800294:	19401917 	ldw	r5,100(r3)
  800298:	0137ffc4 	movi	r4,-8193
  80029c:	10880014 	ori	r2,r2,8192
  8002a0:	2908703a 	and	r4,r5,r4
  8002a4:	1880030d 	sth	r2,12(r3)
  8002a8:	19001915 	stw	r4,100(r3)
  8002ac:	81400217 	ldw	r5,8(r16)
  8002b0:	8009883a 	mov	r4,r16
  8002b4:	d9800404 	addi	r6,sp,16
  8002b8:	080038c0 	call	80038c <__sfvwrite_r>
  8002bc:	1000061e 	bne	r2,zero,8002d8 <_puts_r+0xb0>
  8002c0:	00800284 	movi	r2,10
  8002c4:	dfc00917 	ldw	ra,36(sp)
  8002c8:	dc400817 	ldw	r17,32(sp)
  8002cc:	dc000717 	ldw	r16,28(sp)
  8002d0:	dec00a04 	addi	sp,sp,40
  8002d4:	f800283a 	ret
  8002d8:	00bfffc4 	movi	r2,-1
  8002dc:	003ff906 	br	8002c4 <__reset+0xff7ff2c4>

008002e0 <puts>:
  8002e0:	00802074 	movhi	r2,129
  8002e4:	10a07e04 	addi	r2,r2,-32264
  8002e8:	200b883a 	mov	r5,r4
  8002ec:	11000017 	ldw	r4,0(r2)
  8002f0:	08002281 	jmpi	800228 <_puts_r>

008002f4 <strlen>:
  8002f4:	208000cc 	andi	r2,r4,3
  8002f8:	10002026 	beq	r2,zero,80037c <strlen+0x88>
  8002fc:	20800007 	ldb	r2,0(r4)
  800300:	10002026 	beq	r2,zero,800384 <strlen+0x90>
  800304:	2005883a 	mov	r2,r4
  800308:	00000206 	br	800314 <strlen+0x20>
  80030c:	10c00007 	ldb	r3,0(r2)
  800310:	18001826 	beq	r3,zero,800374 <strlen+0x80>
  800314:	10800044 	addi	r2,r2,1
  800318:	10c000cc 	andi	r3,r2,3
  80031c:	183ffb1e 	bne	r3,zero,80030c <__reset+0xff7ff30c>
  800320:	10c00017 	ldw	r3,0(r2)
  800324:	01ffbff4 	movhi	r7,65279
  800328:	39ffbfc4 	addi	r7,r7,-257
  80032c:	00ca303a 	nor	r5,zero,r3
  800330:	01a02074 	movhi	r6,32897
  800334:	19c7883a 	add	r3,r3,r7
  800338:	31a02004 	addi	r6,r6,-32640
  80033c:	1946703a 	and	r3,r3,r5
  800340:	1986703a 	and	r3,r3,r6
  800344:	1800091e 	bne	r3,zero,80036c <strlen+0x78>
  800348:	10800104 	addi	r2,r2,4
  80034c:	10c00017 	ldw	r3,0(r2)
  800350:	19cb883a 	add	r5,r3,r7
  800354:	00c6303a 	nor	r3,zero,r3
  800358:	28c6703a 	and	r3,r5,r3
  80035c:	1986703a 	and	r3,r3,r6
  800360:	183ff926 	beq	r3,zero,800348 <__reset+0xff7ff348>
  800364:	00000106 	br	80036c <strlen+0x78>
  800368:	10800044 	addi	r2,r2,1
  80036c:	10c00007 	ldb	r3,0(r2)
  800370:	183ffd1e 	bne	r3,zero,800368 <__reset+0xff7ff368>
  800374:	1105c83a 	sub	r2,r2,r4
  800378:	f800283a 	ret
  80037c:	2005883a 	mov	r2,r4
  800380:	003fe706 	br	800320 <__reset+0xff7ff320>
  800384:	0005883a 	mov	r2,zero
  800388:	f800283a 	ret

0080038c <__sfvwrite_r>:
  80038c:	30800217 	ldw	r2,8(r6)
  800390:	10004526 	beq	r2,zero,8004a8 <__sfvwrite_r+0x11c>
  800394:	28c0030b 	ldhu	r3,12(r5)
  800398:	defff404 	addi	sp,sp,-48
  80039c:	dd400715 	stw	r21,28(sp)
  8003a0:	dcc00515 	stw	r19,20(sp)
  8003a4:	dc000215 	stw	r16,8(sp)
  8003a8:	dfc00b15 	stw	ra,44(sp)
  8003ac:	df000a15 	stw	fp,40(sp)
  8003b0:	ddc00915 	stw	r23,36(sp)
  8003b4:	dd800815 	stw	r22,32(sp)
  8003b8:	dd000615 	stw	r20,24(sp)
  8003bc:	dc800415 	stw	r18,16(sp)
  8003c0:	dc400315 	stw	r17,12(sp)
  8003c4:	1880020c 	andi	r2,r3,8
  8003c8:	2821883a 	mov	r16,r5
  8003cc:	202b883a 	mov	r21,r4
  8003d0:	3027883a 	mov	r19,r6
  8003d4:	10002526 	beq	r2,zero,80046c <__sfvwrite_r+0xe0>
  8003d8:	28800417 	ldw	r2,16(r5)
  8003dc:	10002326 	beq	r2,zero,80046c <__sfvwrite_r+0xe0>
  8003e0:	1880008c 	andi	r2,r3,2
  8003e4:	9c400017 	ldw	r17,0(r19)
  8003e8:	10003126 	beq	r2,zero,8004b0 <__sfvwrite_r+0x124>
  8003ec:	0029883a 	mov	r20,zero
  8003f0:	0025883a 	mov	r18,zero
  8003f4:	05810004 	movi	r22,1024
  8003f8:	a00d883a 	mov	r6,r20
  8003fc:	a809883a 	mov	r4,r21
  800400:	90002526 	beq	r18,zero,800498 <__sfvwrite_r+0x10c>
  800404:	900f883a 	mov	r7,r18
  800408:	81400717 	ldw	r5,28(r16)
  80040c:	b480012e 	bgeu	r22,r18,800414 <__sfvwrite_r+0x88>
  800410:	01c10004 	movi	r7,1024
  800414:	80800917 	ldw	r2,36(r16)
  800418:	103ee83a 	callr	r2
  80041c:	0080510e 	bge	zero,r2,800564 <__sfvwrite_r+0x1d8>
  800420:	98c00217 	ldw	r3,8(r19)
  800424:	a0a9883a 	add	r20,r20,r2
  800428:	90a5c83a 	sub	r18,r18,r2
  80042c:	1885c83a 	sub	r2,r3,r2
  800430:	98800215 	stw	r2,8(r19)
  800434:	103ff01e 	bne	r2,zero,8003f8 <__reset+0xff7ff3f8>
  800438:	0005883a 	mov	r2,zero
  80043c:	dfc00b17 	ldw	ra,44(sp)
  800440:	df000a17 	ldw	fp,40(sp)
  800444:	ddc00917 	ldw	r23,36(sp)
  800448:	dd800817 	ldw	r22,32(sp)
  80044c:	dd400717 	ldw	r21,28(sp)
  800450:	dd000617 	ldw	r20,24(sp)
  800454:	dcc00517 	ldw	r19,20(sp)
  800458:	dc800417 	ldw	r18,16(sp)
  80045c:	dc400317 	ldw	r17,12(sp)
  800460:	dc000217 	ldw	r16,8(sp)
  800464:	dec00c04 	addi	sp,sp,48
  800468:	f800283a 	ret
  80046c:	a809883a 	mov	r4,r21
  800470:	800b883a 	mov	r5,r16
  800474:	08019480 	call	801948 <__swsetup_r>
  800478:	80c0030b 	ldhu	r3,12(r16)
  80047c:	103fd826 	beq	r2,zero,8003e0 <__reset+0xff7ff3e0>
  800480:	18c01014 	ori	r3,r3,64
  800484:	80c0030d 	sth	r3,12(r16)
  800488:	00c00244 	movi	r3,9
  80048c:	00bfffc4 	movi	r2,-1
  800490:	a8c00015 	stw	r3,0(r21)
  800494:	003fe906 	br	80043c <__reset+0xff7ff43c>
  800498:	8d000017 	ldw	r20,0(r17)
  80049c:	8c800117 	ldw	r18,4(r17)
  8004a0:	8c400204 	addi	r17,r17,8
  8004a4:	003fd406 	br	8003f8 <__reset+0xff7ff3f8>
  8004a8:	0005883a 	mov	r2,zero
  8004ac:	f800283a 	ret
  8004b0:	1880004c 	andi	r2,r3,1
  8004b4:	1000301e 	bne	r2,zero,800578 <__sfvwrite_r+0x1ec>
  8004b8:	002f883a 	mov	r23,zero
  8004bc:	0025883a 	mov	r18,zero
  8004c0:	90001c26 	beq	r18,zero,800534 <__sfvwrite_r+0x1a8>
  8004c4:	1880800c 	andi	r2,r3,512
  8004c8:	85000217 	ldw	r20,8(r16)
  8004cc:	10006c26 	beq	r2,zero,800680 <__sfvwrite_r+0x2f4>
  8004d0:	a02d883a 	mov	r22,r20
  8004d4:	95008536 	bltu	r18,r20,8006ec <__sfvwrite_r+0x360>
  8004d8:	1881200c 	andi	r2,r3,1152
  8004dc:	10009d1e 	bne	r2,zero,800754 <__sfvwrite_r+0x3c8>
  8004e0:	81000017 	ldw	r4,0(r16)
  8004e4:	a039883a 	mov	fp,r20
  8004e8:	9029883a 	mov	r20,r18
  8004ec:	b80b883a 	mov	r5,r23
  8004f0:	b00d883a 	mov	r6,r22
  8004f4:	08011f80 	call	8011f8 <memmove>
  8004f8:	80c00217 	ldw	r3,8(r16)
  8004fc:	81000017 	ldw	r4,0(r16)
  800500:	9005883a 	mov	r2,r18
  800504:	1f39c83a 	sub	fp,r3,fp
  800508:	258f883a 	add	r7,r4,r22
  80050c:	87000215 	stw	fp,8(r16)
  800510:	81c00015 	stw	r7,0(r16)
  800514:	98c00217 	ldw	r3,8(r19)
  800518:	b8af883a 	add	r23,r23,r2
  80051c:	90a5c83a 	sub	r18,r18,r2
  800520:	1d05c83a 	sub	r2,r3,r20
  800524:	98800215 	stw	r2,8(r19)
  800528:	103fc326 	beq	r2,zero,800438 <__reset+0xff7ff438>
  80052c:	80c0030b 	ldhu	r3,12(r16)
  800530:	903fe41e 	bne	r18,zero,8004c4 <__reset+0xff7ff4c4>
  800534:	8dc00017 	ldw	r23,0(r17)
  800538:	8c800117 	ldw	r18,4(r17)
  80053c:	8c400204 	addi	r17,r17,8
  800540:	003fdf06 	br	8004c0 <__reset+0xff7ff4c0>
  800544:	08013540 	call	801354 <_realloc_r>
  800548:	102d883a 	mov	r22,r2
  80054c:	1000a01e 	bne	r2,zero,8007d0 <__sfvwrite_r+0x444>
  800550:	81400417 	ldw	r5,16(r16)
  800554:	a809883a 	mov	r4,r21
  800558:	08021a80 	call	8021a8 <_free_r>
  80055c:	00800304 	movi	r2,12
  800560:	a8800015 	stw	r2,0(r21)
  800564:	80c0030b 	ldhu	r3,12(r16)
  800568:	00bfffc4 	movi	r2,-1
  80056c:	18c01014 	ori	r3,r3,64
  800570:	80c0030d 	sth	r3,12(r16)
  800574:	003fb106 	br	80043c <__reset+0xff7ff43c>
  800578:	0029883a 	mov	r20,zero
  80057c:	0011883a 	mov	r8,zero
  800580:	0039883a 	mov	fp,zero
  800584:	0025883a 	mov	r18,zero
  800588:	90001f26 	beq	r18,zero,800608 <__sfvwrite_r+0x27c>
  80058c:	40006826 	beq	r8,zero,800730 <__sfvwrite_r+0x3a4>
  800590:	a02f883a 	mov	r23,r20
  800594:	9500012e 	bgeu	r18,r20,80059c <__sfvwrite_r+0x210>
  800598:	902f883a 	mov	r23,r18
  80059c:	81000017 	ldw	r4,0(r16)
  8005a0:	80800417 	ldw	r2,16(r16)
  8005a4:	b82d883a 	mov	r22,r23
  8005a8:	81800217 	ldw	r6,8(r16)
  8005ac:	81c00517 	ldw	r7,20(r16)
  8005b0:	1100022e 	bgeu	r2,r4,8005bc <__sfvwrite_r+0x230>
  8005b4:	31c7883a 	add	r3,r6,r7
  8005b8:	1dc01816 	blt	r3,r23,80061c <__sfvwrite_r+0x290>
  8005bc:	b9c03f16 	blt	r23,r7,8006bc <__sfvwrite_r+0x330>
  8005c0:	80800917 	ldw	r2,36(r16)
  8005c4:	81400717 	ldw	r5,28(r16)
  8005c8:	a809883a 	mov	r4,r21
  8005cc:	da000115 	stw	r8,4(sp)
  8005d0:	e00d883a 	mov	r6,fp
  8005d4:	103ee83a 	callr	r2
  8005d8:	102d883a 	mov	r22,r2
  8005dc:	da000117 	ldw	r8,4(sp)
  8005e0:	00bfe00e 	bge	zero,r2,800564 <__reset+0xff7ff564>
  8005e4:	a5a9c83a 	sub	r20,r20,r22
  8005e8:	a0001f26 	beq	r20,zero,800668 <__sfvwrite_r+0x2dc>
  8005ec:	98800217 	ldw	r2,8(r19)
  8005f0:	e5b9883a 	add	fp,fp,r22
  8005f4:	95a5c83a 	sub	r18,r18,r22
  8005f8:	15adc83a 	sub	r22,r2,r22
  8005fc:	9d800215 	stw	r22,8(r19)
  800600:	b03f8d26 	beq	r22,zero,800438 <__reset+0xff7ff438>
  800604:	903fe11e 	bne	r18,zero,80058c <__reset+0xff7ff58c>
  800608:	8f000017 	ldw	fp,0(r17)
  80060c:	8c800117 	ldw	r18,4(r17)
  800610:	0011883a 	mov	r8,zero
  800614:	8c400204 	addi	r17,r17,8
  800618:	003fdb06 	br	800588 <__reset+0xff7ff588>
  80061c:	180d883a 	mov	r6,r3
  800620:	e00b883a 	mov	r5,fp
  800624:	da000115 	stw	r8,4(sp)
  800628:	d8c00015 	stw	r3,0(sp)
  80062c:	08011f80 	call	8011f8 <memmove>
  800630:	d8c00017 	ldw	r3,0(sp)
  800634:	80800017 	ldw	r2,0(r16)
  800638:	a809883a 	mov	r4,r21
  80063c:	800b883a 	mov	r5,r16
  800640:	10c5883a 	add	r2,r2,r3
  800644:	80800015 	stw	r2,0(r16)
  800648:	d8c00015 	stw	r3,0(sp)
  80064c:	0801a780 	call	801a78 <_fflush_r>
  800650:	d8c00017 	ldw	r3,0(sp)
  800654:	da000117 	ldw	r8,4(sp)
  800658:	103fc21e 	bne	r2,zero,800564 <__reset+0xff7ff564>
  80065c:	182d883a 	mov	r22,r3
  800660:	a5a9c83a 	sub	r20,r20,r22
  800664:	a03fe11e 	bne	r20,zero,8005ec <__reset+0xff7ff5ec>
  800668:	a809883a 	mov	r4,r21
  80066c:	800b883a 	mov	r5,r16
  800670:	0801a780 	call	801a78 <_fflush_r>
  800674:	103fbb1e 	bne	r2,zero,800564 <__reset+0xff7ff564>
  800678:	0011883a 	mov	r8,zero
  80067c:	003fdb06 	br	8005ec <__reset+0xff7ff5ec>
  800680:	81000017 	ldw	r4,0(r16)
  800684:	80800417 	ldw	r2,16(r16)
  800688:	1100012e 	bgeu	r2,r4,800690 <__sfvwrite_r+0x304>
  80068c:	a4805a36 	bltu	r20,r18,8007f8 <__sfvwrite_r+0x46c>
  800690:	81c00517 	ldw	r7,20(r16)
  800694:	91c01a36 	bltu	r18,r7,800700 <__sfvwrite_r+0x374>
  800698:	80800917 	ldw	r2,36(r16)
  80069c:	81400717 	ldw	r5,28(r16)
  8006a0:	a809883a 	mov	r4,r21
  8006a4:	b80d883a 	mov	r6,r23
  8006a8:	103ee83a 	callr	r2
  8006ac:	1029883a 	mov	r20,r2
  8006b0:	00bfac0e 	bge	zero,r2,800564 <__reset+0xff7ff564>
  8006b4:	a005883a 	mov	r2,r20
  8006b8:	003f9606 	br	800514 <__reset+0xff7ff514>
  8006bc:	b80d883a 	mov	r6,r23
  8006c0:	e00b883a 	mov	r5,fp
  8006c4:	da000115 	stw	r8,4(sp)
  8006c8:	08011f80 	call	8011f8 <memmove>
  8006cc:	80800217 	ldw	r2,8(r16)
  8006d0:	80c00017 	ldw	r3,0(r16)
  8006d4:	da000117 	ldw	r8,4(sp)
  8006d8:	15c5c83a 	sub	r2,r2,r23
  8006dc:	1def883a 	add	r23,r3,r23
  8006e0:	80800215 	stw	r2,8(r16)
  8006e4:	85c00015 	stw	r23,0(r16)
  8006e8:	003fbe06 	br	8005e4 <__reset+0xff7ff5e4>
  8006ec:	81000017 	ldw	r4,0(r16)
  8006f0:	9039883a 	mov	fp,r18
  8006f4:	9029883a 	mov	r20,r18
  8006f8:	902d883a 	mov	r22,r18
  8006fc:	003f7b06 	br	8004ec <__reset+0xff7ff4ec>
  800700:	b80b883a 	mov	r5,r23
  800704:	900d883a 	mov	r6,r18
  800708:	08011f80 	call	8011f8 <memmove>
  80070c:	80c00217 	ldw	r3,8(r16)
  800710:	80800017 	ldw	r2,0(r16)
  800714:	9029883a 	mov	r20,r18
  800718:	1c87c83a 	sub	r3,r3,r18
  80071c:	1485883a 	add	r2,r2,r18
  800720:	80800015 	stw	r2,0(r16)
  800724:	80c00215 	stw	r3,8(r16)
  800728:	9005883a 	mov	r2,r18
  80072c:	003f7906 	br	800514 <__reset+0xff7ff514>
  800730:	e009883a 	mov	r4,fp
  800734:	01400284 	movi	r5,10
  800738:	900d883a 	mov	r6,r18
  80073c:	0800fd80 	call	800fd8 <memchr>
  800740:	10003826 	beq	r2,zero,800824 <__sfvwrite_r+0x498>
  800744:	10800044 	addi	r2,r2,1
  800748:	1729c83a 	sub	r20,r2,fp
  80074c:	02000044 	movi	r8,1
  800750:	003f8f06 	br	800590 <__reset+0xff7ff590>
  800754:	80800517 	ldw	r2,20(r16)
  800758:	81400417 	ldw	r5,16(r16)
  80075c:	87000017 	ldw	fp,0(r16)
  800760:	10a9883a 	add	r20,r2,r2
  800764:	a085883a 	add	r2,r20,r2
  800768:	1028d7fa 	srli	r20,r2,31
  80076c:	e179c83a 	sub	fp,fp,r5
  800770:	e1000044 	addi	r4,fp,1
  800774:	a085883a 	add	r2,r20,r2
  800778:	1029d07a 	srai	r20,r2,1
  80077c:	2485883a 	add	r2,r4,r18
  800780:	a00d883a 	mov	r6,r20
  800784:	a080022e 	bgeu	r20,r2,800790 <__sfvwrite_r+0x404>
  800788:	1029883a 	mov	r20,r2
  80078c:	100d883a 	mov	r6,r2
  800790:	18c1000c 	andi	r3,r3,1024
  800794:	a809883a 	mov	r4,r21
  800798:	183f6a26 	beq	r3,zero,800544 <__reset+0xff7ff544>
  80079c:	300b883a 	mov	r5,r6
  8007a0:	08008300 	call	800830 <_malloc_r>
  8007a4:	102d883a 	mov	r22,r2
  8007a8:	103f6c26 	beq	r2,zero,80055c <__reset+0xff7ff55c>
  8007ac:	81400417 	ldw	r5,16(r16)
  8007b0:	1009883a 	mov	r4,r2
  8007b4:	e00d883a 	mov	r6,fp
  8007b8:	08010c00 	call	8010c0 <memcpy>
  8007bc:	8080030b 	ldhu	r2,12(r16)
  8007c0:	00fedfc4 	movi	r3,-1153
  8007c4:	10c4703a 	and	r2,r2,r3
  8007c8:	10802014 	ori	r2,r2,128
  8007cc:	8080030d 	sth	r2,12(r16)
  8007d0:	b709883a 	add	r4,r22,fp
  8007d4:	a707c83a 	sub	r3,r20,fp
  8007d8:	85800415 	stw	r22,16(r16)
  8007dc:	85000515 	stw	r20,20(r16)
  8007e0:	81000015 	stw	r4,0(r16)
  8007e4:	9039883a 	mov	fp,r18
  8007e8:	80c00215 	stw	r3,8(r16)
  8007ec:	9029883a 	mov	r20,r18
  8007f0:	902d883a 	mov	r22,r18
  8007f4:	003f3d06 	br	8004ec <__reset+0xff7ff4ec>
  8007f8:	b80b883a 	mov	r5,r23
  8007fc:	a00d883a 	mov	r6,r20
  800800:	08011f80 	call	8011f8 <memmove>
  800804:	80800017 	ldw	r2,0(r16)
  800808:	a809883a 	mov	r4,r21
  80080c:	800b883a 	mov	r5,r16
  800810:	1505883a 	add	r2,r2,r20
  800814:	80800015 	stw	r2,0(r16)
  800818:	0801a780 	call	801a78 <_fflush_r>
  80081c:	103fa526 	beq	r2,zero,8006b4 <__reset+0xff7ff6b4>
  800820:	003f5006 	br	800564 <__reset+0xff7ff564>
  800824:	95000044 	addi	r20,r18,1
  800828:	02000044 	movi	r8,1
  80082c:	003f5806 	br	800590 <__reset+0xff7ff590>

00800830 <_malloc_r>:
  800830:	defff504 	addi	sp,sp,-44
  800834:	dc800315 	stw	r18,12(sp)
  800838:	dfc00a15 	stw	ra,40(sp)
  80083c:	df000915 	stw	fp,36(sp)
  800840:	ddc00815 	stw	r23,32(sp)
  800844:	dd800715 	stw	r22,28(sp)
  800848:	dd400615 	stw	r21,24(sp)
  80084c:	dd000515 	stw	r20,20(sp)
  800850:	dcc00415 	stw	r19,16(sp)
  800854:	dc400215 	stw	r17,8(sp)
  800858:	dc000115 	stw	r16,4(sp)
  80085c:	288002c4 	addi	r2,r5,11
  800860:	00c00584 	movi	r3,22
  800864:	2025883a 	mov	r18,r4
  800868:	18802a2e 	bgeu	r3,r2,800914 <_malloc_r+0xe4>
  80086c:	047ffe04 	movi	r17,-8
  800870:	1462703a 	and	r17,r2,r17
  800874:	88009e16 	blt	r17,zero,800af0 <_malloc_r+0x2c0>
  800878:	89409d36 	bltu	r17,r5,800af0 <_malloc_r+0x2c0>
  80087c:	080326c0 	call	80326c <__malloc_lock>
  800880:	00807dc4 	movi	r2,503
  800884:	14402736 	bltu	r2,r17,800924 <_malloc_r+0xf4>
  800888:	8806d0fa 	srli	r3,r17,3
  80088c:	04c02034 	movhi	r19,128
  800890:	9cdac604 	addi	r19,r19,27416
  800894:	18c5883a 	add	r2,r3,r3
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	9885883a 	add	r2,r19,r2
  8008a4:	14000317 	ldw	r16,12(r2)
  8008a8:	80814a26 	beq	r16,r2,800dd4 <_malloc_r+0x5a4>
  8008ac:	80c00117 	ldw	r3,4(r16)
  8008b0:	81000317 	ldw	r4,12(r16)
  8008b4:	00bfff04 	movi	r2,-4
  8008b8:	1884703a 	and	r2,r3,r2
  8008bc:	81400217 	ldw	r5,8(r16)
  8008c0:	8085883a 	add	r2,r16,r2
  8008c4:	10c00117 	ldw	r3,4(r2)
  8008c8:	29000315 	stw	r4,12(r5)
  8008cc:	21400215 	stw	r5,8(r4)
  8008d0:	18c00054 	ori	r3,r3,1
  8008d4:	10c00115 	stw	r3,4(r2)
  8008d8:	9009883a 	mov	r4,r18
  8008dc:	080328c0 	call	80328c <__malloc_unlock>
  8008e0:	80800204 	addi	r2,r16,8
  8008e4:	dfc00a17 	ldw	ra,40(sp)
  8008e8:	df000917 	ldw	fp,36(sp)
  8008ec:	ddc00817 	ldw	r23,32(sp)
  8008f0:	dd800717 	ldw	r22,28(sp)
  8008f4:	dd400617 	ldw	r21,24(sp)
  8008f8:	dd000517 	ldw	r20,20(sp)
  8008fc:	dcc00417 	ldw	r19,16(sp)
  800900:	dc800317 	ldw	r18,12(sp)
  800904:	dc400217 	ldw	r17,8(sp)
  800908:	dc000117 	ldw	r16,4(sp)
  80090c:	dec00b04 	addi	sp,sp,44
  800910:	f800283a 	ret
  800914:	04400404 	movi	r17,16
  800918:	89407536 	bltu	r17,r5,800af0 <_malloc_r+0x2c0>
  80091c:	080326c0 	call	80326c <__malloc_lock>
  800920:	003fd906 	br	800888 <__reset+0xff7ff888>
  800924:	8806d27a 	srli	r3,r17,9
  800928:	18007526 	beq	r3,zero,800b00 <_malloc_r+0x2d0>
  80092c:	00800104 	movi	r2,4
  800930:	10c0ef36 	bltu	r2,r3,800cf0 <_malloc_r+0x4c0>
  800934:	8806d1ba 	srli	r3,r17,6
  800938:	19c00e04 	addi	r7,r3,56
  80093c:	39cb883a 	add	r5,r7,r7
  800940:	04c02034 	movhi	r19,128
  800944:	294b883a 	add	r5,r5,r5
  800948:	9cdac604 	addi	r19,r19,27416
  80094c:	294b883a 	add	r5,r5,r5
  800950:	994b883a 	add	r5,r19,r5
  800954:	2c000317 	ldw	r16,12(r5)
  800958:	2c000e26 	beq	r5,r16,800994 <_malloc_r+0x164>
  80095c:	80800117 	ldw	r2,4(r16)
  800960:	01bfff04 	movi	r6,-4
  800964:	010003c4 	movi	r4,15
  800968:	1184703a 	and	r2,r2,r6
  80096c:	1447c83a 	sub	r3,r2,r17
  800970:	20c00716 	blt	r4,r3,800990 <_malloc_r+0x160>
  800974:	1800650e 	bge	r3,zero,800b0c <_malloc_r+0x2dc>
  800978:	84000317 	ldw	r16,12(r16)
  80097c:	2c000526 	beq	r5,r16,800994 <_malloc_r+0x164>
  800980:	80800117 	ldw	r2,4(r16)
  800984:	1184703a 	and	r2,r2,r6
  800988:	1447c83a 	sub	r3,r2,r17
  80098c:	20fff90e 	bge	r4,r3,800974 <__reset+0xff7ff974>
  800990:	39ffffc4 	addi	r7,r7,-1
  800994:	38c00044 	addi	r3,r7,1
  800998:	01802034 	movhi	r6,128
  80099c:	9c000417 	ldw	r16,16(r19)
  8009a0:	319ac604 	addi	r6,r6,27416
  8009a4:	32400204 	addi	r9,r6,8
  8009a8:	82410326 	beq	r16,r9,800db8 <_malloc_r+0x588>
  8009ac:	81000117 	ldw	r4,4(r16)
  8009b0:	00bfff04 	movi	r2,-4
  8009b4:	208e703a 	and	r7,r4,r2
  8009b8:	3c45c83a 	sub	r2,r7,r17
  8009bc:	010003c4 	movi	r4,15
  8009c0:	2080ee16 	blt	r4,r2,800d7c <_malloc_r+0x54c>
  8009c4:	32400515 	stw	r9,20(r6)
  8009c8:	32400415 	stw	r9,16(r6)
  8009cc:	1000510e 	bge	r2,zero,800b14 <_malloc_r+0x2e4>
  8009d0:	00807fc4 	movi	r2,511
  8009d4:	11c0ce36 	bltu	r2,r7,800d10 <_malloc_r+0x4e0>
  8009d8:	3808d0fa 	srli	r4,r7,3
  8009dc:	01c00044 	movi	r7,1
  8009e0:	30800117 	ldw	r2,4(r6)
  8009e4:	210b883a 	add	r5,r4,r4
  8009e8:	294b883a 	add	r5,r5,r5
  8009ec:	2009d0ba 	srai	r4,r4,2
  8009f0:	294b883a 	add	r5,r5,r5
  8009f4:	298b883a 	add	r5,r5,r6
  8009f8:	2a000217 	ldw	r8,8(r5)
  8009fc:	3908983a 	sll	r4,r7,r4
  800a00:	81400315 	stw	r5,12(r16)
  800a04:	82000215 	stw	r8,8(r16)
  800a08:	2088b03a 	or	r4,r4,r2
  800a0c:	2c000215 	stw	r16,8(r5)
  800a10:	31000115 	stw	r4,4(r6)
  800a14:	44000315 	stw	r16,12(r8)
  800a18:	1805d0ba 	srai	r2,r3,2
  800a1c:	01400044 	movi	r5,1
  800a20:	288a983a 	sll	r5,r5,r2
  800a24:	21404336 	bltu	r4,r5,800b34 <_malloc_r+0x304>
  800a28:	2144703a 	and	r2,r4,r5
  800a2c:	10000a1e 	bne	r2,zero,800a58 <_malloc_r+0x228>
  800a30:	00bfff04 	movi	r2,-4
  800a34:	294b883a 	add	r5,r5,r5
  800a38:	1886703a 	and	r3,r3,r2
  800a3c:	2144703a 	and	r2,r4,r5
  800a40:	18c00104 	addi	r3,r3,4
  800a44:	1000041e 	bne	r2,zero,800a58 <_malloc_r+0x228>
  800a48:	294b883a 	add	r5,r5,r5
  800a4c:	2144703a 	and	r2,r4,r5
  800a50:	18c00104 	addi	r3,r3,4
  800a54:	103ffc26 	beq	r2,zero,800a48 <__reset+0xff7ffa48>
  800a58:	023fff04 	movi	r8,-4
  800a5c:	01c003c4 	movi	r7,15
  800a60:	18c5883a 	add	r2,r3,r3
  800a64:	1085883a 	add	r2,r2,r2
  800a68:	1085883a 	add	r2,r2,r2
  800a6c:	9895883a 	add	r10,r19,r2
  800a70:	52c00304 	addi	r11,r10,12
  800a74:	1819883a 	mov	r12,r3
  800a78:	5c000017 	ldw	r16,0(r11)
  800a7c:	59bffd04 	addi	r6,r11,-12
  800a80:	8180041e 	bne	r16,r6,800a94 <_malloc_r+0x264>
  800a84:	0000ce06 	br	800dc0 <_malloc_r+0x590>
  800a88:	2000d70e 	bge	r4,zero,800de8 <_malloc_r+0x5b8>
  800a8c:	84000317 	ldw	r16,12(r16)
  800a90:	8180cb26 	beq	r16,r6,800dc0 <_malloc_r+0x590>
  800a94:	80800117 	ldw	r2,4(r16)
  800a98:	1204703a 	and	r2,r2,r8
  800a9c:	1449c83a 	sub	r4,r2,r17
  800aa0:	393ff90e 	bge	r7,r4,800a88 <__reset+0xff7ffa88>
  800aa4:	80800317 	ldw	r2,12(r16)
  800aa8:	80c00217 	ldw	r3,8(r16)
  800aac:	89400054 	ori	r5,r17,1
  800ab0:	81400115 	stw	r5,4(r16)
  800ab4:	18800315 	stw	r2,12(r3)
  800ab8:	10c00215 	stw	r3,8(r2)
  800abc:	8463883a 	add	r17,r16,r17
  800ac0:	9c400515 	stw	r17,20(r19)
  800ac4:	9c400415 	stw	r17,16(r19)
  800ac8:	20800054 	ori	r2,r4,1
  800acc:	88800115 	stw	r2,4(r17)
  800ad0:	8a400315 	stw	r9,12(r17)
  800ad4:	8a400215 	stw	r9,8(r17)
  800ad8:	8923883a 	add	r17,r17,r4
  800adc:	89000015 	stw	r4,0(r17)
  800ae0:	9009883a 	mov	r4,r18
  800ae4:	080328c0 	call	80328c <__malloc_unlock>
  800ae8:	80800204 	addi	r2,r16,8
  800aec:	003f7d06 	br	8008e4 <__reset+0xff7ff8e4>
  800af0:	00800304 	movi	r2,12
  800af4:	90800015 	stw	r2,0(r18)
  800af8:	0005883a 	mov	r2,zero
  800afc:	003f7906 	br	8008e4 <__reset+0xff7ff8e4>
  800b00:	01401f84 	movi	r5,126
  800b04:	01c00fc4 	movi	r7,63
  800b08:	003f8d06 	br	800940 <__reset+0xff7ff940>
  800b0c:	81000317 	ldw	r4,12(r16)
  800b10:	003f6a06 	br	8008bc <__reset+0xff7ff8bc>
  800b14:	81c5883a 	add	r2,r16,r7
  800b18:	10c00117 	ldw	r3,4(r2)
  800b1c:	9009883a 	mov	r4,r18
  800b20:	18c00054 	ori	r3,r3,1
  800b24:	10c00115 	stw	r3,4(r2)
  800b28:	080328c0 	call	80328c <__malloc_unlock>
  800b2c:	80800204 	addi	r2,r16,8
  800b30:	003f6c06 	br	8008e4 <__reset+0xff7ff8e4>
  800b34:	9c000217 	ldw	r16,8(r19)
  800b38:	00bfff04 	movi	r2,-4
  800b3c:	85800117 	ldw	r22,4(r16)
  800b40:	b0ac703a 	and	r22,r22,r2
  800b44:	b4400336 	bltu	r22,r17,800b54 <_malloc_r+0x324>
  800b48:	b445c83a 	sub	r2,r22,r17
  800b4c:	00c003c4 	movi	r3,15
  800b50:	18805d16 	blt	r3,r2,800cc8 <_malloc_r+0x498>
  800b54:	05c02074 	movhi	r23,129
  800b58:	00802074 	movhi	r2,129
  800b5c:	bde07f04 	addi	r23,r23,-32260
  800b60:	10a08f04 	addi	r2,r2,-32196
  800b64:	15400017 	ldw	r21,0(r2)
  800b68:	b9000017 	ldw	r4,0(r23)
  800b6c:	00ffffc4 	movi	r3,-1
  800b70:	858d883a 	add	r6,r16,r22
  800b74:	8d6b883a 	add	r21,r17,r21
  800b78:	20c0e426 	beq	r4,r3,800f0c <_malloc_r+0x6dc>
  800b7c:	ad4403c4 	addi	r21,r21,4111
  800b80:	00fc0004 	movi	r3,-4096
  800b84:	a8ea703a 	and	r21,r21,r3
  800b88:	9009883a 	mov	r4,r18
  800b8c:	a80b883a 	mov	r5,r21
  800b90:	d9800015 	stw	r6,0(sp)
  800b94:	08018f40 	call	8018f4 <_sbrk_r>
  800b98:	00ffffc4 	movi	r3,-1
  800b9c:	1029883a 	mov	r20,r2
  800ba0:	d9800017 	ldw	r6,0(sp)
  800ba4:	10c0a426 	beq	r2,r3,800e38 <_malloc_r+0x608>
  800ba8:	1180a236 	bltu	r2,r6,800e34 <_malloc_r+0x604>
  800bac:	07002074 	movhi	fp,129
  800bb0:	e7209704 	addi	fp,fp,-32164
  800bb4:	e0c00017 	ldw	r3,0(fp)
  800bb8:	a8c7883a 	add	r3,r21,r3
  800bbc:	e0c00015 	stw	r3,0(fp)
  800bc0:	3500da26 	beq	r6,r20,800f2c <_malloc_r+0x6fc>
  800bc4:	b9000017 	ldw	r4,0(r23)
  800bc8:	00bfffc4 	movi	r2,-1
  800bcc:	2080e426 	beq	r4,r2,800f60 <_malloc_r+0x730>
  800bd0:	a185c83a 	sub	r2,r20,r6
  800bd4:	1885883a 	add	r2,r3,r2
  800bd8:	e0800015 	stw	r2,0(fp)
  800bdc:	a0c001cc 	andi	r3,r20,7
  800be0:	1800b526 	beq	r3,zero,800eb8 <_malloc_r+0x688>
  800be4:	a0e9c83a 	sub	r20,r20,r3
  800be8:	00840204 	movi	r2,4104
  800bec:	a5000204 	addi	r20,r20,8
  800bf0:	10c7c83a 	sub	r3,r2,r3
  800bf4:	a545883a 	add	r2,r20,r21
  800bf8:	1083ffcc 	andi	r2,r2,4095
  800bfc:	18abc83a 	sub	r21,r3,r2
  800c00:	9009883a 	mov	r4,r18
  800c04:	a80b883a 	mov	r5,r21
  800c08:	08018f40 	call	8018f4 <_sbrk_r>
  800c0c:	00ffffc4 	movi	r3,-1
  800c10:	10c0d026 	beq	r2,r3,800f54 <_malloc_r+0x724>
  800c14:	1507c83a 	sub	r3,r2,r20
  800c18:	a8c7883a 	add	r3,r21,r3
  800c1c:	18c00054 	ori	r3,r3,1
  800c20:	e0800017 	ldw	r2,0(fp)
  800c24:	9d000215 	stw	r20,8(r19)
  800c28:	a0c00115 	stw	r3,4(r20)
  800c2c:	a887883a 	add	r3,r21,r2
  800c30:	e0c00015 	stw	r3,0(fp)
  800c34:	84c00e26 	beq	r16,r19,800c70 <_malloc_r+0x440>
  800c38:	018003c4 	movi	r6,15
  800c3c:	3580a02e 	bgeu	r6,r22,800ec0 <_malloc_r+0x690>
  800c40:	81400117 	ldw	r5,4(r16)
  800c44:	013ffe04 	movi	r4,-8
  800c48:	b0bffd04 	addi	r2,r22,-12
  800c4c:	1104703a 	and	r2,r2,r4
  800c50:	2900004c 	andi	r4,r5,1
  800c54:	1108b03a 	or	r4,r2,r4
  800c58:	81000115 	stw	r4,4(r16)
  800c5c:	01400144 	movi	r5,5
  800c60:	8089883a 	add	r4,r16,r2
  800c64:	21400115 	stw	r5,4(r4)
  800c68:	21400215 	stw	r5,8(r4)
  800c6c:	3080c036 	bltu	r6,r2,800f70 <_malloc_r+0x740>
  800c70:	00802074 	movhi	r2,129
  800c74:	10a08e04 	addi	r2,r2,-32200
  800c78:	11000017 	ldw	r4,0(r2)
  800c7c:	20c0012e 	bgeu	r4,r3,800c84 <_malloc_r+0x454>
  800c80:	10c00015 	stw	r3,0(r2)
  800c84:	00802074 	movhi	r2,129
  800c88:	10a08d04 	addi	r2,r2,-32204
  800c8c:	11000017 	ldw	r4,0(r2)
  800c90:	9c000217 	ldw	r16,8(r19)
  800c94:	20c0012e 	bgeu	r4,r3,800c9c <_malloc_r+0x46c>
  800c98:	10c00015 	stw	r3,0(r2)
  800c9c:	80c00117 	ldw	r3,4(r16)
  800ca0:	00bfff04 	movi	r2,-4
  800ca4:	1886703a 	and	r3,r3,r2
  800ca8:	1c45c83a 	sub	r2,r3,r17
  800cac:	1c400236 	bltu	r3,r17,800cb8 <_malloc_r+0x488>
  800cb0:	00c003c4 	movi	r3,15
  800cb4:	18800416 	blt	r3,r2,800cc8 <_malloc_r+0x498>
  800cb8:	9009883a 	mov	r4,r18
  800cbc:	080328c0 	call	80328c <__malloc_unlock>
  800cc0:	0005883a 	mov	r2,zero
  800cc4:	003f0706 	br	8008e4 <__reset+0xff7ff8e4>
  800cc8:	88c00054 	ori	r3,r17,1
  800ccc:	80c00115 	stw	r3,4(r16)
  800cd0:	8463883a 	add	r17,r16,r17
  800cd4:	10800054 	ori	r2,r2,1
  800cd8:	9c400215 	stw	r17,8(r19)
  800cdc:	88800115 	stw	r2,4(r17)
  800ce0:	9009883a 	mov	r4,r18
  800ce4:	080328c0 	call	80328c <__malloc_unlock>
  800ce8:	80800204 	addi	r2,r16,8
  800cec:	003efd06 	br	8008e4 <__reset+0xff7ff8e4>
  800cf0:	00800504 	movi	r2,20
  800cf4:	10c0482e 	bgeu	r2,r3,800e18 <_malloc_r+0x5e8>
  800cf8:	00801504 	movi	r2,84
  800cfc:	10c06836 	bltu	r2,r3,800ea0 <_malloc_r+0x670>
  800d00:	8806d33a 	srli	r3,r17,12
  800d04:	19c01b84 	addi	r7,r3,110
  800d08:	39cb883a 	add	r5,r7,r7
  800d0c:	003f0c06 	br	800940 <__reset+0xff7ff940>
  800d10:	3804d27a 	srli	r2,r7,9
  800d14:	01000104 	movi	r4,4
  800d18:	2080422e 	bgeu	r4,r2,800e24 <_malloc_r+0x5f4>
  800d1c:	01000504 	movi	r4,20
  800d20:	20807c36 	bltu	r4,r2,800f14 <_malloc_r+0x6e4>
  800d24:	110016c4 	addi	r4,r2,91
  800d28:	210b883a 	add	r5,r4,r4
  800d2c:	294b883a 	add	r5,r5,r5
  800d30:	294b883a 	add	r5,r5,r5
  800d34:	994b883a 	add	r5,r19,r5
  800d38:	28800217 	ldw	r2,8(r5)
  800d3c:	02002034 	movhi	r8,128
  800d40:	421ac604 	addi	r8,r8,27416
  800d44:	11406326 	beq	r2,r5,800ed4 <_malloc_r+0x6a4>
  800d48:	01bfff04 	movi	r6,-4
  800d4c:	11000117 	ldw	r4,4(r2)
  800d50:	2188703a 	and	r4,r4,r6
  800d54:	3900022e 	bgeu	r7,r4,800d60 <_malloc_r+0x530>
  800d58:	10800217 	ldw	r2,8(r2)
  800d5c:	28bffb1e 	bne	r5,r2,800d4c <__reset+0xff7ffd4c>
  800d60:	11800317 	ldw	r6,12(r2)
  800d64:	99000117 	ldw	r4,4(r19)
  800d68:	81800315 	stw	r6,12(r16)
  800d6c:	80800215 	stw	r2,8(r16)
  800d70:	34000215 	stw	r16,8(r6)
  800d74:	14000315 	stw	r16,12(r2)
  800d78:	003f2706 	br	800a18 <__reset+0xff7ffa18>
  800d7c:	88c00054 	ori	r3,r17,1
  800d80:	80c00115 	stw	r3,4(r16)
  800d84:	8463883a 	add	r17,r16,r17
  800d88:	34400515 	stw	r17,20(r6)
  800d8c:	34400415 	stw	r17,16(r6)
  800d90:	10c00054 	ori	r3,r2,1
  800d94:	8a400315 	stw	r9,12(r17)
  800d98:	8a400215 	stw	r9,8(r17)
  800d9c:	88c00115 	stw	r3,4(r17)
  800da0:	88a3883a 	add	r17,r17,r2
  800da4:	88800015 	stw	r2,0(r17)
  800da8:	9009883a 	mov	r4,r18
  800dac:	080328c0 	call	80328c <__malloc_unlock>
  800db0:	80800204 	addi	r2,r16,8
  800db4:	003ecb06 	br	8008e4 <__reset+0xff7ff8e4>
  800db8:	31000117 	ldw	r4,4(r6)
  800dbc:	003f1606 	br	800a18 <__reset+0xff7ffa18>
  800dc0:	63000044 	addi	r12,r12,1
  800dc4:	608000cc 	andi	r2,r12,3
  800dc8:	5ac00204 	addi	r11,r11,8
  800dcc:	103f2a1e 	bne	r2,zero,800a78 <__reset+0xff7ffa78>
  800dd0:	00002106 	br	800e58 <_malloc_r+0x628>
  800dd4:	80800204 	addi	r2,r16,8
  800dd8:	84000517 	ldw	r16,20(r16)
  800ddc:	143eb31e 	bne	r2,r16,8008ac <__reset+0xff7ff8ac>
  800de0:	18c00084 	addi	r3,r3,2
  800de4:	003eec06 	br	800998 <__reset+0xff7ff998>
  800de8:	8085883a 	add	r2,r16,r2
  800dec:	10c00117 	ldw	r3,4(r2)
  800df0:	81000317 	ldw	r4,12(r16)
  800df4:	81400217 	ldw	r5,8(r16)
  800df8:	18c00054 	ori	r3,r3,1
  800dfc:	10c00115 	stw	r3,4(r2)
  800e00:	29000315 	stw	r4,12(r5)
  800e04:	21400215 	stw	r5,8(r4)
  800e08:	9009883a 	mov	r4,r18
  800e0c:	080328c0 	call	80328c <__malloc_unlock>
  800e10:	80800204 	addi	r2,r16,8
  800e14:	003eb306 	br	8008e4 <__reset+0xff7ff8e4>
  800e18:	19c016c4 	addi	r7,r3,91
  800e1c:	39cb883a 	add	r5,r7,r7
  800e20:	003ec706 	br	800940 <__reset+0xff7ff940>
  800e24:	3804d1ba 	srli	r2,r7,6
  800e28:	11000e04 	addi	r4,r2,56
  800e2c:	210b883a 	add	r5,r4,r4
  800e30:	003fbe06 	br	800d2c <__reset+0xff7ffd2c>
  800e34:	84ff5d26 	beq	r16,r19,800bac <__reset+0xff7ffbac>
  800e38:	9c000217 	ldw	r16,8(r19)
  800e3c:	00bfff04 	movi	r2,-4
  800e40:	80c00117 	ldw	r3,4(r16)
  800e44:	1886703a 	and	r3,r3,r2
  800e48:	003f9706 	br	800ca8 <__reset+0xff7ffca8>
  800e4c:	52800017 	ldw	r10,0(r10)
  800e50:	18ffffc4 	addi	r3,r3,-1
  800e54:	50805c1e 	bne	r10,r2,800fc8 <_malloc_r+0x798>
  800e58:	190000cc 	andi	r4,r3,3
  800e5c:	50bffe04 	addi	r2,r10,-8
  800e60:	203ffa1e 	bne	r4,zero,800e4c <__reset+0xff7ffe4c>
  800e64:	98800117 	ldw	r2,4(r19)
  800e68:	0146303a 	nor	r3,zero,r5
  800e6c:	1884703a 	and	r2,r3,r2
  800e70:	98800115 	stw	r2,4(r19)
  800e74:	294b883a 	add	r5,r5,r5
  800e78:	117f2e36 	bltu	r2,r5,800b34 <__reset+0xff7ffb34>
  800e7c:	283f2d26 	beq	r5,zero,800b34 <__reset+0xff7ffb34>
  800e80:	1146703a 	and	r3,r2,r5
  800e84:	1800521e 	bne	r3,zero,800fd0 <_malloc_r+0x7a0>
  800e88:	6007883a 	mov	r3,r12
  800e8c:	294b883a 	add	r5,r5,r5
  800e90:	1148703a 	and	r4,r2,r5
  800e94:	18c00104 	addi	r3,r3,4
  800e98:	203ffc26 	beq	r4,zero,800e8c <__reset+0xff7ffe8c>
  800e9c:	003ef006 	br	800a60 <__reset+0xff7ffa60>
  800ea0:	00805504 	movi	r2,340
  800ea4:	10c01336 	bltu	r2,r3,800ef4 <_malloc_r+0x6c4>
  800ea8:	8806d3fa 	srli	r3,r17,15
  800eac:	19c01dc4 	addi	r7,r3,119
  800eb0:	39cb883a 	add	r5,r7,r7
  800eb4:	003ea206 	br	800940 <__reset+0xff7ff940>
  800eb8:	00c40004 	movi	r3,4096
  800ebc:	003f4d06 	br	800bf4 <__reset+0xff7ffbf4>
  800ec0:	00800044 	movi	r2,1
  800ec4:	a0800115 	stw	r2,4(r20)
  800ec8:	a021883a 	mov	r16,r20
  800ecc:	0007883a 	mov	r3,zero
  800ed0:	003f7506 	br	800ca8 <__reset+0xff7ffca8>
  800ed4:	200bd0ba 	srai	r5,r4,2
  800ed8:	01800044 	movi	r6,1
  800edc:	41000117 	ldw	r4,4(r8)
  800ee0:	314a983a 	sll	r5,r6,r5
  800ee4:	100d883a 	mov	r6,r2
  800ee8:	2908b03a 	or	r4,r5,r4
  800eec:	41000115 	stw	r4,4(r8)
  800ef0:	003f9d06 	br	800d68 <__reset+0xff7ffd68>
  800ef4:	00815504 	movi	r2,1364
  800ef8:	10c01336 	bltu	r2,r3,800f48 <_malloc_r+0x718>
  800efc:	8806d4ba 	srli	r3,r17,18
  800f00:	19c01f04 	addi	r7,r3,124
  800f04:	39cb883a 	add	r5,r7,r7
  800f08:	003e8d06 	br	800940 <__reset+0xff7ff940>
  800f0c:	ad400404 	addi	r21,r21,16
  800f10:	003f1d06 	br	800b88 <__reset+0xff7ffb88>
  800f14:	01001504 	movi	r4,84
  800f18:	20801c36 	bltu	r4,r2,800f8c <_malloc_r+0x75c>
  800f1c:	3804d33a 	srli	r2,r7,12
  800f20:	11001b84 	addi	r4,r2,110
  800f24:	210b883a 	add	r5,r4,r4
  800f28:	003f8006 	br	800d2c <__reset+0xff7ffd2c>
  800f2c:	3083ffcc 	andi	r2,r6,4095
  800f30:	103f241e 	bne	r2,zero,800bc4 <__reset+0xff7ffbc4>
  800f34:	99000217 	ldw	r4,8(r19)
  800f38:	ad85883a 	add	r2,r21,r22
  800f3c:	10800054 	ori	r2,r2,1
  800f40:	20800115 	stw	r2,4(r4)
  800f44:	003f4a06 	br	800c70 <__reset+0xff7ffc70>
  800f48:	01403f04 	movi	r5,252
  800f4c:	01c01f84 	movi	r7,126
  800f50:	003e7b06 	br	800940 <__reset+0xff7ff940>
  800f54:	00c00044 	movi	r3,1
  800f58:	002b883a 	mov	r21,zero
  800f5c:	003f3006 	br	800c20 <__reset+0xff7ffc20>
  800f60:	00802074 	movhi	r2,129
  800f64:	10a07f04 	addi	r2,r2,-32260
  800f68:	15000015 	stw	r20,0(r2)
  800f6c:	003f1b06 	br	800bdc <__reset+0xff7ffbdc>
  800f70:	9009883a 	mov	r4,r18
  800f74:	81400204 	addi	r5,r16,8
  800f78:	08021a80 	call	8021a8 <_free_r>
  800f7c:	00802074 	movhi	r2,129
  800f80:	10a09704 	addi	r2,r2,-32164
  800f84:	10c00017 	ldw	r3,0(r2)
  800f88:	003f3906 	br	800c70 <__reset+0xff7ffc70>
  800f8c:	01005504 	movi	r4,340
  800f90:	20800436 	bltu	r4,r2,800fa4 <_malloc_r+0x774>
  800f94:	3804d3fa 	srli	r2,r7,15
  800f98:	11001dc4 	addi	r4,r2,119
  800f9c:	210b883a 	add	r5,r4,r4
  800fa0:	003f6206 	br	800d2c <__reset+0xff7ffd2c>
  800fa4:	01015504 	movi	r4,1364
  800fa8:	20800436 	bltu	r4,r2,800fbc <_malloc_r+0x78c>
  800fac:	3804d4ba 	srli	r2,r7,18
  800fb0:	11001f04 	addi	r4,r2,124
  800fb4:	210b883a 	add	r5,r4,r4
  800fb8:	003f5c06 	br	800d2c <__reset+0xff7ffd2c>
  800fbc:	01403f04 	movi	r5,252
  800fc0:	01001f84 	movi	r4,126
  800fc4:	003f5906 	br	800d2c <__reset+0xff7ffd2c>
  800fc8:	98800117 	ldw	r2,4(r19)
  800fcc:	003fa906 	br	800e74 <__reset+0xff7ffe74>
  800fd0:	6007883a 	mov	r3,r12
  800fd4:	003ea206 	br	800a60 <__reset+0xff7ffa60>

00800fd8 <memchr>:
  800fd8:	208000cc 	andi	r2,r4,3
  800fdc:	280f883a 	mov	r7,r5
  800fe0:	10003526 	beq	r2,zero,8010b8 <memchr+0xe0>
  800fe4:	30bfffc4 	addi	r2,r6,-1
  800fe8:	30001b26 	beq	r6,zero,801058 <memchr+0x80>
  800fec:	21800003 	ldbu	r6,0(r4)
  800ff0:	28c03fcc 	andi	r3,r5,255
  800ff4:	30c01a26 	beq	r6,r3,801060 <memchr+0x88>
  800ff8:	180d883a 	mov	r6,r3
  800ffc:	00000406 	br	801010 <memchr+0x38>
  801000:	10001526 	beq	r2,zero,801058 <memchr+0x80>
  801004:	20c00003 	ldbu	r3,0(r4)
  801008:	10bfffc4 	addi	r2,r2,-1
  80100c:	19801426 	beq	r3,r6,801060 <memchr+0x88>
  801010:	21000044 	addi	r4,r4,1
  801014:	20c000cc 	andi	r3,r4,3
  801018:	183ff91e 	bne	r3,zero,801000 <__reset+0xff800000>
  80101c:	024000c4 	movi	r9,3
  801020:	48801136 	bltu	r9,r2,801068 <memchr+0x90>
  801024:	10000c26 	beq	r2,zero,801058 <memchr+0x80>
  801028:	20c00003 	ldbu	r3,0(r4)
  80102c:	29403fcc 	andi	r5,r5,255
  801030:	19400b26 	beq	r3,r5,801060 <memchr+0x88>
  801034:	20c00044 	addi	r3,r4,1
  801038:	2085883a 	add	r2,r4,r2
  80103c:	39803fcc 	andi	r6,r7,255
  801040:	00000306 	br	801050 <memchr+0x78>
  801044:	18c00044 	addi	r3,r3,1
  801048:	197fffc3 	ldbu	r5,-1(r3)
  80104c:	29800426 	beq	r5,r6,801060 <memchr+0x88>
  801050:	1809883a 	mov	r4,r3
  801054:	18bffb1e 	bne	r3,r2,801044 <__reset+0xff800044>
  801058:	0005883a 	mov	r2,zero
  80105c:	f800283a 	ret
  801060:	2005883a 	mov	r2,r4
  801064:	f800283a 	ret
  801068:	28c03fcc 	andi	r3,r5,255
  80106c:	1810923a 	slli	r8,r3,8
  801070:	02ffbff4 	movhi	r11,65279
  801074:	02a02074 	movhi	r10,32897
  801078:	40c6b03a 	or	r3,r8,r3
  80107c:	1810943a 	slli	r8,r3,16
  801080:	5affbfc4 	addi	r11,r11,-257
  801084:	52a02004 	addi	r10,r10,-32640
  801088:	40d0b03a 	or	r8,r8,r3
  80108c:	20c00017 	ldw	r3,0(r4)
  801090:	40c6f03a 	xor	r3,r8,r3
  801094:	1acd883a 	add	r6,r3,r11
  801098:	00c6303a 	nor	r3,zero,r3
  80109c:	30c6703a 	and	r3,r6,r3
  8010a0:	1a86703a 	and	r3,r3,r10
  8010a4:	183fdf1e 	bne	r3,zero,801024 <__reset+0xff800024>
  8010a8:	10bfff04 	addi	r2,r2,-4
  8010ac:	21000104 	addi	r4,r4,4
  8010b0:	48bff636 	bltu	r9,r2,80108c <__reset+0xff80008c>
  8010b4:	003fdb06 	br	801024 <__reset+0xff800024>
  8010b8:	3005883a 	mov	r2,r6
  8010bc:	003fd706 	br	80101c <__reset+0xff80001c>

008010c0 <memcpy>:
  8010c0:	deffff04 	addi	sp,sp,-4
  8010c4:	dc000015 	stw	r16,0(sp)
  8010c8:	00c003c4 	movi	r3,15
  8010cc:	2005883a 	mov	r2,r4
  8010d0:	1980432e 	bgeu	r3,r6,8011e0 <memcpy+0x120>
  8010d4:	2146b03a 	or	r3,r4,r5
  8010d8:	18c000cc 	andi	r3,r3,3
  8010dc:	1800421e 	bne	r3,zero,8011e8 <memcpy+0x128>
  8010e0:	343ffc04 	addi	r16,r6,-16
  8010e4:	8020d13a 	srli	r16,r16,4
  8010e8:	28c00104 	addi	r3,r5,4
  8010ec:	23400104 	addi	r13,r4,4
  8010f0:	801e913a 	slli	r15,r16,4
  8010f4:	2b000204 	addi	r12,r5,8
  8010f8:	22c00204 	addi	r11,r4,8
  8010fc:	7bc00504 	addi	r15,r15,20
  801100:	2a800304 	addi	r10,r5,12
  801104:	22400304 	addi	r9,r4,12
  801108:	2bdf883a 	add	r15,r5,r15
  80110c:	2811883a 	mov	r8,r5
  801110:	200f883a 	mov	r7,r4
  801114:	41000017 	ldw	r4,0(r8)
  801118:	39c00404 	addi	r7,r7,16
  80111c:	18c00404 	addi	r3,r3,16
  801120:	393ffc15 	stw	r4,-16(r7)
  801124:	1bbffc17 	ldw	r14,-16(r3)
  801128:	6b400404 	addi	r13,r13,16
  80112c:	5ac00404 	addi	r11,r11,16
  801130:	6bbffc15 	stw	r14,-16(r13)
  801134:	63800017 	ldw	r14,0(r12)
  801138:	4a400404 	addi	r9,r9,16
  80113c:	42000404 	addi	r8,r8,16
  801140:	5bbffc15 	stw	r14,-16(r11)
  801144:	53800017 	ldw	r14,0(r10)
  801148:	63000404 	addi	r12,r12,16
  80114c:	52800404 	addi	r10,r10,16
  801150:	4bbffc15 	stw	r14,-16(r9)
  801154:	1bffef1e 	bne	r3,r15,801114 <__reset+0xff800114>
  801158:	81c00044 	addi	r7,r16,1
  80115c:	380e913a 	slli	r7,r7,4
  801160:	310003cc 	andi	r4,r6,15
  801164:	02c000c4 	movi	r11,3
  801168:	11c7883a 	add	r3,r2,r7
  80116c:	29cb883a 	add	r5,r5,r7
  801170:	59001f2e 	bgeu	r11,r4,8011f0 <memcpy+0x130>
  801174:	1813883a 	mov	r9,r3
  801178:	2811883a 	mov	r8,r5
  80117c:	200f883a 	mov	r7,r4
  801180:	42800017 	ldw	r10,0(r8)
  801184:	4a400104 	addi	r9,r9,4
  801188:	39ffff04 	addi	r7,r7,-4
  80118c:	4abfff15 	stw	r10,-4(r9)
  801190:	42000104 	addi	r8,r8,4
  801194:	59fffa36 	bltu	r11,r7,801180 <__reset+0xff800180>
  801198:	213fff04 	addi	r4,r4,-4
  80119c:	2008d0ba 	srli	r4,r4,2
  8011a0:	318000cc 	andi	r6,r6,3
  8011a4:	21000044 	addi	r4,r4,1
  8011a8:	2109883a 	add	r4,r4,r4
  8011ac:	2109883a 	add	r4,r4,r4
  8011b0:	1907883a 	add	r3,r3,r4
  8011b4:	290b883a 	add	r5,r5,r4
  8011b8:	30000626 	beq	r6,zero,8011d4 <memcpy+0x114>
  8011bc:	198d883a 	add	r6,r3,r6
  8011c0:	29c00003 	ldbu	r7,0(r5)
  8011c4:	18c00044 	addi	r3,r3,1
  8011c8:	29400044 	addi	r5,r5,1
  8011cc:	19ffffc5 	stb	r7,-1(r3)
  8011d0:	19bffb1e 	bne	r3,r6,8011c0 <__reset+0xff8001c0>
  8011d4:	dc000017 	ldw	r16,0(sp)
  8011d8:	dec00104 	addi	sp,sp,4
  8011dc:	f800283a 	ret
  8011e0:	2007883a 	mov	r3,r4
  8011e4:	003ff406 	br	8011b8 <__reset+0xff8001b8>
  8011e8:	2007883a 	mov	r3,r4
  8011ec:	003ff306 	br	8011bc <__reset+0xff8001bc>
  8011f0:	200d883a 	mov	r6,r4
  8011f4:	003ff006 	br	8011b8 <__reset+0xff8001b8>

008011f8 <memmove>:
  8011f8:	2005883a 	mov	r2,r4
  8011fc:	29000b2e 	bgeu	r5,r4,80122c <memmove+0x34>
  801200:	298f883a 	add	r7,r5,r6
  801204:	21c0092e 	bgeu	r4,r7,80122c <memmove+0x34>
  801208:	2187883a 	add	r3,r4,r6
  80120c:	198bc83a 	sub	r5,r3,r6
  801210:	30004b26 	beq	r6,zero,801340 <memmove+0x148>
  801214:	39ffffc4 	addi	r7,r7,-1
  801218:	39000003 	ldbu	r4,0(r7)
  80121c:	18ffffc4 	addi	r3,r3,-1
  801220:	19000005 	stb	r4,0(r3)
  801224:	197ffb1e 	bne	r3,r5,801214 <__reset+0xff800214>
  801228:	f800283a 	ret
  80122c:	00c003c4 	movi	r3,15
  801230:	1980412e 	bgeu	r3,r6,801338 <memmove+0x140>
  801234:	1146b03a 	or	r3,r2,r5
  801238:	18c000cc 	andi	r3,r3,3
  80123c:	1800411e 	bne	r3,zero,801344 <memmove+0x14c>
  801240:	33fffc04 	addi	r15,r6,-16
  801244:	781ed13a 	srli	r15,r15,4
  801248:	28c00104 	addi	r3,r5,4
  80124c:	13400104 	addi	r13,r2,4
  801250:	781c913a 	slli	r14,r15,4
  801254:	2b000204 	addi	r12,r5,8
  801258:	12c00204 	addi	r11,r2,8
  80125c:	73800504 	addi	r14,r14,20
  801260:	2a800304 	addi	r10,r5,12
  801264:	12400304 	addi	r9,r2,12
  801268:	2b9d883a 	add	r14,r5,r14
  80126c:	2811883a 	mov	r8,r5
  801270:	100f883a 	mov	r7,r2
  801274:	41000017 	ldw	r4,0(r8)
  801278:	39c00404 	addi	r7,r7,16
  80127c:	18c00404 	addi	r3,r3,16
  801280:	393ffc15 	stw	r4,-16(r7)
  801284:	193ffc17 	ldw	r4,-16(r3)
  801288:	6b400404 	addi	r13,r13,16
  80128c:	5ac00404 	addi	r11,r11,16
  801290:	693ffc15 	stw	r4,-16(r13)
  801294:	61000017 	ldw	r4,0(r12)
  801298:	4a400404 	addi	r9,r9,16
  80129c:	42000404 	addi	r8,r8,16
  8012a0:	593ffc15 	stw	r4,-16(r11)
  8012a4:	51000017 	ldw	r4,0(r10)
  8012a8:	63000404 	addi	r12,r12,16
  8012ac:	52800404 	addi	r10,r10,16
  8012b0:	493ffc15 	stw	r4,-16(r9)
  8012b4:	1bbfef1e 	bne	r3,r14,801274 <__reset+0xff800274>
  8012b8:	79000044 	addi	r4,r15,1
  8012bc:	2008913a 	slli	r4,r4,4
  8012c0:	328003cc 	andi	r10,r6,15
  8012c4:	02c000c4 	movi	r11,3
  8012c8:	1107883a 	add	r3,r2,r4
  8012cc:	290b883a 	add	r5,r5,r4
  8012d0:	5a801e2e 	bgeu	r11,r10,80134c <memmove+0x154>
  8012d4:	1813883a 	mov	r9,r3
  8012d8:	2811883a 	mov	r8,r5
  8012dc:	500f883a 	mov	r7,r10
  8012e0:	41000017 	ldw	r4,0(r8)
  8012e4:	4a400104 	addi	r9,r9,4
  8012e8:	39ffff04 	addi	r7,r7,-4
  8012ec:	493fff15 	stw	r4,-4(r9)
  8012f0:	42000104 	addi	r8,r8,4
  8012f4:	59fffa36 	bltu	r11,r7,8012e0 <__reset+0xff8002e0>
  8012f8:	513fff04 	addi	r4,r10,-4
  8012fc:	2008d0ba 	srli	r4,r4,2
  801300:	318000cc 	andi	r6,r6,3
  801304:	21000044 	addi	r4,r4,1
  801308:	2109883a 	add	r4,r4,r4
  80130c:	2109883a 	add	r4,r4,r4
  801310:	1907883a 	add	r3,r3,r4
  801314:	290b883a 	add	r5,r5,r4
  801318:	30000926 	beq	r6,zero,801340 <memmove+0x148>
  80131c:	198d883a 	add	r6,r3,r6
  801320:	29c00003 	ldbu	r7,0(r5)
  801324:	18c00044 	addi	r3,r3,1
  801328:	29400044 	addi	r5,r5,1
  80132c:	19ffffc5 	stb	r7,-1(r3)
  801330:	19bffb1e 	bne	r3,r6,801320 <__reset+0xff800320>
  801334:	f800283a 	ret
  801338:	1007883a 	mov	r3,r2
  80133c:	003ff606 	br	801318 <__reset+0xff800318>
  801340:	f800283a 	ret
  801344:	1007883a 	mov	r3,r2
  801348:	003ff406 	br	80131c <__reset+0xff80031c>
  80134c:	500d883a 	mov	r6,r10
  801350:	003ff106 	br	801318 <__reset+0xff800318>

00801354 <_realloc_r>:
  801354:	defff604 	addi	sp,sp,-40
  801358:	dcc00315 	stw	r19,12(sp)
  80135c:	dc400115 	stw	r17,4(sp)
  801360:	dfc00915 	stw	ra,36(sp)
  801364:	df000815 	stw	fp,32(sp)
  801368:	ddc00715 	stw	r23,28(sp)
  80136c:	dd800615 	stw	r22,24(sp)
  801370:	dd400515 	stw	r21,20(sp)
  801374:	dd000415 	stw	r20,16(sp)
  801378:	dc800215 	stw	r18,8(sp)
  80137c:	dc000015 	stw	r16,0(sp)
  801380:	2827883a 	mov	r19,r5
  801384:	3023883a 	mov	r17,r6
  801388:	2800bf26 	beq	r5,zero,801688 <_realloc_r+0x334>
  80138c:	2025883a 	mov	r18,r4
  801390:	080326c0 	call	80326c <__malloc_lock>
  801394:	98ffff17 	ldw	r3,-4(r19)
  801398:	01bfff04 	movi	r6,-4
  80139c:	890002c4 	addi	r4,r17,11
  8013a0:	01c00584 	movi	r7,22
  8013a4:	9d7ffe04 	addi	r21,r19,-8
  8013a8:	19a0703a 	and	r16,r3,r6
  8013ac:	39003f2e 	bgeu	r7,r4,8014ac <_realloc_r+0x158>
  8013b0:	053ffe04 	movi	r20,-8
  8013b4:	2528703a 	and	r20,r4,r20
  8013b8:	a00f883a 	mov	r7,r20
  8013bc:	a0008216 	blt	r20,zero,8015c8 <_realloc_r+0x274>
  8013c0:	a4408136 	bltu	r20,r17,8015c8 <_realloc_r+0x274>
  8013c4:	81c03c0e 	bge	r16,r7,8014b8 <_realloc_r+0x164>
  8013c8:	07002034 	movhi	fp,128
  8013cc:	e71ac604 	addi	fp,fp,27416
  8013d0:	e1000217 	ldw	r4,8(fp)
  8013d4:	ac05883a 	add	r2,r21,r16
  8013d8:	2080bf26 	beq	r4,r2,8016d8 <_realloc_r+0x384>
  8013dc:	11000117 	ldw	r4,4(r2)
  8013e0:	023fff84 	movi	r8,-2
  8013e4:	2210703a 	and	r8,r4,r8
  8013e8:	1211883a 	add	r8,r2,r8
  8013ec:	41400117 	ldw	r5,4(r8)
  8013f0:	2940004c 	andi	r5,r5,1
  8013f4:	28004a1e 	bne	r5,zero,801520 <_realloc_r+0x1cc>
  8013f8:	017fff04 	movi	r5,-4
  8013fc:	2148703a 	and	r4,r4,r5
  801400:	2409883a 	add	r4,r4,r16
  801404:	21c0ad0e 	bge	r4,r7,8016bc <_realloc_r+0x368>
  801408:	18c0004c 	andi	r3,r3,1
  80140c:	18007f1e 	bne	r3,zero,80160c <_realloc_r+0x2b8>
  801410:	9dfffe17 	ldw	r23,-8(r19)
  801414:	adefc83a 	sub	r23,r21,r23
  801418:	bd800117 	ldw	r22,4(r23)
  80141c:	b14a703a 	and	r5,r22,r5
  801420:	216d883a 	add	r22,r4,r5
  801424:	b1c04516 	blt	r22,r7,80153c <_realloc_r+0x1e8>
  801428:	10c00317 	ldw	r3,12(r2)
  80142c:	10800217 	ldw	r2,8(r2)
  801430:	81bfff04 	addi	r6,r16,-4
  801434:	bc400204 	addi	r17,r23,8
  801438:	10c00315 	stw	r3,12(r2)
  80143c:	18800215 	stw	r2,8(r3)
  801440:	b9400217 	ldw	r5,8(r23)
  801444:	b8c00317 	ldw	r3,12(r23)
  801448:	00800904 	movi	r2,36
  80144c:	28c00315 	stw	r3,12(r5)
  801450:	19400215 	stw	r5,8(r3)
  801454:	1180ef36 	bltu	r2,r6,801814 <_realloc_r+0x4c0>
  801458:	008004c4 	movi	r2,19
  80145c:	1180da2e 	bgeu	r2,r6,8017c8 <_realloc_r+0x474>
  801460:	98800017 	ldw	r2,0(r19)
  801464:	b8800215 	stw	r2,8(r23)
  801468:	98800117 	ldw	r2,4(r19)
  80146c:	b8800315 	stw	r2,12(r23)
  801470:	008006c4 	movi	r2,27
  801474:	1180fc2e 	bgeu	r2,r6,801868 <_realloc_r+0x514>
  801478:	98800217 	ldw	r2,8(r19)
  80147c:	b8800415 	stw	r2,16(r23)
  801480:	98800317 	ldw	r2,12(r19)
  801484:	b8800515 	stw	r2,20(r23)
  801488:	00800904 	movi	r2,36
  80148c:	3080421e 	bne	r6,r2,801598 <_realloc_r+0x244>
  801490:	98800417 	ldw	r2,16(r19)
  801494:	9cc00604 	addi	r19,r19,24
  801498:	b8c00804 	addi	r3,r23,32
  80149c:	b8800615 	stw	r2,24(r23)
  8014a0:	98bfff17 	ldw	r2,-4(r19)
  8014a4:	b8800715 	stw	r2,28(r23)
  8014a8:	00003d06 	br	8015a0 <_realloc_r+0x24c>
  8014ac:	01c00404 	movi	r7,16
  8014b0:	3829883a 	mov	r20,r7
  8014b4:	003fc206 	br	8013c0 <__reset+0xff8003c0>
  8014b8:	9823883a 	mov	r17,r19
  8014bc:	850fc83a 	sub	r7,r16,r20
  8014c0:	008003c4 	movi	r2,15
  8014c4:	18c0004c 	andi	r3,r3,1
  8014c8:	11c04336 	bltu	r2,r7,8015d8 <_realloc_r+0x284>
  8014cc:	1c06b03a 	or	r3,r3,r16
  8014d0:	a8c00115 	stw	r3,4(r21)
  8014d4:	ac21883a 	add	r16,r21,r16
  8014d8:	80c00117 	ldw	r3,4(r16)
  8014dc:	18c00054 	ori	r3,r3,1
  8014e0:	80c00115 	stw	r3,4(r16)
  8014e4:	9009883a 	mov	r4,r18
  8014e8:	080328c0 	call	80328c <__malloc_unlock>
  8014ec:	8805883a 	mov	r2,r17
  8014f0:	dfc00917 	ldw	ra,36(sp)
  8014f4:	df000817 	ldw	fp,32(sp)
  8014f8:	ddc00717 	ldw	r23,28(sp)
  8014fc:	dd800617 	ldw	r22,24(sp)
  801500:	dd400517 	ldw	r21,20(sp)
  801504:	dd000417 	ldw	r20,16(sp)
  801508:	dcc00317 	ldw	r19,12(sp)
  80150c:	dc800217 	ldw	r18,8(sp)
  801510:	dc400117 	ldw	r17,4(sp)
  801514:	dc000017 	ldw	r16,0(sp)
  801518:	dec00a04 	addi	sp,sp,40
  80151c:	f800283a 	ret
  801520:	18c0004c 	andi	r3,r3,1
  801524:	1800391e 	bne	r3,zero,80160c <_realloc_r+0x2b8>
  801528:	9dfffe17 	ldw	r23,-8(r19)
  80152c:	00bfff04 	movi	r2,-4
  801530:	adefc83a 	sub	r23,r21,r23
  801534:	b9400117 	ldw	r5,4(r23)
  801538:	288a703a 	and	r5,r5,r2
  80153c:	2c2d883a 	add	r22,r5,r16
  801540:	b1c03216 	blt	r22,r7,80160c <_realloc_r+0x2b8>
  801544:	b8800317 	ldw	r2,12(r23)
  801548:	b8c00217 	ldw	r3,8(r23)
  80154c:	81bfff04 	addi	r6,r16,-4
  801550:	01000904 	movi	r4,36
  801554:	18800315 	stw	r2,12(r3)
  801558:	10c00215 	stw	r3,8(r2)
  80155c:	bc400204 	addi	r17,r23,8
  801560:	2180ac36 	bltu	r4,r6,801814 <_realloc_r+0x4c0>
  801564:	008004c4 	movi	r2,19
  801568:	1180972e 	bgeu	r2,r6,8017c8 <_realloc_r+0x474>
  80156c:	98800017 	ldw	r2,0(r19)
  801570:	b8800215 	stw	r2,8(r23)
  801574:	98800117 	ldw	r2,4(r19)
  801578:	b8800315 	stw	r2,12(r23)
  80157c:	008006c4 	movi	r2,27
  801580:	1180b92e 	bgeu	r2,r6,801868 <_realloc_r+0x514>
  801584:	98800217 	ldw	r2,8(r19)
  801588:	b8800415 	stw	r2,16(r23)
  80158c:	98800317 	ldw	r2,12(r19)
  801590:	b8800515 	stw	r2,20(r23)
  801594:	313fbe26 	beq	r6,r4,801490 <__reset+0xff800490>
  801598:	b8c00604 	addi	r3,r23,24
  80159c:	9cc00404 	addi	r19,r19,16
  8015a0:	98800017 	ldw	r2,0(r19)
  8015a4:	b021883a 	mov	r16,r22
  8015a8:	b82b883a 	mov	r21,r23
  8015ac:	18800015 	stw	r2,0(r3)
  8015b0:	98800117 	ldw	r2,4(r19)
  8015b4:	18800115 	stw	r2,4(r3)
  8015b8:	98800217 	ldw	r2,8(r19)
  8015bc:	18800215 	stw	r2,8(r3)
  8015c0:	b8c00117 	ldw	r3,4(r23)
  8015c4:	003fbd06 	br	8014bc <__reset+0xff8004bc>
  8015c8:	00800304 	movi	r2,12
  8015cc:	90800015 	stw	r2,0(r18)
  8015d0:	0005883a 	mov	r2,zero
  8015d4:	003fc606 	br	8014f0 <__reset+0xff8004f0>
  8015d8:	1d06b03a 	or	r3,r3,r20
  8015dc:	ad0b883a 	add	r5,r21,r20
  8015e0:	a8c00115 	stw	r3,4(r21)
  8015e4:	38800054 	ori	r2,r7,1
  8015e8:	28800115 	stw	r2,4(r5)
  8015ec:	29cf883a 	add	r7,r5,r7
  8015f0:	38800117 	ldw	r2,4(r7)
  8015f4:	9009883a 	mov	r4,r18
  8015f8:	29400204 	addi	r5,r5,8
  8015fc:	10800054 	ori	r2,r2,1
  801600:	38800115 	stw	r2,4(r7)
  801604:	08021a80 	call	8021a8 <_free_r>
  801608:	003fb606 	br	8014e4 <__reset+0xff8004e4>
  80160c:	880b883a 	mov	r5,r17
  801610:	9009883a 	mov	r4,r18
  801614:	08008300 	call	800830 <_malloc_r>
  801618:	1023883a 	mov	r17,r2
  80161c:	1000aa26 	beq	r2,zero,8018c8 <_realloc_r+0x574>
  801620:	98ffff17 	ldw	r3,-4(r19)
  801624:	113ffe04 	addi	r4,r2,-8
  801628:	00bfff84 	movi	r2,-2
  80162c:	1884703a 	and	r2,r3,r2
  801630:	a885883a 	add	r2,r21,r2
  801634:	20808626 	beq	r4,r2,801850 <_realloc_r+0x4fc>
  801638:	81bfff04 	addi	r6,r16,-4
  80163c:	00800904 	movi	r2,36
  801640:	11807036 	bltu	r2,r6,801804 <_realloc_r+0x4b0>
  801644:	00c004c4 	movi	r3,19
  801648:	19805636 	bltu	r3,r6,8017a4 <_realloc_r+0x450>
  80164c:	8805883a 	mov	r2,r17
  801650:	9807883a 	mov	r3,r19
  801654:	19000017 	ldw	r4,0(r3)
  801658:	11000015 	stw	r4,0(r2)
  80165c:	19000117 	ldw	r4,4(r3)
  801660:	11000115 	stw	r4,4(r2)
  801664:	18c00217 	ldw	r3,8(r3)
  801668:	10c00215 	stw	r3,8(r2)
  80166c:	980b883a 	mov	r5,r19
  801670:	9009883a 	mov	r4,r18
  801674:	08021a80 	call	8021a8 <_free_r>
  801678:	9009883a 	mov	r4,r18
  80167c:	080328c0 	call	80328c <__malloc_unlock>
  801680:	8805883a 	mov	r2,r17
  801684:	003f9a06 	br	8014f0 <__reset+0xff8004f0>
  801688:	300b883a 	mov	r5,r6
  80168c:	dfc00917 	ldw	ra,36(sp)
  801690:	df000817 	ldw	fp,32(sp)
  801694:	ddc00717 	ldw	r23,28(sp)
  801698:	dd800617 	ldw	r22,24(sp)
  80169c:	dd400517 	ldw	r21,20(sp)
  8016a0:	dd000417 	ldw	r20,16(sp)
  8016a4:	dcc00317 	ldw	r19,12(sp)
  8016a8:	dc800217 	ldw	r18,8(sp)
  8016ac:	dc400117 	ldw	r17,4(sp)
  8016b0:	dc000017 	ldw	r16,0(sp)
  8016b4:	dec00a04 	addi	sp,sp,40
  8016b8:	08008301 	jmpi	800830 <_malloc_r>
  8016bc:	11400317 	ldw	r5,12(r2)
  8016c0:	10800217 	ldw	r2,8(r2)
  8016c4:	9823883a 	mov	r17,r19
  8016c8:	2021883a 	mov	r16,r4
  8016cc:	11400315 	stw	r5,12(r2)
  8016d0:	28800215 	stw	r2,8(r5)
  8016d4:	003f7906 	br	8014bc <__reset+0xff8004bc>
  8016d8:	21000117 	ldw	r4,4(r4)
  8016dc:	00bfff04 	movi	r2,-4
  8016e0:	a1800404 	addi	r6,r20,16
  8016e4:	2088703a 	and	r4,r4,r2
  8016e8:	2409883a 	add	r4,r4,r16
  8016ec:	2180380e 	bge	r4,r6,8017d0 <_realloc_r+0x47c>
  8016f0:	18c0004c 	andi	r3,r3,1
  8016f4:	183fc51e 	bne	r3,zero,80160c <__reset+0xff80060c>
  8016f8:	9dfffe17 	ldw	r23,-8(r19)
  8016fc:	adefc83a 	sub	r23,r21,r23
  801700:	b9400117 	ldw	r5,4(r23)
  801704:	288a703a 	and	r5,r5,r2
  801708:	216d883a 	add	r22,r4,r5
  80170c:	b1bf8b16 	blt	r22,r6,80153c <__reset+0xff80053c>
  801710:	b8800317 	ldw	r2,12(r23)
  801714:	b8c00217 	ldw	r3,8(r23)
  801718:	81bfff04 	addi	r6,r16,-4
  80171c:	01000904 	movi	r4,36
  801720:	18800315 	stw	r2,12(r3)
  801724:	10c00215 	stw	r3,8(r2)
  801728:	bc400204 	addi	r17,r23,8
  80172c:	21805a36 	bltu	r4,r6,801898 <_realloc_r+0x544>
  801730:	008004c4 	movi	r2,19
  801734:	1180562e 	bgeu	r2,r6,801890 <_realloc_r+0x53c>
  801738:	98800017 	ldw	r2,0(r19)
  80173c:	b8800215 	stw	r2,8(r23)
  801740:	98800117 	ldw	r2,4(r19)
  801744:	b8800315 	stw	r2,12(r23)
  801748:	008006c4 	movi	r2,27
  80174c:	11805636 	bltu	r2,r6,8018a8 <_realloc_r+0x554>
  801750:	b8800404 	addi	r2,r23,16
  801754:	9cc00204 	addi	r19,r19,8
  801758:	98c00017 	ldw	r3,0(r19)
  80175c:	10c00015 	stw	r3,0(r2)
  801760:	98c00117 	ldw	r3,4(r19)
  801764:	10c00115 	stw	r3,4(r2)
  801768:	98c00217 	ldw	r3,8(r19)
  80176c:	10c00215 	stw	r3,8(r2)
  801770:	bd07883a 	add	r3,r23,r20
  801774:	b505c83a 	sub	r2,r22,r20
  801778:	e0c00215 	stw	r3,8(fp)
  80177c:	10800054 	ori	r2,r2,1
  801780:	18800115 	stw	r2,4(r3)
  801784:	b8800117 	ldw	r2,4(r23)
  801788:	9009883a 	mov	r4,r18
  80178c:	1080004c 	andi	r2,r2,1
  801790:	a0a8b03a 	or	r20,r20,r2
  801794:	bd000115 	stw	r20,4(r23)
  801798:	080328c0 	call	80328c <__malloc_unlock>
  80179c:	8805883a 	mov	r2,r17
  8017a0:	003f5306 	br	8014f0 <__reset+0xff8004f0>
  8017a4:	98c00017 	ldw	r3,0(r19)
  8017a8:	88c00015 	stw	r3,0(r17)
  8017ac:	98c00117 	ldw	r3,4(r19)
  8017b0:	88c00115 	stw	r3,4(r17)
  8017b4:	00c006c4 	movi	r3,27
  8017b8:	19801d36 	bltu	r3,r6,801830 <_realloc_r+0x4dc>
  8017bc:	88800204 	addi	r2,r17,8
  8017c0:	98c00204 	addi	r3,r19,8
  8017c4:	003fa306 	br	801654 <__reset+0xff800654>
  8017c8:	8807883a 	mov	r3,r17
  8017cc:	003f7406 	br	8015a0 <__reset+0xff8005a0>
  8017d0:	ad2b883a 	add	r21,r21,r20
  8017d4:	2505c83a 	sub	r2,r4,r20
  8017d8:	e5400215 	stw	r21,8(fp)
  8017dc:	10800054 	ori	r2,r2,1
  8017e0:	a8800115 	stw	r2,4(r21)
  8017e4:	98bfff17 	ldw	r2,-4(r19)
  8017e8:	9009883a 	mov	r4,r18
  8017ec:	1080004c 	andi	r2,r2,1
  8017f0:	a0a8b03a 	or	r20,r20,r2
  8017f4:	9d3fff15 	stw	r20,-4(r19)
  8017f8:	080328c0 	call	80328c <__malloc_unlock>
  8017fc:	9805883a 	mov	r2,r19
  801800:	003f3b06 	br	8014f0 <__reset+0xff8004f0>
  801804:	8809883a 	mov	r4,r17
  801808:	980b883a 	mov	r5,r19
  80180c:	08011f80 	call	8011f8 <memmove>
  801810:	003f9606 	br	80166c <__reset+0xff80066c>
  801814:	8809883a 	mov	r4,r17
  801818:	980b883a 	mov	r5,r19
  80181c:	08011f80 	call	8011f8 <memmove>
  801820:	b8c00117 	ldw	r3,4(r23)
  801824:	b021883a 	mov	r16,r22
  801828:	b82b883a 	mov	r21,r23
  80182c:	003f2306 	br	8014bc <__reset+0xff8004bc>
  801830:	98c00217 	ldw	r3,8(r19)
  801834:	88c00215 	stw	r3,8(r17)
  801838:	98c00317 	ldw	r3,12(r19)
  80183c:	88c00315 	stw	r3,12(r17)
  801840:	30800c26 	beq	r6,r2,801874 <_realloc_r+0x520>
  801844:	88800404 	addi	r2,r17,16
  801848:	98c00404 	addi	r3,r19,16
  80184c:	003f8106 	br	801654 <__reset+0xff800654>
  801850:	893fff17 	ldw	r4,-4(r17)
  801854:	00bfff04 	movi	r2,-4
  801858:	9823883a 	mov	r17,r19
  80185c:	2084703a 	and	r2,r4,r2
  801860:	80a1883a 	add	r16,r16,r2
  801864:	003f1506 	br	8014bc <__reset+0xff8004bc>
  801868:	b8c00404 	addi	r3,r23,16
  80186c:	9cc00204 	addi	r19,r19,8
  801870:	003f4b06 	br	8015a0 <__reset+0xff8005a0>
  801874:	99000417 	ldw	r4,16(r19)
  801878:	88800604 	addi	r2,r17,24
  80187c:	98c00604 	addi	r3,r19,24
  801880:	89000415 	stw	r4,16(r17)
  801884:	99000517 	ldw	r4,20(r19)
  801888:	89000515 	stw	r4,20(r17)
  80188c:	003f7106 	br	801654 <__reset+0xff800654>
  801890:	8805883a 	mov	r2,r17
  801894:	003fb006 	br	801758 <__reset+0xff800758>
  801898:	8809883a 	mov	r4,r17
  80189c:	980b883a 	mov	r5,r19
  8018a0:	08011f80 	call	8011f8 <memmove>
  8018a4:	003fb206 	br	801770 <__reset+0xff800770>
  8018a8:	98800217 	ldw	r2,8(r19)
  8018ac:	b8800415 	stw	r2,16(r23)
  8018b0:	98800317 	ldw	r2,12(r19)
  8018b4:	b8800515 	stw	r2,20(r23)
  8018b8:	31000726 	beq	r6,r4,8018d8 <_realloc_r+0x584>
  8018bc:	b8800604 	addi	r2,r23,24
  8018c0:	9cc00404 	addi	r19,r19,16
  8018c4:	003fa406 	br	801758 <__reset+0xff800758>
  8018c8:	9009883a 	mov	r4,r18
  8018cc:	080328c0 	call	80328c <__malloc_unlock>
  8018d0:	0005883a 	mov	r2,zero
  8018d4:	003f0606 	br	8014f0 <__reset+0xff8004f0>
  8018d8:	98c00417 	ldw	r3,16(r19)
  8018dc:	9cc00604 	addi	r19,r19,24
  8018e0:	b8800804 	addi	r2,r23,32
  8018e4:	b8c00615 	stw	r3,24(r23)
  8018e8:	98ffff17 	ldw	r3,-4(r19)
  8018ec:	b8c00715 	stw	r3,28(r23)
  8018f0:	003f9906 	br	801758 <__reset+0xff800758>

008018f4 <_sbrk_r>:
  8018f4:	defffd04 	addi	sp,sp,-12
  8018f8:	dc000015 	stw	r16,0(sp)
  8018fc:	04002074 	movhi	r16,129
  801900:	dc400115 	stw	r17,4(sp)
  801904:	84209004 	addi	r16,r16,-32192
  801908:	2023883a 	mov	r17,r4
  80190c:	2809883a 	mov	r4,r5
  801910:	dfc00215 	stw	ra,8(sp)
  801914:	80000015 	stw	zero,0(r16)
  801918:	08034800 	call	803480 <sbrk>
  80191c:	00ffffc4 	movi	r3,-1
  801920:	10c00526 	beq	r2,r3,801938 <_sbrk_r+0x44>
  801924:	dfc00217 	ldw	ra,8(sp)
  801928:	dc400117 	ldw	r17,4(sp)
  80192c:	dc000017 	ldw	r16,0(sp)
  801930:	dec00304 	addi	sp,sp,12
  801934:	f800283a 	ret
  801938:	80c00017 	ldw	r3,0(r16)
  80193c:	183ff926 	beq	r3,zero,801924 <__reset+0xff800924>
  801940:	88c00015 	stw	r3,0(r17)
  801944:	003ff706 	br	801924 <__reset+0xff800924>

00801948 <__swsetup_r>:
  801948:	00802074 	movhi	r2,129
  80194c:	defffd04 	addi	sp,sp,-12
  801950:	10a07e04 	addi	r2,r2,-32264
  801954:	dc400115 	stw	r17,4(sp)
  801958:	2023883a 	mov	r17,r4
  80195c:	11000017 	ldw	r4,0(r2)
  801960:	dc000015 	stw	r16,0(sp)
  801964:	dfc00215 	stw	ra,8(sp)
  801968:	2821883a 	mov	r16,r5
  80196c:	20000226 	beq	r4,zero,801978 <__swsetup_r+0x30>
  801970:	20c00e17 	ldw	r3,56(r4)
  801974:	18002e26 	beq	r3,zero,801a30 <__swsetup_r+0xe8>
  801978:	8080030b 	ldhu	r2,12(r16)
  80197c:	10c0020c 	andi	r3,r2,8
  801980:	100d883a 	mov	r6,r2
  801984:	18000f26 	beq	r3,zero,8019c4 <__swsetup_r+0x7c>
  801988:	80c00417 	ldw	r3,16(r16)
  80198c:	18001526 	beq	r3,zero,8019e4 <__swsetup_r+0x9c>
  801990:	1100004c 	andi	r4,r2,1
  801994:	20001c1e 	bne	r4,zero,801a08 <__swsetup_r+0xc0>
  801998:	1080008c 	andi	r2,r2,2
  80199c:	1000261e 	bne	r2,zero,801a38 <__swsetup_r+0xf0>
  8019a0:	80800517 	ldw	r2,20(r16)
  8019a4:	80800215 	stw	r2,8(r16)
  8019a8:	18001c26 	beq	r3,zero,801a1c <__swsetup_r+0xd4>
  8019ac:	0005883a 	mov	r2,zero
  8019b0:	dfc00217 	ldw	ra,8(sp)
  8019b4:	dc400117 	ldw	r17,4(sp)
  8019b8:	dc000017 	ldw	r16,0(sp)
  8019bc:	dec00304 	addi	sp,sp,12
  8019c0:	f800283a 	ret
  8019c4:	3080040c 	andi	r2,r6,16
  8019c8:	10001726 	beq	r2,zero,801a28 <__swsetup_r+0xe0>
  8019cc:	3080010c 	andi	r2,r6,4
  8019d0:	10001b1e 	bne	r2,zero,801a40 <__swsetup_r+0xf8>
  8019d4:	80c00417 	ldw	r3,16(r16)
  8019d8:	30800214 	ori	r2,r6,8
  8019dc:	8080030d 	sth	r2,12(r16)
  8019e0:	183feb1e 	bne	r3,zero,801990 <__reset+0xff800990>
  8019e4:	1140a00c 	andi	r5,r2,640
  8019e8:	01008004 	movi	r4,512
  8019ec:	293fe826 	beq	r5,r4,801990 <__reset+0xff800990>
  8019f0:	8809883a 	mov	r4,r17
  8019f4:	800b883a 	mov	r5,r16
  8019f8:	08026080 	call	802608 <__smakebuf_r>
  8019fc:	8080030b 	ldhu	r2,12(r16)
  801a00:	80c00417 	ldw	r3,16(r16)
  801a04:	003fe206 	br	801990 <__reset+0xff800990>
  801a08:	80800517 	ldw	r2,20(r16)
  801a0c:	80000215 	stw	zero,8(r16)
  801a10:	0085c83a 	sub	r2,zero,r2
  801a14:	80800615 	stw	r2,24(r16)
  801a18:	183fe41e 	bne	r3,zero,8019ac <__reset+0xff8009ac>
  801a1c:	8080030b 	ldhu	r2,12(r16)
  801a20:	1080200c 	andi	r2,r2,128
  801a24:	103fe226 	beq	r2,zero,8019b0 <__reset+0xff8009b0>
  801a28:	00bfffc4 	movi	r2,-1
  801a2c:	003fe006 	br	8019b0 <__reset+0xff8009b0>
  801a30:	08020340 	call	802034 <__sinit>
  801a34:	003fd006 	br	801978 <__reset+0xff800978>
  801a38:	0005883a 	mov	r2,zero
  801a3c:	003fd906 	br	8019a4 <__reset+0xff8009a4>
  801a40:	81400c17 	ldw	r5,48(r16)
  801a44:	28000626 	beq	r5,zero,801a60 <__swsetup_r+0x118>
  801a48:	80801004 	addi	r2,r16,64
  801a4c:	28800326 	beq	r5,r2,801a5c <__swsetup_r+0x114>
  801a50:	8809883a 	mov	r4,r17
  801a54:	08021a80 	call	8021a8 <_free_r>
  801a58:	8180030b 	ldhu	r6,12(r16)
  801a5c:	80000c15 	stw	zero,48(r16)
  801a60:	80c00417 	ldw	r3,16(r16)
  801a64:	00bff6c4 	movi	r2,-37
  801a68:	118c703a 	and	r6,r2,r6
  801a6c:	80000115 	stw	zero,4(r16)
  801a70:	80c00015 	stw	r3,0(r16)
  801a74:	003fd806 	br	8019d8 <__reset+0xff8009d8>

00801a78 <_fflush_r>:
  801a78:	defffb04 	addi	sp,sp,-20
  801a7c:	dcc00315 	stw	r19,12(sp)
  801a80:	dc000015 	stw	r16,0(sp)
  801a84:	dfc00415 	stw	ra,16(sp)
  801a88:	dc800215 	stw	r18,8(sp)
  801a8c:	dc400115 	stw	r17,4(sp)
  801a90:	2027883a 	mov	r19,r4
  801a94:	2821883a 	mov	r16,r5
  801a98:	20000226 	beq	r4,zero,801aa4 <_fflush_r+0x2c>
  801a9c:	20800e17 	ldw	r2,56(r4)
  801aa0:	10005326 	beq	r2,zero,801bf0 <_fflush_r+0x178>
  801aa4:	8080030b 	ldhu	r2,12(r16)
  801aa8:	10ffffcc 	andi	r3,r2,65535
  801aac:	18e0001c 	xori	r3,r3,32768
  801ab0:	18e00004 	addi	r3,r3,-32768
  801ab4:	18002c26 	beq	r3,zero,801b68 <_fflush_r+0xf0>
  801ab8:	10c0020c 	andi	r3,r2,8
  801abc:	1800321e 	bne	r3,zero,801b88 <_fflush_r+0x110>
  801ac0:	80c00117 	ldw	r3,4(r16)
  801ac4:	10820014 	ori	r2,r2,2048
  801ac8:	8080030d 	sth	r2,12(r16)
  801acc:	00c0570e 	bge	zero,r3,801c2c <_fflush_r+0x1b4>
  801ad0:	82000a17 	ldw	r8,40(r16)
  801ad4:	40002426 	beq	r8,zero,801b68 <_fflush_r+0xf0>
  801ad8:	9c400017 	ldw	r17,0(r19)
  801adc:	10c4000c 	andi	r3,r2,4096
  801ae0:	98000015 	stw	zero,0(r19)
  801ae4:	18004626 	beq	r3,zero,801c00 <_fflush_r+0x188>
  801ae8:	81801417 	ldw	r6,80(r16)
  801aec:	10c0010c 	andi	r3,r2,4
  801af0:	18000626 	beq	r3,zero,801b0c <_fflush_r+0x94>
  801af4:	80c00117 	ldw	r3,4(r16)
  801af8:	80800c17 	ldw	r2,48(r16)
  801afc:	30cdc83a 	sub	r6,r6,r3
  801b00:	10000226 	beq	r2,zero,801b0c <_fflush_r+0x94>
  801b04:	80800f17 	ldw	r2,60(r16)
  801b08:	308dc83a 	sub	r6,r6,r2
  801b0c:	81400717 	ldw	r5,28(r16)
  801b10:	9809883a 	mov	r4,r19
  801b14:	000f883a 	mov	r7,zero
  801b18:	403ee83a 	callr	r8
  801b1c:	00ffffc4 	movi	r3,-1
  801b20:	10c04526 	beq	r2,r3,801c38 <_fflush_r+0x1c0>
  801b24:	80c0030b 	ldhu	r3,12(r16)
  801b28:	81000417 	ldw	r4,16(r16)
  801b2c:	80000115 	stw	zero,4(r16)
  801b30:	197dffcc 	andi	r5,r3,63487
  801b34:	8140030d 	sth	r5,12(r16)
  801b38:	81000015 	stw	r4,0(r16)
  801b3c:	18c4000c 	andi	r3,r3,4096
  801b40:	18000126 	beq	r3,zero,801b48 <_fflush_r+0xd0>
  801b44:	80801415 	stw	r2,80(r16)
  801b48:	81400c17 	ldw	r5,48(r16)
  801b4c:	9c400015 	stw	r17,0(r19)
  801b50:	28000526 	beq	r5,zero,801b68 <_fflush_r+0xf0>
  801b54:	80801004 	addi	r2,r16,64
  801b58:	28800226 	beq	r5,r2,801b64 <_fflush_r+0xec>
  801b5c:	9809883a 	mov	r4,r19
  801b60:	08021a80 	call	8021a8 <_free_r>
  801b64:	80000c15 	stw	zero,48(r16)
  801b68:	0005883a 	mov	r2,zero
  801b6c:	dfc00417 	ldw	ra,16(sp)
  801b70:	dcc00317 	ldw	r19,12(sp)
  801b74:	dc800217 	ldw	r18,8(sp)
  801b78:	dc400117 	ldw	r17,4(sp)
  801b7c:	dc000017 	ldw	r16,0(sp)
  801b80:	dec00504 	addi	sp,sp,20
  801b84:	f800283a 	ret
  801b88:	84800417 	ldw	r18,16(r16)
  801b8c:	903ff626 	beq	r18,zero,801b68 <__reset+0xff800b68>
  801b90:	84400017 	ldw	r17,0(r16)
  801b94:	108000cc 	andi	r2,r2,3
  801b98:	84800015 	stw	r18,0(r16)
  801b9c:	8ca3c83a 	sub	r17,r17,r18
  801ba0:	10001526 	beq	r2,zero,801bf8 <_fflush_r+0x180>
  801ba4:	0005883a 	mov	r2,zero
  801ba8:	80800215 	stw	r2,8(r16)
  801bac:	04400316 	blt	zero,r17,801bbc <_fflush_r+0x144>
  801bb0:	003fed06 	br	801b68 <__reset+0xff800b68>
  801bb4:	90a5883a 	add	r18,r18,r2
  801bb8:	047feb0e 	bge	zero,r17,801b68 <__reset+0xff800b68>
  801bbc:	80800917 	ldw	r2,36(r16)
  801bc0:	81400717 	ldw	r5,28(r16)
  801bc4:	880f883a 	mov	r7,r17
  801bc8:	900d883a 	mov	r6,r18
  801bcc:	9809883a 	mov	r4,r19
  801bd0:	103ee83a 	callr	r2
  801bd4:	88a3c83a 	sub	r17,r17,r2
  801bd8:	00bff616 	blt	zero,r2,801bb4 <__reset+0xff800bb4>
  801bdc:	80c0030b 	ldhu	r3,12(r16)
  801be0:	00bfffc4 	movi	r2,-1
  801be4:	18c01014 	ori	r3,r3,64
  801be8:	80c0030d 	sth	r3,12(r16)
  801bec:	003fdf06 	br	801b6c <__reset+0xff800b6c>
  801bf0:	08020340 	call	802034 <__sinit>
  801bf4:	003fab06 	br	801aa4 <__reset+0xff800aa4>
  801bf8:	80800517 	ldw	r2,20(r16)
  801bfc:	003fea06 	br	801ba8 <__reset+0xff800ba8>
  801c00:	81400717 	ldw	r5,28(r16)
  801c04:	000d883a 	mov	r6,zero
  801c08:	9809883a 	mov	r4,r19
  801c0c:	01c00044 	movi	r7,1
  801c10:	403ee83a 	callr	r8
  801c14:	100d883a 	mov	r6,r2
  801c18:	00bfffc4 	movi	r2,-1
  801c1c:	30801326 	beq	r6,r2,801c6c <_fflush_r+0x1f4>
  801c20:	8080030b 	ldhu	r2,12(r16)
  801c24:	82000a17 	ldw	r8,40(r16)
  801c28:	003fb006 	br	801aec <__reset+0xff800aec>
  801c2c:	80c00f17 	ldw	r3,60(r16)
  801c30:	00ffa716 	blt	zero,r3,801ad0 <__reset+0xff800ad0>
  801c34:	003fcc06 	br	801b68 <__reset+0xff800b68>
  801c38:	98c00017 	ldw	r3,0(r19)
  801c3c:	183fb926 	beq	r3,zero,801b24 <__reset+0xff800b24>
  801c40:	01000744 	movi	r4,29
  801c44:	19000226 	beq	r3,r4,801c50 <_fflush_r+0x1d8>
  801c48:	01000584 	movi	r4,22
  801c4c:	1900101e 	bne	r3,r4,801c90 <_fflush_r+0x218>
  801c50:	8080030b 	ldhu	r2,12(r16)
  801c54:	80c00417 	ldw	r3,16(r16)
  801c58:	80000115 	stw	zero,4(r16)
  801c5c:	10bdffcc 	andi	r2,r2,63487
  801c60:	8080030d 	sth	r2,12(r16)
  801c64:	80c00015 	stw	r3,0(r16)
  801c68:	003fb706 	br	801b48 <__reset+0xff800b48>
  801c6c:	98800017 	ldw	r2,0(r19)
  801c70:	103feb26 	beq	r2,zero,801c20 <__reset+0xff800c20>
  801c74:	00c00744 	movi	r3,29
  801c78:	10c00226 	beq	r2,r3,801c84 <_fflush_r+0x20c>
  801c7c:	00c00584 	movi	r3,22
  801c80:	10ffd61e 	bne	r2,r3,801bdc <__reset+0xff800bdc>
  801c84:	9c400015 	stw	r17,0(r19)
  801c88:	0005883a 	mov	r2,zero
  801c8c:	003fb706 	br	801b6c <__reset+0xff800b6c>
  801c90:	80c0030b 	ldhu	r3,12(r16)
  801c94:	18c01014 	ori	r3,r3,64
  801c98:	80c0030d 	sth	r3,12(r16)
  801c9c:	003fb306 	br	801b6c <__reset+0xff800b6c>

00801ca0 <fflush>:
  801ca0:	20000526 	beq	r4,zero,801cb8 <fflush+0x18>
  801ca4:	00802074 	movhi	r2,129
  801ca8:	10a07e04 	addi	r2,r2,-32264
  801cac:	200b883a 	mov	r5,r4
  801cb0:	11000017 	ldw	r4,0(r2)
  801cb4:	0801a781 	jmpi	801a78 <_fflush_r>
  801cb8:	00802074 	movhi	r2,129
  801cbc:	10a07d04 	addi	r2,r2,-32268
  801cc0:	11000017 	ldw	r4,0(r2)
  801cc4:	01402034 	movhi	r5,128
  801cc8:	29469e04 	addi	r5,r5,6776
  801ccc:	08025501 	jmpi	802550 <_fwalk_reent>

00801cd0 <__fp_lock>:
  801cd0:	0005883a 	mov	r2,zero
  801cd4:	f800283a 	ret

00801cd8 <__fp_unlock>:
  801cd8:	0005883a 	mov	r2,zero
  801cdc:	f800283a 	ret

00801ce0 <_cleanup_r>:
  801ce0:	01402034 	movhi	r5,128
  801ce4:	294af404 	addi	r5,r5,11216
  801ce8:	08024981 	jmpi	802498 <_fwalk>

00801cec <__sinit.part.1>:
  801cec:	defff604 	addi	sp,sp,-40
  801cf0:	00c02034 	movhi	r3,128
  801cf4:	dfc00915 	stw	ra,36(sp)
  801cf8:	df000815 	stw	fp,32(sp)
  801cfc:	ddc00715 	stw	r23,28(sp)
  801d00:	dd800615 	stw	r22,24(sp)
  801d04:	dd400515 	stw	r21,20(sp)
  801d08:	dd000415 	stw	r20,16(sp)
  801d0c:	dcc00315 	stw	r19,12(sp)
  801d10:	dc800215 	stw	r18,8(sp)
  801d14:	dc400115 	stw	r17,4(sp)
  801d18:	dc000015 	stw	r16,0(sp)
  801d1c:	18c73804 	addi	r3,r3,7392
  801d20:	24000117 	ldw	r16,4(r4)
  801d24:	20c00f15 	stw	r3,60(r4)
  801d28:	07000044 	movi	fp,1
  801d2c:	00c000c4 	movi	r3,3
  801d30:	2080bb04 	addi	r2,r4,748
  801d34:	20c0b915 	stw	r3,740(r4)
  801d38:	27000e15 	stw	fp,56(r4)
  801d3c:	2080ba15 	stw	r2,744(r4)
  801d40:	2000b815 	stw	zero,736(r4)
  801d44:	05c00204 	movi	r23,8
  801d48:	00800104 	movi	r2,4
  801d4c:	2025883a 	mov	r18,r4
  801d50:	b80d883a 	mov	r6,r23
  801d54:	81001704 	addi	r4,r16,92
  801d58:	000b883a 	mov	r5,zero
  801d5c:	80000015 	stw	zero,0(r16)
  801d60:	80000115 	stw	zero,4(r16)
  801d64:	80000215 	stw	zero,8(r16)
  801d68:	8080030d 	sth	r2,12(r16)
  801d6c:	80001915 	stw	zero,100(r16)
  801d70:	8000038d 	sth	zero,14(r16)
  801d74:	80000415 	stw	zero,16(r16)
  801d78:	80000515 	stw	zero,20(r16)
  801d7c:	80000615 	stw	zero,24(r16)
  801d80:	08027c00 	call	8027c0 <memset>
  801d84:	05802034 	movhi	r22,128
  801d88:	94400217 	ldw	r17,8(r18)
  801d8c:	05402034 	movhi	r21,128
  801d90:	05002034 	movhi	r20,128
  801d94:	04c02034 	movhi	r19,128
  801d98:	b58a3904 	addi	r22,r22,10468
  801d9c:	ad4a5004 	addi	r21,r21,10560
  801da0:	a50a6f04 	addi	r20,r20,10684
  801da4:	9cca8604 	addi	r19,r19,10776
  801da8:	85800815 	stw	r22,32(r16)
  801dac:	85400915 	stw	r21,36(r16)
  801db0:	85000a15 	stw	r20,40(r16)
  801db4:	84c00b15 	stw	r19,44(r16)
  801db8:	84000715 	stw	r16,28(r16)
  801dbc:	00800284 	movi	r2,10
  801dc0:	89001704 	addi	r4,r17,92
  801dc4:	b80d883a 	mov	r6,r23
  801dc8:	000b883a 	mov	r5,zero
  801dcc:	88000015 	stw	zero,0(r17)
  801dd0:	88000115 	stw	zero,4(r17)
  801dd4:	88000215 	stw	zero,8(r17)
  801dd8:	8880030d 	sth	r2,12(r17)
  801ddc:	88001915 	stw	zero,100(r17)
  801de0:	8f00038d 	sth	fp,14(r17)
  801de4:	88000415 	stw	zero,16(r17)
  801de8:	88000515 	stw	zero,20(r17)
  801dec:	88000615 	stw	zero,24(r17)
  801df0:	08027c00 	call	8027c0 <memset>
  801df4:	94000317 	ldw	r16,12(r18)
  801df8:	00800484 	movi	r2,18
  801dfc:	8c400715 	stw	r17,28(r17)
  801e00:	8d800815 	stw	r22,32(r17)
  801e04:	8d400915 	stw	r21,36(r17)
  801e08:	8d000a15 	stw	r20,40(r17)
  801e0c:	8cc00b15 	stw	r19,44(r17)
  801e10:	8080030d 	sth	r2,12(r16)
  801e14:	00800084 	movi	r2,2
  801e18:	80000015 	stw	zero,0(r16)
  801e1c:	80000115 	stw	zero,4(r16)
  801e20:	80000215 	stw	zero,8(r16)
  801e24:	80001915 	stw	zero,100(r16)
  801e28:	8080038d 	sth	r2,14(r16)
  801e2c:	80000415 	stw	zero,16(r16)
  801e30:	80000515 	stw	zero,20(r16)
  801e34:	80000615 	stw	zero,24(r16)
  801e38:	81001704 	addi	r4,r16,92
  801e3c:	000b883a 	mov	r5,zero
  801e40:	b80d883a 	mov	r6,r23
  801e44:	08027c00 	call	8027c0 <memset>
  801e48:	84000715 	stw	r16,28(r16)
  801e4c:	85800815 	stw	r22,32(r16)
  801e50:	85400915 	stw	r21,36(r16)
  801e54:	85000a15 	stw	r20,40(r16)
  801e58:	84c00b15 	stw	r19,44(r16)
  801e5c:	dfc00917 	ldw	ra,36(sp)
  801e60:	df000817 	ldw	fp,32(sp)
  801e64:	ddc00717 	ldw	r23,28(sp)
  801e68:	dd800617 	ldw	r22,24(sp)
  801e6c:	dd400517 	ldw	r21,20(sp)
  801e70:	dd000417 	ldw	r20,16(sp)
  801e74:	dcc00317 	ldw	r19,12(sp)
  801e78:	dc800217 	ldw	r18,8(sp)
  801e7c:	dc400117 	ldw	r17,4(sp)
  801e80:	dc000017 	ldw	r16,0(sp)
  801e84:	dec00a04 	addi	sp,sp,40
  801e88:	f800283a 	ret

00801e8c <__sfmoreglue>:
  801e8c:	defffc04 	addi	sp,sp,-16
  801e90:	dc800215 	stw	r18,8(sp)
  801e94:	2825883a 	mov	r18,r5
  801e98:	dc000015 	stw	r16,0(sp)
  801e9c:	01401a04 	movi	r5,104
  801ea0:	2021883a 	mov	r16,r4
  801ea4:	9009883a 	mov	r4,r18
  801ea8:	dfc00315 	stw	ra,12(sp)
  801eac:	dc400115 	stw	r17,4(sp)
  801eb0:	0802d480 	call	802d48 <__mulsi3>
  801eb4:	8009883a 	mov	r4,r16
  801eb8:	11400304 	addi	r5,r2,12
  801ebc:	1023883a 	mov	r17,r2
  801ec0:	08008300 	call	800830 <_malloc_r>
  801ec4:	1021883a 	mov	r16,r2
  801ec8:	10000726 	beq	r2,zero,801ee8 <__sfmoreglue+0x5c>
  801ecc:	11000304 	addi	r4,r2,12
  801ed0:	10000015 	stw	zero,0(r2)
  801ed4:	14800115 	stw	r18,4(r2)
  801ed8:	11000215 	stw	r4,8(r2)
  801edc:	000b883a 	mov	r5,zero
  801ee0:	880d883a 	mov	r6,r17
  801ee4:	08027c00 	call	8027c0 <memset>
  801ee8:	8005883a 	mov	r2,r16
  801eec:	dfc00317 	ldw	ra,12(sp)
  801ef0:	dc800217 	ldw	r18,8(sp)
  801ef4:	dc400117 	ldw	r17,4(sp)
  801ef8:	dc000017 	ldw	r16,0(sp)
  801efc:	dec00404 	addi	sp,sp,16
  801f00:	f800283a 	ret

00801f04 <__sfp>:
  801f04:	00802074 	movhi	r2,129
  801f08:	defffb04 	addi	sp,sp,-20
  801f0c:	10a07d04 	addi	r2,r2,-32268
  801f10:	dc800215 	stw	r18,8(sp)
  801f14:	14800017 	ldw	r18,0(r2)
  801f18:	dcc00315 	stw	r19,12(sp)
  801f1c:	dfc00415 	stw	ra,16(sp)
  801f20:	90800e17 	ldw	r2,56(r18)
  801f24:	dc400115 	stw	r17,4(sp)
  801f28:	dc000015 	stw	r16,0(sp)
  801f2c:	2027883a 	mov	r19,r4
  801f30:	1000021e 	bne	r2,zero,801f3c <__sfp+0x38>
  801f34:	9009883a 	mov	r4,r18
  801f38:	0801cec0 	call	801cec <__sinit.part.1>
  801f3c:	9480b804 	addi	r18,r18,736
  801f40:	047fffc4 	movi	r17,-1
  801f44:	91400117 	ldw	r5,4(r18)
  801f48:	94000217 	ldw	r16,8(r18)
  801f4c:	297fffc4 	addi	r5,r5,-1
  801f50:	28000a16 	blt	r5,zero,801f7c <__sfp+0x78>
  801f54:	8080030f 	ldh	r2,12(r16)
  801f58:	10000c26 	beq	r2,zero,801f8c <__sfp+0x88>
  801f5c:	80c01d04 	addi	r3,r16,116
  801f60:	00000206 	br	801f6c <__sfp+0x68>
  801f64:	18bfe60f 	ldh	r2,-104(r3)
  801f68:	10000826 	beq	r2,zero,801f8c <__sfp+0x88>
  801f6c:	297fffc4 	addi	r5,r5,-1
  801f70:	1c3ffd04 	addi	r16,r3,-12
  801f74:	18c01a04 	addi	r3,r3,104
  801f78:	2c7ffa1e 	bne	r5,r17,801f64 <__reset+0xff800f64>
  801f7c:	90800017 	ldw	r2,0(r18)
  801f80:	10001d26 	beq	r2,zero,801ff8 <__sfp+0xf4>
  801f84:	1025883a 	mov	r18,r2
  801f88:	003fee06 	br	801f44 <__reset+0xff800f44>
  801f8c:	00bfffc4 	movi	r2,-1
  801f90:	8080038d 	sth	r2,14(r16)
  801f94:	00800044 	movi	r2,1
  801f98:	8080030d 	sth	r2,12(r16)
  801f9c:	80001915 	stw	zero,100(r16)
  801fa0:	80000015 	stw	zero,0(r16)
  801fa4:	80000215 	stw	zero,8(r16)
  801fa8:	80000115 	stw	zero,4(r16)
  801fac:	80000415 	stw	zero,16(r16)
  801fb0:	80000515 	stw	zero,20(r16)
  801fb4:	80000615 	stw	zero,24(r16)
  801fb8:	81001704 	addi	r4,r16,92
  801fbc:	000b883a 	mov	r5,zero
  801fc0:	01800204 	movi	r6,8
  801fc4:	08027c00 	call	8027c0 <memset>
  801fc8:	8005883a 	mov	r2,r16
  801fcc:	80000c15 	stw	zero,48(r16)
  801fd0:	80000d15 	stw	zero,52(r16)
  801fd4:	80001115 	stw	zero,68(r16)
  801fd8:	80001215 	stw	zero,72(r16)
  801fdc:	dfc00417 	ldw	ra,16(sp)
  801fe0:	dcc00317 	ldw	r19,12(sp)
  801fe4:	dc800217 	ldw	r18,8(sp)
  801fe8:	dc400117 	ldw	r17,4(sp)
  801fec:	dc000017 	ldw	r16,0(sp)
  801ff0:	dec00504 	addi	sp,sp,20
  801ff4:	f800283a 	ret
  801ff8:	9809883a 	mov	r4,r19
  801ffc:	01400104 	movi	r5,4
  802000:	0801e8c0 	call	801e8c <__sfmoreglue>
  802004:	90800015 	stw	r2,0(r18)
  802008:	103fde1e 	bne	r2,zero,801f84 <__reset+0xff800f84>
  80200c:	00800304 	movi	r2,12
  802010:	98800015 	stw	r2,0(r19)
  802014:	0005883a 	mov	r2,zero
  802018:	003ff006 	br	801fdc <__reset+0xff800fdc>

0080201c <_cleanup>:
  80201c:	00802074 	movhi	r2,129
  802020:	10a07d04 	addi	r2,r2,-32268
  802024:	11000017 	ldw	r4,0(r2)
  802028:	01402034 	movhi	r5,128
  80202c:	294af404 	addi	r5,r5,11216
  802030:	08024981 	jmpi	802498 <_fwalk>

00802034 <__sinit>:
  802034:	20800e17 	ldw	r2,56(r4)
  802038:	10000126 	beq	r2,zero,802040 <__sinit+0xc>
  80203c:	f800283a 	ret
  802040:	0801cec1 	jmpi	801cec <__sinit.part.1>

00802044 <__sfp_lock_acquire>:
  802044:	f800283a 	ret

00802048 <__sfp_lock_release>:
  802048:	f800283a 	ret

0080204c <__sinit_lock_acquire>:
  80204c:	f800283a 	ret

00802050 <__sinit_lock_release>:
  802050:	f800283a 	ret

00802054 <__fp_lock_all>:
  802054:	00802074 	movhi	r2,129
  802058:	10a07e04 	addi	r2,r2,-32264
  80205c:	11000017 	ldw	r4,0(r2)
  802060:	01402034 	movhi	r5,128
  802064:	29473404 	addi	r5,r5,7376
  802068:	08024981 	jmpi	802498 <_fwalk>

0080206c <__fp_unlock_all>:
  80206c:	00802074 	movhi	r2,129
  802070:	10a07e04 	addi	r2,r2,-32264
  802074:	11000017 	ldw	r4,0(r2)
  802078:	01402034 	movhi	r5,128
  80207c:	29473604 	addi	r5,r5,7384
  802080:	08024981 	jmpi	802498 <_fwalk>

00802084 <_malloc_trim_r>:
  802084:	defffb04 	addi	sp,sp,-20
  802088:	dcc00315 	stw	r19,12(sp)
  80208c:	04c02034 	movhi	r19,128
  802090:	dc800215 	stw	r18,8(sp)
  802094:	dc400115 	stw	r17,4(sp)
  802098:	dc000015 	stw	r16,0(sp)
  80209c:	dfc00415 	stw	ra,16(sp)
  8020a0:	2821883a 	mov	r16,r5
  8020a4:	9cdac604 	addi	r19,r19,27416
  8020a8:	2025883a 	mov	r18,r4
  8020ac:	080326c0 	call	80326c <__malloc_lock>
  8020b0:	98800217 	ldw	r2,8(r19)
  8020b4:	14400117 	ldw	r17,4(r2)
  8020b8:	00bfff04 	movi	r2,-4
  8020bc:	88a2703a 	and	r17,r17,r2
  8020c0:	8c21c83a 	sub	r16,r17,r16
  8020c4:	8403fbc4 	addi	r16,r16,4079
  8020c8:	8020d33a 	srli	r16,r16,12
  8020cc:	0083ffc4 	movi	r2,4095
  8020d0:	843fffc4 	addi	r16,r16,-1
  8020d4:	8020933a 	slli	r16,r16,12
  8020d8:	1400060e 	bge	r2,r16,8020f4 <_malloc_trim_r+0x70>
  8020dc:	9009883a 	mov	r4,r18
  8020e0:	000b883a 	mov	r5,zero
  8020e4:	08018f40 	call	8018f4 <_sbrk_r>
  8020e8:	98c00217 	ldw	r3,8(r19)
  8020ec:	1c47883a 	add	r3,r3,r17
  8020f0:	10c00a26 	beq	r2,r3,80211c <_malloc_trim_r+0x98>
  8020f4:	9009883a 	mov	r4,r18
  8020f8:	080328c0 	call	80328c <__malloc_unlock>
  8020fc:	0005883a 	mov	r2,zero
  802100:	dfc00417 	ldw	ra,16(sp)
  802104:	dcc00317 	ldw	r19,12(sp)
  802108:	dc800217 	ldw	r18,8(sp)
  80210c:	dc400117 	ldw	r17,4(sp)
  802110:	dc000017 	ldw	r16,0(sp)
  802114:	dec00504 	addi	sp,sp,20
  802118:	f800283a 	ret
  80211c:	9009883a 	mov	r4,r18
  802120:	040bc83a 	sub	r5,zero,r16
  802124:	08018f40 	call	8018f4 <_sbrk_r>
  802128:	00ffffc4 	movi	r3,-1
  80212c:	10c00d26 	beq	r2,r3,802164 <_malloc_trim_r+0xe0>
  802130:	00c02074 	movhi	r3,129
  802134:	18e09704 	addi	r3,r3,-32164
  802138:	18800017 	ldw	r2,0(r3)
  80213c:	99000217 	ldw	r4,8(r19)
  802140:	8c23c83a 	sub	r17,r17,r16
  802144:	8c400054 	ori	r17,r17,1
  802148:	1421c83a 	sub	r16,r2,r16
  80214c:	24400115 	stw	r17,4(r4)
  802150:	9009883a 	mov	r4,r18
  802154:	1c000015 	stw	r16,0(r3)
  802158:	080328c0 	call	80328c <__malloc_unlock>
  80215c:	00800044 	movi	r2,1
  802160:	003fe706 	br	802100 <__reset+0xff801100>
  802164:	9009883a 	mov	r4,r18
  802168:	000b883a 	mov	r5,zero
  80216c:	08018f40 	call	8018f4 <_sbrk_r>
  802170:	99000217 	ldw	r4,8(r19)
  802174:	014003c4 	movi	r5,15
  802178:	1107c83a 	sub	r3,r2,r4
  80217c:	28ffdd0e 	bge	r5,r3,8020f4 <__reset+0xff8010f4>
  802180:	01402074 	movhi	r5,129
  802184:	29607f04 	addi	r5,r5,-32260
  802188:	29400017 	ldw	r5,0(r5)
  80218c:	18c00054 	ori	r3,r3,1
  802190:	20c00115 	stw	r3,4(r4)
  802194:	00c02074 	movhi	r3,129
  802198:	1145c83a 	sub	r2,r2,r5
  80219c:	18e09704 	addi	r3,r3,-32164
  8021a0:	18800015 	stw	r2,0(r3)
  8021a4:	003fd306 	br	8020f4 <__reset+0xff8010f4>

008021a8 <_free_r>:
  8021a8:	28004c26 	beq	r5,zero,8022dc <_free_r+0x134>
  8021ac:	defffd04 	addi	sp,sp,-12
  8021b0:	dc400115 	stw	r17,4(sp)
  8021b4:	dc000015 	stw	r16,0(sp)
  8021b8:	2023883a 	mov	r17,r4
  8021bc:	2821883a 	mov	r16,r5
  8021c0:	dfc00215 	stw	ra,8(sp)
  8021c4:	080326c0 	call	80326c <__malloc_lock>
  8021c8:	813fff17 	ldw	r4,-4(r16)
  8021cc:	00bfff84 	movi	r2,-2
  8021d0:	02402034 	movhi	r9,128
  8021d4:	81bffe04 	addi	r6,r16,-8
  8021d8:	2084703a 	and	r2,r4,r2
  8021dc:	4a5ac604 	addi	r9,r9,27416
  8021e0:	308b883a 	add	r5,r6,r2
  8021e4:	2a000117 	ldw	r8,4(r5)
  8021e8:	49c00217 	ldw	r7,8(r9)
  8021ec:	00ffff04 	movi	r3,-4
  8021f0:	40c6703a 	and	r3,r8,r3
  8021f4:	39405326 	beq	r7,r5,802344 <_free_r+0x19c>
  8021f8:	28c00115 	stw	r3,4(r5)
  8021fc:	2100004c 	andi	r4,r4,1
  802200:	2000091e 	bne	r4,zero,802228 <_free_r+0x80>
  802204:	81fffe17 	ldw	r7,-8(r16)
  802208:	4a000204 	addi	r8,r9,8
  80220c:	31cdc83a 	sub	r6,r6,r7
  802210:	31000217 	ldw	r4,8(r6)
  802214:	11c5883a 	add	r2,r2,r7
  802218:	22006126 	beq	r4,r8,8023a0 <_free_r+0x1f8>
  80221c:	31c00317 	ldw	r7,12(r6)
  802220:	21c00315 	stw	r7,12(r4)
  802224:	39000215 	stw	r4,8(r7)
  802228:	28c9883a 	add	r4,r5,r3
  80222c:	21c00117 	ldw	r7,4(r4)
  802230:	39c0004c 	andi	r7,r7,1
  802234:	38000d1e 	bne	r7,zero,80226c <_free_r+0xc4>
  802238:	29000217 	ldw	r4,8(r5)
  80223c:	10c5883a 	add	r2,r2,r3
  802240:	00c02034 	movhi	r3,128
  802244:	18dac804 	addi	r3,r3,27424
  802248:	20c07526 	beq	r4,r3,802420 <_free_r+0x278>
  80224c:	29c00317 	ldw	r7,12(r5)
  802250:	11400054 	ori	r5,r2,1
  802254:	3087883a 	add	r3,r6,r2
  802258:	21c00315 	stw	r7,12(r4)
  80225c:	39000215 	stw	r4,8(r7)
  802260:	31400115 	stw	r5,4(r6)
  802264:	18800015 	stw	r2,0(r3)
  802268:	00000406 	br	80227c <_free_r+0xd4>
  80226c:	10c00054 	ori	r3,r2,1
  802270:	30c00115 	stw	r3,4(r6)
  802274:	3087883a 	add	r3,r6,r2
  802278:	18800015 	stw	r2,0(r3)
  80227c:	00c07fc4 	movi	r3,511
  802280:	18801736 	bltu	r3,r2,8022e0 <_free_r+0x138>
  802284:	1004d0fa 	srli	r2,r2,3
  802288:	01400044 	movi	r5,1
  80228c:	49000117 	ldw	r4,4(r9)
  802290:	1087883a 	add	r3,r2,r2
  802294:	18c7883a 	add	r3,r3,r3
  802298:	1005d0ba 	srai	r2,r2,2
  80229c:	18c7883a 	add	r3,r3,r3
  8022a0:	1a47883a 	add	r3,r3,r9
  8022a4:	19c00217 	ldw	r7,8(r3)
  8022a8:	2884983a 	sll	r2,r5,r2
  8022ac:	30c00315 	stw	r3,12(r6)
  8022b0:	31c00215 	stw	r7,8(r6)
  8022b4:	1104b03a 	or	r2,r2,r4
  8022b8:	19800215 	stw	r6,8(r3)
  8022bc:	48800115 	stw	r2,4(r9)
  8022c0:	39800315 	stw	r6,12(r7)
  8022c4:	8809883a 	mov	r4,r17
  8022c8:	dfc00217 	ldw	ra,8(sp)
  8022cc:	dc400117 	ldw	r17,4(sp)
  8022d0:	dc000017 	ldw	r16,0(sp)
  8022d4:	dec00304 	addi	sp,sp,12
  8022d8:	080328c1 	jmpi	80328c <__malloc_unlock>
  8022dc:	f800283a 	ret
  8022e0:	1006d27a 	srli	r3,r2,9
  8022e4:	01000104 	movi	r4,4
  8022e8:	20c04036 	bltu	r4,r3,8023ec <_free_r+0x244>
  8022ec:	1006d1ba 	srli	r3,r2,6
  8022f0:	19400e04 	addi	r5,r3,56
  8022f4:	2947883a 	add	r3,r5,r5
  8022f8:	18c7883a 	add	r3,r3,r3
  8022fc:	18c7883a 	add	r3,r3,r3
  802300:	1a49883a 	add	r4,r3,r9
  802304:	20c00217 	ldw	r3,8(r4)
  802308:	01c02034 	movhi	r7,128
  80230c:	39dac604 	addi	r7,r7,27416
  802310:	19003b26 	beq	r3,r4,802400 <_free_r+0x258>
  802314:	01ffff04 	movi	r7,-4
  802318:	19400117 	ldw	r5,4(r3)
  80231c:	29ca703a 	and	r5,r5,r7
  802320:	1140022e 	bgeu	r2,r5,80232c <_free_r+0x184>
  802324:	18c00217 	ldw	r3,8(r3)
  802328:	20fffb1e 	bne	r4,r3,802318 <__reset+0xff801318>
  80232c:	18800317 	ldw	r2,12(r3)
  802330:	30800315 	stw	r2,12(r6)
  802334:	30c00215 	stw	r3,8(r6)
  802338:	11800215 	stw	r6,8(r2)
  80233c:	19800315 	stw	r6,12(r3)
  802340:	003fe006 	br	8022c4 <__reset+0xff8012c4>
  802344:	2100004c 	andi	r4,r4,1
  802348:	1885883a 	add	r2,r3,r2
  80234c:	2000071e 	bne	r4,zero,80236c <_free_r+0x1c4>
  802350:	817ffe17 	ldw	r5,-8(r16)
  802354:	314dc83a 	sub	r6,r6,r5
  802358:	30c00317 	ldw	r3,12(r6)
  80235c:	31000217 	ldw	r4,8(r6)
  802360:	1145883a 	add	r2,r2,r5
  802364:	20c00315 	stw	r3,12(r4)
  802368:	19000215 	stw	r4,8(r3)
  80236c:	10c00054 	ori	r3,r2,1
  802370:	30c00115 	stw	r3,4(r6)
  802374:	00c02074 	movhi	r3,129
  802378:	18e08004 	addi	r3,r3,-32256
  80237c:	18c00017 	ldw	r3,0(r3)
  802380:	49800215 	stw	r6,8(r9)
  802384:	10ffcf36 	bltu	r2,r3,8022c4 <__reset+0xff8012c4>
  802388:	00802074 	movhi	r2,129
  80238c:	10a08f04 	addi	r2,r2,-32196
  802390:	11400017 	ldw	r5,0(r2)
  802394:	8809883a 	mov	r4,r17
  802398:	08020840 	call	802084 <_malloc_trim_r>
  80239c:	003fc906 	br	8022c4 <__reset+0xff8012c4>
  8023a0:	28c9883a 	add	r4,r5,r3
  8023a4:	21000117 	ldw	r4,4(r4)
  8023a8:	2100004c 	andi	r4,r4,1
  8023ac:	20000a1e 	bne	r4,zero,8023d8 <_free_r+0x230>
  8023b0:	29000317 	ldw	r4,12(r5)
  8023b4:	29400217 	ldw	r5,8(r5)
  8023b8:	10c5883a 	add	r2,r2,r3
  8023bc:	10c00054 	ori	r3,r2,1
  8023c0:	29000315 	stw	r4,12(r5)
  8023c4:	21400215 	stw	r5,8(r4)
  8023c8:	30c00115 	stw	r3,4(r6)
  8023cc:	308d883a 	add	r6,r6,r2
  8023d0:	30800015 	stw	r2,0(r6)
  8023d4:	003fbb06 	br	8022c4 <__reset+0xff8012c4>
  8023d8:	10c00054 	ori	r3,r2,1
  8023dc:	30c00115 	stw	r3,4(r6)
  8023e0:	308d883a 	add	r6,r6,r2
  8023e4:	30800015 	stw	r2,0(r6)
  8023e8:	003fb606 	br	8022c4 <__reset+0xff8012c4>
  8023ec:	01000504 	movi	r4,20
  8023f0:	20c01436 	bltu	r4,r3,802444 <_free_r+0x29c>
  8023f4:	194016c4 	addi	r5,r3,91
  8023f8:	2947883a 	add	r3,r5,r5
  8023fc:	003fbe06 	br	8022f8 <__reset+0xff8012f8>
  802400:	280bd0ba 	srai	r5,r5,2
  802404:	00800044 	movi	r2,1
  802408:	39000117 	ldw	r4,4(r7)
  80240c:	114a983a 	sll	r5,r2,r5
  802410:	1805883a 	mov	r2,r3
  802414:	2908b03a 	or	r4,r5,r4
  802418:	39000115 	stw	r4,4(r7)
  80241c:	003fc406 	br	802330 <__reset+0xff801330>
  802420:	49800515 	stw	r6,20(r9)
  802424:	49800415 	stw	r6,16(r9)
  802428:	10c00054 	ori	r3,r2,1
  80242c:	31000315 	stw	r4,12(r6)
  802430:	31000215 	stw	r4,8(r6)
  802434:	30c00115 	stw	r3,4(r6)
  802438:	308d883a 	add	r6,r6,r2
  80243c:	30800015 	stw	r2,0(r6)
  802440:	003fa006 	br	8022c4 <__reset+0xff8012c4>
  802444:	01001504 	movi	r4,84
  802448:	20c00436 	bltu	r4,r3,80245c <_free_r+0x2b4>
  80244c:	1006d33a 	srli	r3,r2,12
  802450:	19401b84 	addi	r5,r3,110
  802454:	2947883a 	add	r3,r5,r5
  802458:	003fa706 	br	8022f8 <__reset+0xff8012f8>
  80245c:	01005504 	movi	r4,340
  802460:	20c00436 	bltu	r4,r3,802474 <_free_r+0x2cc>
  802464:	1006d3fa 	srli	r3,r2,15
  802468:	19401dc4 	addi	r5,r3,119
  80246c:	2947883a 	add	r3,r5,r5
  802470:	003fa106 	br	8022f8 <__reset+0xff8012f8>
  802474:	01015504 	movi	r4,1364
  802478:	20c00436 	bltu	r4,r3,80248c <_free_r+0x2e4>
  80247c:	1006d4ba 	srli	r3,r2,18
  802480:	19401f04 	addi	r5,r3,124
  802484:	2947883a 	add	r3,r5,r5
  802488:	003f9b06 	br	8022f8 <__reset+0xff8012f8>
  80248c:	00c03f04 	movi	r3,252
  802490:	01401f84 	movi	r5,126
  802494:	003f9806 	br	8022f8 <__reset+0xff8012f8>

00802498 <_fwalk>:
  802498:	defff804 	addi	sp,sp,-32
  80249c:	dd400515 	stw	r21,20(sp)
  8024a0:	2540b804 	addi	r21,r4,736
  8024a4:	dd800615 	stw	r22,24(sp)
  8024a8:	dd000415 	stw	r20,16(sp)
  8024ac:	dfc00715 	stw	ra,28(sp)
  8024b0:	dcc00315 	stw	r19,12(sp)
  8024b4:	dc800215 	stw	r18,8(sp)
  8024b8:	dc400115 	stw	r17,4(sp)
  8024bc:	dc000015 	stw	r16,0(sp)
  8024c0:	2829883a 	mov	r20,r5
  8024c4:	002d883a 	mov	r22,zero
  8024c8:	08020440 	call	802044 <__sfp_lock_acquire>
  8024cc:	a8001426 	beq	r21,zero,802520 <_fwalk+0x88>
  8024d0:	04ffffc4 	movi	r19,-1
  8024d4:	ac400117 	ldw	r17,4(r21)
  8024d8:	ac800217 	ldw	r18,8(r21)
  8024dc:	8c7fffc4 	addi	r17,r17,-1
  8024e0:	88000d16 	blt	r17,zero,802518 <_fwalk+0x80>
  8024e4:	94000304 	addi	r16,r18,12
  8024e8:	94800384 	addi	r18,r18,14
  8024ec:	80c0000f 	ldh	r3,0(r16)
  8024f0:	8c7fffc4 	addi	r17,r17,-1
  8024f4:	813ffd04 	addi	r4,r16,-12
  8024f8:	18000426 	beq	r3,zero,80250c <_fwalk+0x74>
  8024fc:	90c0000f 	ldh	r3,0(r18)
  802500:	1cc00226 	beq	r3,r19,80250c <_fwalk+0x74>
  802504:	a03ee83a 	callr	r20
  802508:	b0acb03a 	or	r22,r22,r2
  80250c:	84001a04 	addi	r16,r16,104
  802510:	94801a04 	addi	r18,r18,104
  802514:	8cfff51e 	bne	r17,r19,8024ec <__reset+0xff8014ec>
  802518:	ad400017 	ldw	r21,0(r21)
  80251c:	a83fed1e 	bne	r21,zero,8024d4 <__reset+0xff8014d4>
  802520:	08020480 	call	802048 <__sfp_lock_release>
  802524:	b005883a 	mov	r2,r22
  802528:	dfc00717 	ldw	ra,28(sp)
  80252c:	dd800617 	ldw	r22,24(sp)
  802530:	dd400517 	ldw	r21,20(sp)
  802534:	dd000417 	ldw	r20,16(sp)
  802538:	dcc00317 	ldw	r19,12(sp)
  80253c:	dc800217 	ldw	r18,8(sp)
  802540:	dc400117 	ldw	r17,4(sp)
  802544:	dc000017 	ldw	r16,0(sp)
  802548:	dec00804 	addi	sp,sp,32
  80254c:	f800283a 	ret

00802550 <_fwalk_reent>:
  802550:	defff804 	addi	sp,sp,-32
  802554:	dd400515 	stw	r21,20(sp)
  802558:	2540b804 	addi	r21,r4,736
  80255c:	dd800615 	stw	r22,24(sp)
  802560:	dd000415 	stw	r20,16(sp)
  802564:	dcc00315 	stw	r19,12(sp)
  802568:	dfc00715 	stw	ra,28(sp)
  80256c:	dc800215 	stw	r18,8(sp)
  802570:	dc400115 	stw	r17,4(sp)
  802574:	dc000015 	stw	r16,0(sp)
  802578:	2027883a 	mov	r19,r4
  80257c:	2829883a 	mov	r20,r5
  802580:	002d883a 	mov	r22,zero
  802584:	08020440 	call	802044 <__sfp_lock_acquire>
  802588:	a8001326 	beq	r21,zero,8025d8 <_fwalk_reent+0x88>
  80258c:	04bfffc4 	movi	r18,-1
  802590:	ac400117 	ldw	r17,4(r21)
  802594:	ac000217 	ldw	r16,8(r21)
  802598:	8c7fffc4 	addi	r17,r17,-1
  80259c:	88000c16 	blt	r17,zero,8025d0 <_fwalk_reent+0x80>
  8025a0:	84000304 	addi	r16,r16,12
  8025a4:	80c0000f 	ldh	r3,0(r16)
  8025a8:	8c7fffc4 	addi	r17,r17,-1
  8025ac:	817ffd04 	addi	r5,r16,-12
  8025b0:	18000526 	beq	r3,zero,8025c8 <_fwalk_reent+0x78>
  8025b4:	80c0008f 	ldh	r3,2(r16)
  8025b8:	9809883a 	mov	r4,r19
  8025bc:	1c800226 	beq	r3,r18,8025c8 <_fwalk_reent+0x78>
  8025c0:	a03ee83a 	callr	r20
  8025c4:	b0acb03a 	or	r22,r22,r2
  8025c8:	84001a04 	addi	r16,r16,104
  8025cc:	8cbff51e 	bne	r17,r18,8025a4 <__reset+0xff8015a4>
  8025d0:	ad400017 	ldw	r21,0(r21)
  8025d4:	a83fee1e 	bne	r21,zero,802590 <__reset+0xff801590>
  8025d8:	08020480 	call	802048 <__sfp_lock_release>
  8025dc:	b005883a 	mov	r2,r22
  8025e0:	dfc00717 	ldw	ra,28(sp)
  8025e4:	dd800617 	ldw	r22,24(sp)
  8025e8:	dd400517 	ldw	r21,20(sp)
  8025ec:	dd000417 	ldw	r20,16(sp)
  8025f0:	dcc00317 	ldw	r19,12(sp)
  8025f4:	dc800217 	ldw	r18,8(sp)
  8025f8:	dc400117 	ldw	r17,4(sp)
  8025fc:	dc000017 	ldw	r16,0(sp)
  802600:	dec00804 	addi	sp,sp,32
  802604:	f800283a 	ret

00802608 <__smakebuf_r>:
  802608:	2880030b 	ldhu	r2,12(r5)
  80260c:	10c0008c 	andi	r3,r2,2
  802610:	1800401e 	bne	r3,zero,802714 <__smakebuf_r+0x10c>
  802614:	deffec04 	addi	sp,sp,-80
  802618:	dc000f15 	stw	r16,60(sp)
  80261c:	2821883a 	mov	r16,r5
  802620:	2940038f 	ldh	r5,14(r5)
  802624:	dc401015 	stw	r17,64(sp)
  802628:	dfc01315 	stw	ra,76(sp)
  80262c:	dcc01215 	stw	r19,72(sp)
  802630:	dc801115 	stw	r18,68(sp)
  802634:	2023883a 	mov	r17,r4
  802638:	28001b16 	blt	r5,zero,8026a8 <__smakebuf_r+0xa0>
  80263c:	d80d883a 	mov	r6,sp
  802640:	0802be40 	call	802be4 <_fstat_r>
  802644:	10001716 	blt	r2,zero,8026a4 <__smakebuf_r+0x9c>
  802648:	d8800117 	ldw	r2,4(sp)
  80264c:	00e00014 	movui	r3,32768
  802650:	10bc000c 	andi	r2,r2,61440
  802654:	10c03726 	beq	r2,r3,802734 <__smakebuf_r+0x12c>
  802658:	80c0030b 	ldhu	r3,12(r16)
  80265c:	18c20014 	ori	r3,r3,2048
  802660:	80c0030d 	sth	r3,12(r16)
  802664:	00c80004 	movi	r3,8192
  802668:	10c03c1e 	bne	r2,r3,80275c <__smakebuf_r+0x154>
  80266c:	8140038f 	ldh	r5,14(r16)
  802670:	8809883a 	mov	r4,r17
  802674:	0802c3c0 	call	802c3c <_isatty_r>
  802678:	10004e26 	beq	r2,zero,8027b4 <__smakebuf_r+0x1ac>
  80267c:	8080030b 	ldhu	r2,12(r16)
  802680:	04c00044 	movi	r19,1
  802684:	80c010c4 	addi	r3,r16,67
  802688:	14c4b03a 	or	r2,r2,r19
  80268c:	8080030d 	sth	r2,12(r16)
  802690:	80c00015 	stw	r3,0(r16)
  802694:	80c00415 	stw	r3,16(r16)
  802698:	84c00515 	stw	r19,20(r16)
  80269c:	04810004 	movi	r18,1024
  8026a0:	00000706 	br	8026c0 <__smakebuf_r+0xb8>
  8026a4:	8080030b 	ldhu	r2,12(r16)
  8026a8:	10c0200c 	andi	r3,r2,128
  8026ac:	18001f1e 	bne	r3,zero,80272c <__smakebuf_r+0x124>
  8026b0:	04810004 	movi	r18,1024
  8026b4:	10820014 	ori	r2,r2,2048
  8026b8:	8080030d 	sth	r2,12(r16)
  8026bc:	0027883a 	mov	r19,zero
  8026c0:	8809883a 	mov	r4,r17
  8026c4:	900b883a 	mov	r5,r18
  8026c8:	08008300 	call	800830 <_malloc_r>
  8026cc:	10002e26 	beq	r2,zero,802788 <__smakebuf_r+0x180>
  8026d0:	80c0030b 	ldhu	r3,12(r16)
  8026d4:	01002034 	movhi	r4,128
  8026d8:	21073804 	addi	r4,r4,7392
  8026dc:	89000f15 	stw	r4,60(r17)
  8026e0:	18c02014 	ori	r3,r3,128
  8026e4:	80c0030d 	sth	r3,12(r16)
  8026e8:	80800015 	stw	r2,0(r16)
  8026ec:	80800415 	stw	r2,16(r16)
  8026f0:	84800515 	stw	r18,20(r16)
  8026f4:	98001c1e 	bne	r19,zero,802768 <__smakebuf_r+0x160>
  8026f8:	dfc01317 	ldw	ra,76(sp)
  8026fc:	dcc01217 	ldw	r19,72(sp)
  802700:	dc801117 	ldw	r18,68(sp)
  802704:	dc401017 	ldw	r17,64(sp)
  802708:	dc000f17 	ldw	r16,60(sp)
  80270c:	dec01404 	addi	sp,sp,80
  802710:	f800283a 	ret
  802714:	288010c4 	addi	r2,r5,67
  802718:	28800015 	stw	r2,0(r5)
  80271c:	28800415 	stw	r2,16(r5)
  802720:	00800044 	movi	r2,1
  802724:	28800515 	stw	r2,20(r5)
  802728:	f800283a 	ret
  80272c:	04801004 	movi	r18,64
  802730:	003fe006 	br	8026b4 <__reset+0xff8016b4>
  802734:	81000a17 	ldw	r4,40(r16)
  802738:	00c02034 	movhi	r3,128
  80273c:	18ca6f04 	addi	r3,r3,10684
  802740:	20ffc51e 	bne	r4,r3,802658 <__reset+0xff801658>
  802744:	80c0030b 	ldhu	r3,12(r16)
  802748:	01010004 	movi	r4,1024
  80274c:	81001315 	stw	r4,76(r16)
  802750:	1906b03a 	or	r3,r3,r4
  802754:	80c0030d 	sth	r3,12(r16)
  802758:	003fc206 	br	802664 <__reset+0xff801664>
  80275c:	0027883a 	mov	r19,zero
  802760:	04810004 	movi	r18,1024
  802764:	003fd606 	br	8026c0 <__reset+0xff8016c0>
  802768:	8140038f 	ldh	r5,14(r16)
  80276c:	8809883a 	mov	r4,r17
  802770:	0802c3c0 	call	802c3c <_isatty_r>
  802774:	103fe026 	beq	r2,zero,8026f8 <__reset+0xff8016f8>
  802778:	8080030b 	ldhu	r2,12(r16)
  80277c:	10800054 	ori	r2,r2,1
  802780:	8080030d 	sth	r2,12(r16)
  802784:	003fdc06 	br	8026f8 <__reset+0xff8016f8>
  802788:	8080030b 	ldhu	r2,12(r16)
  80278c:	10c0800c 	andi	r3,r2,512
  802790:	183fd91e 	bne	r3,zero,8026f8 <__reset+0xff8016f8>
  802794:	10800094 	ori	r2,r2,2
  802798:	80c010c4 	addi	r3,r16,67
  80279c:	8080030d 	sth	r2,12(r16)
  8027a0:	00800044 	movi	r2,1
  8027a4:	80c00015 	stw	r3,0(r16)
  8027a8:	80c00415 	stw	r3,16(r16)
  8027ac:	80800515 	stw	r2,20(r16)
  8027b0:	003fd106 	br	8026f8 <__reset+0xff8016f8>
  8027b4:	04c00044 	movi	r19,1
  8027b8:	04810004 	movi	r18,1024
  8027bc:	003fc006 	br	8026c0 <__reset+0xff8016c0>

008027c0 <memset>:
  8027c0:	20c000cc 	andi	r3,r4,3
  8027c4:	2005883a 	mov	r2,r4
  8027c8:	18004326 	beq	r3,zero,8028d8 <memset+0x118>
  8027cc:	31ffffc4 	addi	r7,r6,-1
  8027d0:	30004026 	beq	r6,zero,8028d4 <memset+0x114>
  8027d4:	2813883a 	mov	r9,r5
  8027d8:	200d883a 	mov	r6,r4
  8027dc:	2007883a 	mov	r3,r4
  8027e0:	00000406 	br	8027f4 <memset+0x34>
  8027e4:	3a3fffc4 	addi	r8,r7,-1
  8027e8:	31800044 	addi	r6,r6,1
  8027ec:	38003926 	beq	r7,zero,8028d4 <memset+0x114>
  8027f0:	400f883a 	mov	r7,r8
  8027f4:	18c00044 	addi	r3,r3,1
  8027f8:	32400005 	stb	r9,0(r6)
  8027fc:	1a0000cc 	andi	r8,r3,3
  802800:	403ff81e 	bne	r8,zero,8027e4 <__reset+0xff8017e4>
  802804:	010000c4 	movi	r4,3
  802808:	21c02d2e 	bgeu	r4,r7,8028c0 <memset+0x100>
  80280c:	29803fcc 	andi	r6,r5,255
  802810:	3008923a 	slli	r4,r6,8
  802814:	218cb03a 	or	r6,r4,r6
  802818:	3008943a 	slli	r4,r6,16
  80281c:	218cb03a 	or	r6,r4,r6
  802820:	010003c4 	movi	r4,15
  802824:	21c0182e 	bgeu	r4,r7,802888 <memset+0xc8>
  802828:	3b3ffc04 	addi	r12,r7,-16
  80282c:	6018d13a 	srli	r12,r12,4
  802830:	1a000104 	addi	r8,r3,4
  802834:	1ac00204 	addi	r11,r3,8
  802838:	6008913a 	slli	r4,r12,4
  80283c:	1a800304 	addi	r10,r3,12
  802840:	1813883a 	mov	r9,r3
  802844:	21000504 	addi	r4,r4,20
  802848:	1909883a 	add	r4,r3,r4
  80284c:	49800015 	stw	r6,0(r9)
  802850:	41800015 	stw	r6,0(r8)
  802854:	59800015 	stw	r6,0(r11)
  802858:	51800015 	stw	r6,0(r10)
  80285c:	42000404 	addi	r8,r8,16
  802860:	4a400404 	addi	r9,r9,16
  802864:	5ac00404 	addi	r11,r11,16
  802868:	52800404 	addi	r10,r10,16
  80286c:	413ff71e 	bne	r8,r4,80284c <__reset+0xff80184c>
  802870:	63000044 	addi	r12,r12,1
  802874:	6018913a 	slli	r12,r12,4
  802878:	39c003cc 	andi	r7,r7,15
  80287c:	010000c4 	movi	r4,3
  802880:	1b07883a 	add	r3,r3,r12
  802884:	21c00e2e 	bgeu	r4,r7,8028c0 <memset+0x100>
  802888:	1813883a 	mov	r9,r3
  80288c:	3811883a 	mov	r8,r7
  802890:	010000c4 	movi	r4,3
  802894:	49800015 	stw	r6,0(r9)
  802898:	423fff04 	addi	r8,r8,-4
  80289c:	4a400104 	addi	r9,r9,4
  8028a0:	223ffc36 	bltu	r4,r8,802894 <__reset+0xff801894>
  8028a4:	393fff04 	addi	r4,r7,-4
  8028a8:	2008d0ba 	srli	r4,r4,2
  8028ac:	39c000cc 	andi	r7,r7,3
  8028b0:	21000044 	addi	r4,r4,1
  8028b4:	2109883a 	add	r4,r4,r4
  8028b8:	2109883a 	add	r4,r4,r4
  8028bc:	1907883a 	add	r3,r3,r4
  8028c0:	38000426 	beq	r7,zero,8028d4 <memset+0x114>
  8028c4:	19cf883a 	add	r7,r3,r7
  8028c8:	19400005 	stb	r5,0(r3)
  8028cc:	18c00044 	addi	r3,r3,1
  8028d0:	19fffd1e 	bne	r3,r7,8028c8 <__reset+0xff8018c8>
  8028d4:	f800283a 	ret
  8028d8:	2007883a 	mov	r3,r4
  8028dc:	300f883a 	mov	r7,r6
  8028e0:	003fc806 	br	802804 <__reset+0xff801804>

008028e4 <__sread>:
  8028e4:	defffe04 	addi	sp,sp,-8
  8028e8:	dc000015 	stw	r16,0(sp)
  8028ec:	2821883a 	mov	r16,r5
  8028f0:	2940038f 	ldh	r5,14(r5)
  8028f4:	dfc00115 	stw	ra,4(sp)
  8028f8:	0802cec0 	call	802cec <_read_r>
  8028fc:	10000716 	blt	r2,zero,80291c <__sread+0x38>
  802900:	80c01417 	ldw	r3,80(r16)
  802904:	1887883a 	add	r3,r3,r2
  802908:	80c01415 	stw	r3,80(r16)
  80290c:	dfc00117 	ldw	ra,4(sp)
  802910:	dc000017 	ldw	r16,0(sp)
  802914:	dec00204 	addi	sp,sp,8
  802918:	f800283a 	ret
  80291c:	80c0030b 	ldhu	r3,12(r16)
  802920:	18fbffcc 	andi	r3,r3,61439
  802924:	80c0030d 	sth	r3,12(r16)
  802928:	dfc00117 	ldw	ra,4(sp)
  80292c:	dc000017 	ldw	r16,0(sp)
  802930:	dec00204 	addi	sp,sp,8
  802934:	f800283a 	ret

00802938 <__seofread>:
  802938:	0005883a 	mov	r2,zero
  80293c:	f800283a 	ret

00802940 <__swrite>:
  802940:	2880030b 	ldhu	r2,12(r5)
  802944:	defffb04 	addi	sp,sp,-20
  802948:	dcc00315 	stw	r19,12(sp)
  80294c:	dc800215 	stw	r18,8(sp)
  802950:	dc400115 	stw	r17,4(sp)
  802954:	dc000015 	stw	r16,0(sp)
  802958:	dfc00415 	stw	ra,16(sp)
  80295c:	10c0400c 	andi	r3,r2,256
  802960:	2821883a 	mov	r16,r5
  802964:	2027883a 	mov	r19,r4
  802968:	3025883a 	mov	r18,r6
  80296c:	3823883a 	mov	r17,r7
  802970:	18000526 	beq	r3,zero,802988 <__swrite+0x48>
  802974:	2940038f 	ldh	r5,14(r5)
  802978:	000d883a 	mov	r6,zero
  80297c:	01c00084 	movi	r7,2
  802980:	0802c900 	call	802c90 <_lseek_r>
  802984:	8080030b 	ldhu	r2,12(r16)
  802988:	8140038f 	ldh	r5,14(r16)
  80298c:	10bbffcc 	andi	r2,r2,61439
  802990:	9809883a 	mov	r4,r19
  802994:	900d883a 	mov	r6,r18
  802998:	880f883a 	mov	r7,r17
  80299c:	8080030d 	sth	r2,12(r16)
  8029a0:	dfc00417 	ldw	ra,16(sp)
  8029a4:	dcc00317 	ldw	r19,12(sp)
  8029a8:	dc800217 	ldw	r18,8(sp)
  8029ac:	dc400117 	ldw	r17,4(sp)
  8029b0:	dc000017 	ldw	r16,0(sp)
  8029b4:	dec00504 	addi	sp,sp,20
  8029b8:	0802a201 	jmpi	802a20 <_write_r>

008029bc <__sseek>:
  8029bc:	defffe04 	addi	sp,sp,-8
  8029c0:	dc000015 	stw	r16,0(sp)
  8029c4:	2821883a 	mov	r16,r5
  8029c8:	2940038f 	ldh	r5,14(r5)
  8029cc:	dfc00115 	stw	ra,4(sp)
  8029d0:	0802c900 	call	802c90 <_lseek_r>
  8029d4:	00ffffc4 	movi	r3,-1
  8029d8:	10c00826 	beq	r2,r3,8029fc <__sseek+0x40>
  8029dc:	80c0030b 	ldhu	r3,12(r16)
  8029e0:	80801415 	stw	r2,80(r16)
  8029e4:	18c40014 	ori	r3,r3,4096
  8029e8:	80c0030d 	sth	r3,12(r16)
  8029ec:	dfc00117 	ldw	ra,4(sp)
  8029f0:	dc000017 	ldw	r16,0(sp)
  8029f4:	dec00204 	addi	sp,sp,8
  8029f8:	f800283a 	ret
  8029fc:	80c0030b 	ldhu	r3,12(r16)
  802a00:	18fbffcc 	andi	r3,r3,61439
  802a04:	80c0030d 	sth	r3,12(r16)
  802a08:	dfc00117 	ldw	ra,4(sp)
  802a0c:	dc000017 	ldw	r16,0(sp)
  802a10:	dec00204 	addi	sp,sp,8
  802a14:	f800283a 	ret

00802a18 <__sclose>:
  802a18:	2940038f 	ldh	r5,14(r5)
  802a1c:	0802a7c1 	jmpi	802a7c <_close_r>

00802a20 <_write_r>:
  802a20:	defffd04 	addi	sp,sp,-12
  802a24:	dc000015 	stw	r16,0(sp)
  802a28:	04002074 	movhi	r16,129
  802a2c:	dc400115 	stw	r17,4(sp)
  802a30:	84209004 	addi	r16,r16,-32192
  802a34:	2023883a 	mov	r17,r4
  802a38:	2809883a 	mov	r4,r5
  802a3c:	300b883a 	mov	r5,r6
  802a40:	380d883a 	mov	r6,r7
  802a44:	dfc00215 	stw	ra,8(sp)
  802a48:	80000015 	stw	zero,0(r16)
  802a4c:	08035800 	call	803580 <write>
  802a50:	00ffffc4 	movi	r3,-1
  802a54:	10c00526 	beq	r2,r3,802a6c <_write_r+0x4c>
  802a58:	dfc00217 	ldw	ra,8(sp)
  802a5c:	dc400117 	ldw	r17,4(sp)
  802a60:	dc000017 	ldw	r16,0(sp)
  802a64:	dec00304 	addi	sp,sp,12
  802a68:	f800283a 	ret
  802a6c:	80c00017 	ldw	r3,0(r16)
  802a70:	183ff926 	beq	r3,zero,802a58 <__reset+0xff801a58>
  802a74:	88c00015 	stw	r3,0(r17)
  802a78:	003ff706 	br	802a58 <__reset+0xff801a58>

00802a7c <_close_r>:
  802a7c:	defffd04 	addi	sp,sp,-12
  802a80:	dc000015 	stw	r16,0(sp)
  802a84:	04002074 	movhi	r16,129
  802a88:	dc400115 	stw	r17,4(sp)
  802a8c:	84209004 	addi	r16,r16,-32192
  802a90:	2023883a 	mov	r17,r4
  802a94:	2809883a 	mov	r4,r5
  802a98:	dfc00215 	stw	ra,8(sp)
  802a9c:	80000015 	stw	zero,0(r16)
  802aa0:	0802dc00 	call	802dc0 <close>
  802aa4:	00ffffc4 	movi	r3,-1
  802aa8:	10c00526 	beq	r2,r3,802ac0 <_close_r+0x44>
  802aac:	dfc00217 	ldw	ra,8(sp)
  802ab0:	dc400117 	ldw	r17,4(sp)
  802ab4:	dc000017 	ldw	r16,0(sp)
  802ab8:	dec00304 	addi	sp,sp,12
  802abc:	f800283a 	ret
  802ac0:	80c00017 	ldw	r3,0(r16)
  802ac4:	183ff926 	beq	r3,zero,802aac <__reset+0xff801aac>
  802ac8:	88c00015 	stw	r3,0(r17)
  802acc:	003ff706 	br	802aac <__reset+0xff801aac>

00802ad0 <_fclose_r>:
  802ad0:	28003226 	beq	r5,zero,802b9c <_fclose_r+0xcc>
  802ad4:	defffc04 	addi	sp,sp,-16
  802ad8:	dc400115 	stw	r17,4(sp)
  802adc:	2023883a 	mov	r17,r4
  802ae0:	dc000015 	stw	r16,0(sp)
  802ae4:	dfc00315 	stw	ra,12(sp)
  802ae8:	dc800215 	stw	r18,8(sp)
  802aec:	2821883a 	mov	r16,r5
  802af0:	08020440 	call	802044 <__sfp_lock_acquire>
  802af4:	88000226 	beq	r17,zero,802b00 <_fclose_r+0x30>
  802af8:	88800e17 	ldw	r2,56(r17)
  802afc:	10002926 	beq	r2,zero,802ba4 <_fclose_r+0xd4>
  802b00:	8080030f 	ldh	r2,12(r16)
  802b04:	10002226 	beq	r2,zero,802b90 <_fclose_r+0xc0>
  802b08:	8809883a 	mov	r4,r17
  802b0c:	800b883a 	mov	r5,r16
  802b10:	0801a780 	call	801a78 <_fflush_r>
  802b14:	1025883a 	mov	r18,r2
  802b18:	80800b17 	ldw	r2,44(r16)
  802b1c:	10000426 	beq	r2,zero,802b30 <_fclose_r+0x60>
  802b20:	81400717 	ldw	r5,28(r16)
  802b24:	8809883a 	mov	r4,r17
  802b28:	103ee83a 	callr	r2
  802b2c:	10002616 	blt	r2,zero,802bc8 <_fclose_r+0xf8>
  802b30:	8080030b 	ldhu	r2,12(r16)
  802b34:	1080200c 	andi	r2,r2,128
  802b38:	10001f1e 	bne	r2,zero,802bb8 <_fclose_r+0xe8>
  802b3c:	81400c17 	ldw	r5,48(r16)
  802b40:	28000526 	beq	r5,zero,802b58 <_fclose_r+0x88>
  802b44:	80801004 	addi	r2,r16,64
  802b48:	28800226 	beq	r5,r2,802b54 <_fclose_r+0x84>
  802b4c:	8809883a 	mov	r4,r17
  802b50:	08021a80 	call	8021a8 <_free_r>
  802b54:	80000c15 	stw	zero,48(r16)
  802b58:	81401117 	ldw	r5,68(r16)
  802b5c:	28000326 	beq	r5,zero,802b6c <_fclose_r+0x9c>
  802b60:	8809883a 	mov	r4,r17
  802b64:	08021a80 	call	8021a8 <_free_r>
  802b68:	80001115 	stw	zero,68(r16)
  802b6c:	8000030d 	sth	zero,12(r16)
  802b70:	08020480 	call	802048 <__sfp_lock_release>
  802b74:	9005883a 	mov	r2,r18
  802b78:	dfc00317 	ldw	ra,12(sp)
  802b7c:	dc800217 	ldw	r18,8(sp)
  802b80:	dc400117 	ldw	r17,4(sp)
  802b84:	dc000017 	ldw	r16,0(sp)
  802b88:	dec00404 	addi	sp,sp,16
  802b8c:	f800283a 	ret
  802b90:	08020480 	call	802048 <__sfp_lock_release>
  802b94:	0005883a 	mov	r2,zero
  802b98:	003ff706 	br	802b78 <__reset+0xff801b78>
  802b9c:	0005883a 	mov	r2,zero
  802ba0:	f800283a 	ret
  802ba4:	8809883a 	mov	r4,r17
  802ba8:	08020340 	call	802034 <__sinit>
  802bac:	8080030f 	ldh	r2,12(r16)
  802bb0:	103fd51e 	bne	r2,zero,802b08 <__reset+0xff801b08>
  802bb4:	003ff606 	br	802b90 <__reset+0xff801b90>
  802bb8:	81400417 	ldw	r5,16(r16)
  802bbc:	8809883a 	mov	r4,r17
  802bc0:	08021a80 	call	8021a8 <_free_r>
  802bc4:	003fdd06 	br	802b3c <__reset+0xff801b3c>
  802bc8:	04bfffc4 	movi	r18,-1
  802bcc:	003fd806 	br	802b30 <__reset+0xff801b30>

00802bd0 <fclose>:
  802bd0:	00802074 	movhi	r2,129
  802bd4:	10a07e04 	addi	r2,r2,-32264
  802bd8:	200b883a 	mov	r5,r4
  802bdc:	11000017 	ldw	r4,0(r2)
  802be0:	0802ad01 	jmpi	802ad0 <_fclose_r>

00802be4 <_fstat_r>:
  802be4:	defffd04 	addi	sp,sp,-12
  802be8:	dc000015 	stw	r16,0(sp)
  802bec:	04002074 	movhi	r16,129
  802bf0:	dc400115 	stw	r17,4(sp)
  802bf4:	84209004 	addi	r16,r16,-32192
  802bf8:	2023883a 	mov	r17,r4
  802bfc:	2809883a 	mov	r4,r5
  802c00:	300b883a 	mov	r5,r6
  802c04:	dfc00215 	stw	ra,8(sp)
  802c08:	80000015 	stw	zero,0(r16)
  802c0c:	0802f140 	call	802f14 <fstat>
  802c10:	00ffffc4 	movi	r3,-1
  802c14:	10c00526 	beq	r2,r3,802c2c <_fstat_r+0x48>
  802c18:	dfc00217 	ldw	ra,8(sp)
  802c1c:	dc400117 	ldw	r17,4(sp)
  802c20:	dc000017 	ldw	r16,0(sp)
  802c24:	dec00304 	addi	sp,sp,12
  802c28:	f800283a 	ret
  802c2c:	80c00017 	ldw	r3,0(r16)
  802c30:	183ff926 	beq	r3,zero,802c18 <__reset+0xff801c18>
  802c34:	88c00015 	stw	r3,0(r17)
  802c38:	003ff706 	br	802c18 <__reset+0xff801c18>

00802c3c <_isatty_r>:
  802c3c:	defffd04 	addi	sp,sp,-12
  802c40:	dc000015 	stw	r16,0(sp)
  802c44:	04002074 	movhi	r16,129
  802c48:	dc400115 	stw	r17,4(sp)
  802c4c:	84209004 	addi	r16,r16,-32192
  802c50:	2023883a 	mov	r17,r4
  802c54:	2809883a 	mov	r4,r5
  802c58:	dfc00215 	stw	ra,8(sp)
  802c5c:	80000015 	stw	zero,0(r16)
  802c60:	080301c0 	call	80301c <isatty>
  802c64:	00ffffc4 	movi	r3,-1
  802c68:	10c00526 	beq	r2,r3,802c80 <_isatty_r+0x44>
  802c6c:	dfc00217 	ldw	ra,8(sp)
  802c70:	dc400117 	ldw	r17,4(sp)
  802c74:	dc000017 	ldw	r16,0(sp)
  802c78:	dec00304 	addi	sp,sp,12
  802c7c:	f800283a 	ret
  802c80:	80c00017 	ldw	r3,0(r16)
  802c84:	183ff926 	beq	r3,zero,802c6c <__reset+0xff801c6c>
  802c88:	88c00015 	stw	r3,0(r17)
  802c8c:	003ff706 	br	802c6c <__reset+0xff801c6c>

00802c90 <_lseek_r>:
  802c90:	defffd04 	addi	sp,sp,-12
  802c94:	dc000015 	stw	r16,0(sp)
  802c98:	04002074 	movhi	r16,129
  802c9c:	dc400115 	stw	r17,4(sp)
  802ca0:	84209004 	addi	r16,r16,-32192
  802ca4:	2023883a 	mov	r17,r4
  802ca8:	2809883a 	mov	r4,r5
  802cac:	300b883a 	mov	r5,r6
  802cb0:	380d883a 	mov	r6,r7
  802cb4:	dfc00215 	stw	ra,8(sp)
  802cb8:	80000015 	stw	zero,0(r16)
  802cbc:	08031180 	call	803118 <lseek>
  802cc0:	00ffffc4 	movi	r3,-1
  802cc4:	10c00526 	beq	r2,r3,802cdc <_lseek_r+0x4c>
  802cc8:	dfc00217 	ldw	ra,8(sp)
  802ccc:	dc400117 	ldw	r17,4(sp)
  802cd0:	dc000017 	ldw	r16,0(sp)
  802cd4:	dec00304 	addi	sp,sp,12
  802cd8:	f800283a 	ret
  802cdc:	80c00017 	ldw	r3,0(r16)
  802ce0:	183ff926 	beq	r3,zero,802cc8 <__reset+0xff801cc8>
  802ce4:	88c00015 	stw	r3,0(r17)
  802ce8:	003ff706 	br	802cc8 <__reset+0xff801cc8>

00802cec <_read_r>:
  802cec:	defffd04 	addi	sp,sp,-12
  802cf0:	dc000015 	stw	r16,0(sp)
  802cf4:	04002074 	movhi	r16,129
  802cf8:	dc400115 	stw	r17,4(sp)
  802cfc:	84209004 	addi	r16,r16,-32192
  802d00:	2023883a 	mov	r17,r4
  802d04:	2809883a 	mov	r4,r5
  802d08:	300b883a 	mov	r5,r6
  802d0c:	380d883a 	mov	r6,r7
  802d10:	dfc00215 	stw	ra,8(sp)
  802d14:	80000015 	stw	zero,0(r16)
  802d18:	08032fc0 	call	8032fc <read>
  802d1c:	00ffffc4 	movi	r3,-1
  802d20:	10c00526 	beq	r2,r3,802d38 <_read_r+0x4c>
  802d24:	dfc00217 	ldw	ra,8(sp)
  802d28:	dc400117 	ldw	r17,4(sp)
  802d2c:	dc000017 	ldw	r16,0(sp)
  802d30:	dec00304 	addi	sp,sp,12
  802d34:	f800283a 	ret
  802d38:	80c00017 	ldw	r3,0(r16)
  802d3c:	183ff926 	beq	r3,zero,802d24 <__reset+0xff801d24>
  802d40:	88c00015 	stw	r3,0(r17)
  802d44:	003ff706 	br	802d24 <__reset+0xff801d24>

00802d48 <__mulsi3>:
  802d48:	0005883a 	mov	r2,zero
  802d4c:	20000726 	beq	r4,zero,802d6c <__mulsi3+0x24>
  802d50:	20c0004c 	andi	r3,r4,1
  802d54:	2008d07a 	srli	r4,r4,1
  802d58:	18000126 	beq	r3,zero,802d60 <__mulsi3+0x18>
  802d5c:	1145883a 	add	r2,r2,r5
  802d60:	294b883a 	add	r5,r5,r5
  802d64:	203ffa1e 	bne	r4,zero,802d50 <__reset+0xff801d50>
  802d68:	f800283a 	ret
  802d6c:	f800283a 	ret

00802d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802d70:	defffe04 	addi	sp,sp,-8
  802d74:	dfc00115 	stw	ra,4(sp)
  802d78:	df000015 	stw	fp,0(sp)
  802d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802d80:	00802074 	movhi	r2,129
  802d84:	10a08604 	addi	r2,r2,-32232
  802d88:	10800017 	ldw	r2,0(r2)
  802d8c:	10000526 	beq	r2,zero,802da4 <alt_get_errno+0x34>
  802d90:	00802074 	movhi	r2,129
  802d94:	10a08604 	addi	r2,r2,-32232
  802d98:	10800017 	ldw	r2,0(r2)
  802d9c:	103ee83a 	callr	r2
  802da0:	00000206 	br	802dac <alt_get_errno+0x3c>
  802da4:	00802074 	movhi	r2,129
  802da8:	10a09004 	addi	r2,r2,-32192
}
  802dac:	e037883a 	mov	sp,fp
  802db0:	dfc00117 	ldw	ra,4(sp)
  802db4:	df000017 	ldw	fp,0(sp)
  802db8:	dec00204 	addi	sp,sp,8
  802dbc:	f800283a 	ret

00802dc0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802dc0:	defffb04 	addi	sp,sp,-20
  802dc4:	dfc00415 	stw	ra,16(sp)
  802dc8:	df000315 	stw	fp,12(sp)
  802dcc:	df000304 	addi	fp,sp,12
  802dd0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802dd4:	e0bfff17 	ldw	r2,-4(fp)
  802dd8:	10000816 	blt	r2,zero,802dfc <close+0x3c>
  802ddc:	e13fff17 	ldw	r4,-4(fp)
  802de0:	01400304 	movi	r5,12
  802de4:	0802d480 	call	802d48 <__mulsi3>
  802de8:	1007883a 	mov	r3,r2
  802dec:	00802034 	movhi	r2,128
  802df0:	109bd204 	addi	r2,r2,28488
  802df4:	1885883a 	add	r2,r3,r2
  802df8:	00000106 	br	802e00 <close+0x40>
  802dfc:	0005883a 	mov	r2,zero
  802e00:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802e04:	e0bffd17 	ldw	r2,-12(fp)
  802e08:	10001926 	beq	r2,zero,802e70 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802e0c:	e0bffd17 	ldw	r2,-12(fp)
  802e10:	10800017 	ldw	r2,0(r2)
  802e14:	10800417 	ldw	r2,16(r2)
  802e18:	10000626 	beq	r2,zero,802e34 <close+0x74>
  802e1c:	e0bffd17 	ldw	r2,-12(fp)
  802e20:	10800017 	ldw	r2,0(r2)
  802e24:	10800417 	ldw	r2,16(r2)
  802e28:	e13ffd17 	ldw	r4,-12(fp)
  802e2c:	103ee83a 	callr	r2
  802e30:	00000106 	br	802e38 <close+0x78>
  802e34:	0005883a 	mov	r2,zero
  802e38:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802e3c:	e13fff17 	ldw	r4,-4(fp)
  802e40:	08034000 	call	803400 <alt_release_fd>
    if (rval < 0)
  802e44:	e0bffe17 	ldw	r2,-8(fp)
  802e48:	1000070e 	bge	r2,zero,802e68 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  802e4c:	0802d700 	call	802d70 <alt_get_errno>
  802e50:	1007883a 	mov	r3,r2
  802e54:	e0bffe17 	ldw	r2,-8(fp)
  802e58:	0085c83a 	sub	r2,zero,r2
  802e5c:	18800015 	stw	r2,0(r3)
      return -1;
  802e60:	00bfffc4 	movi	r2,-1
  802e64:	00000706 	br	802e84 <close+0xc4>
    }
    return 0;
  802e68:	0005883a 	mov	r2,zero
  802e6c:	00000506 	br	802e84 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802e70:	0802d700 	call	802d70 <alt_get_errno>
  802e74:	1007883a 	mov	r3,r2
  802e78:	00801444 	movi	r2,81
  802e7c:	18800015 	stw	r2,0(r3)
    return -1;
  802e80:	00bfffc4 	movi	r2,-1
  }
}
  802e84:	e037883a 	mov	sp,fp
  802e88:	dfc00117 	ldw	ra,4(sp)
  802e8c:	df000017 	ldw	fp,0(sp)
  802e90:	dec00204 	addi	sp,sp,8
  802e94:	f800283a 	ret

00802e98 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802e98:	defffc04 	addi	sp,sp,-16
  802e9c:	df000315 	stw	fp,12(sp)
  802ea0:	df000304 	addi	fp,sp,12
  802ea4:	e13ffd15 	stw	r4,-12(fp)
  802ea8:	e17ffe15 	stw	r5,-8(fp)
  802eac:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802eb0:	e0bfff17 	ldw	r2,-4(fp)
}
  802eb4:	e037883a 	mov	sp,fp
  802eb8:	df000017 	ldw	fp,0(sp)
  802ebc:	dec00104 	addi	sp,sp,4
  802ec0:	f800283a 	ret

00802ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802ec4:	defffe04 	addi	sp,sp,-8
  802ec8:	dfc00115 	stw	ra,4(sp)
  802ecc:	df000015 	stw	fp,0(sp)
  802ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802ed4:	00802074 	movhi	r2,129
  802ed8:	10a08604 	addi	r2,r2,-32232
  802edc:	10800017 	ldw	r2,0(r2)
  802ee0:	10000526 	beq	r2,zero,802ef8 <alt_get_errno+0x34>
  802ee4:	00802074 	movhi	r2,129
  802ee8:	10a08604 	addi	r2,r2,-32232
  802eec:	10800017 	ldw	r2,0(r2)
  802ef0:	103ee83a 	callr	r2
  802ef4:	00000206 	br	802f00 <alt_get_errno+0x3c>
  802ef8:	00802074 	movhi	r2,129
  802efc:	10a09004 	addi	r2,r2,-32192
}
  802f00:	e037883a 	mov	sp,fp
  802f04:	dfc00117 	ldw	ra,4(sp)
  802f08:	df000017 	ldw	fp,0(sp)
  802f0c:	dec00204 	addi	sp,sp,8
  802f10:	f800283a 	ret

00802f14 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  802f14:	defffb04 	addi	sp,sp,-20
  802f18:	dfc00415 	stw	ra,16(sp)
  802f1c:	df000315 	stw	fp,12(sp)
  802f20:	df000304 	addi	fp,sp,12
  802f24:	e13ffe15 	stw	r4,-8(fp)
  802f28:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802f2c:	e0bffe17 	ldw	r2,-8(fp)
  802f30:	10000816 	blt	r2,zero,802f54 <fstat+0x40>
  802f34:	e13ffe17 	ldw	r4,-8(fp)
  802f38:	01400304 	movi	r5,12
  802f3c:	0802d480 	call	802d48 <__mulsi3>
  802f40:	1007883a 	mov	r3,r2
  802f44:	00802034 	movhi	r2,128
  802f48:	109bd204 	addi	r2,r2,28488
  802f4c:	1885883a 	add	r2,r3,r2
  802f50:	00000106 	br	802f58 <fstat+0x44>
  802f54:	0005883a 	mov	r2,zero
  802f58:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  802f5c:	e0bffd17 	ldw	r2,-12(fp)
  802f60:	10001026 	beq	r2,zero,802fa4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  802f64:	e0bffd17 	ldw	r2,-12(fp)
  802f68:	10800017 	ldw	r2,0(r2)
  802f6c:	10800817 	ldw	r2,32(r2)
  802f70:	10000726 	beq	r2,zero,802f90 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  802f74:	e0bffd17 	ldw	r2,-12(fp)
  802f78:	10800017 	ldw	r2,0(r2)
  802f7c:	10800817 	ldw	r2,32(r2)
  802f80:	e13ffd17 	ldw	r4,-12(fp)
  802f84:	e17fff17 	ldw	r5,-4(fp)
  802f88:	103ee83a 	callr	r2
  802f8c:	00000a06 	br	802fb8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  802f90:	e0bfff17 	ldw	r2,-4(fp)
  802f94:	00c80004 	movi	r3,8192
  802f98:	10c00115 	stw	r3,4(r2)
      return 0;
  802f9c:	0005883a 	mov	r2,zero
  802fa0:	00000506 	br	802fb8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802fa4:	0802ec40 	call	802ec4 <alt_get_errno>
  802fa8:	1007883a 	mov	r3,r2
  802fac:	00801444 	movi	r2,81
  802fb0:	18800015 	stw	r2,0(r3)
    return -1;
  802fb4:	00bfffc4 	movi	r2,-1
  }
}
  802fb8:	e037883a 	mov	sp,fp
  802fbc:	dfc00117 	ldw	ra,4(sp)
  802fc0:	df000017 	ldw	fp,0(sp)
  802fc4:	dec00204 	addi	sp,sp,8
  802fc8:	f800283a 	ret

00802fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802fcc:	defffe04 	addi	sp,sp,-8
  802fd0:	dfc00115 	stw	ra,4(sp)
  802fd4:	df000015 	stw	fp,0(sp)
  802fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802fdc:	00802074 	movhi	r2,129
  802fe0:	10a08604 	addi	r2,r2,-32232
  802fe4:	10800017 	ldw	r2,0(r2)
  802fe8:	10000526 	beq	r2,zero,803000 <alt_get_errno+0x34>
  802fec:	00802074 	movhi	r2,129
  802ff0:	10a08604 	addi	r2,r2,-32232
  802ff4:	10800017 	ldw	r2,0(r2)
  802ff8:	103ee83a 	callr	r2
  802ffc:	00000206 	br	803008 <alt_get_errno+0x3c>
  803000:	00802074 	movhi	r2,129
  803004:	10a09004 	addi	r2,r2,-32192
}
  803008:	e037883a 	mov	sp,fp
  80300c:	dfc00117 	ldw	ra,4(sp)
  803010:	df000017 	ldw	fp,0(sp)
  803014:	dec00204 	addi	sp,sp,8
  803018:	f800283a 	ret

0080301c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80301c:	deffed04 	addi	sp,sp,-76
  803020:	dfc01215 	stw	ra,72(sp)
  803024:	df001115 	stw	fp,68(sp)
  803028:	df001104 	addi	fp,sp,68
  80302c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803030:	e0bfff17 	ldw	r2,-4(fp)
  803034:	10000816 	blt	r2,zero,803058 <isatty+0x3c>
  803038:	e13fff17 	ldw	r4,-4(fp)
  80303c:	01400304 	movi	r5,12
  803040:	0802d480 	call	802d48 <__mulsi3>
  803044:	1007883a 	mov	r3,r2
  803048:	00802034 	movhi	r2,128
  80304c:	109bd204 	addi	r2,r2,28488
  803050:	1885883a 	add	r2,r3,r2
  803054:	00000106 	br	80305c <isatty+0x40>
  803058:	0005883a 	mov	r2,zero
  80305c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803060:	e0bfef17 	ldw	r2,-68(fp)
  803064:	10000e26 	beq	r2,zero,8030a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  803068:	e0bfef17 	ldw	r2,-68(fp)
  80306c:	10800017 	ldw	r2,0(r2)
  803070:	10800817 	ldw	r2,32(r2)
  803074:	1000021e 	bne	r2,zero,803080 <isatty+0x64>
    {
      return 1;
  803078:	00800044 	movi	r2,1
  80307c:	00000d06 	br	8030b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803080:	e0bff004 	addi	r2,fp,-64
  803084:	e13fff17 	ldw	r4,-4(fp)
  803088:	100b883a 	mov	r5,r2
  80308c:	0802f140 	call	802f14 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803090:	e0bff117 	ldw	r2,-60(fp)
  803094:	10880020 	cmpeqi	r2,r2,8192
  803098:	10803fcc 	andi	r2,r2,255
  80309c:	00000506 	br	8030b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8030a0:	0802fcc0 	call	802fcc <alt_get_errno>
  8030a4:	1007883a 	mov	r3,r2
  8030a8:	00801444 	movi	r2,81
  8030ac:	18800015 	stw	r2,0(r3)
    return 0;
  8030b0:	0005883a 	mov	r2,zero
  }
}
  8030b4:	e037883a 	mov	sp,fp
  8030b8:	dfc00117 	ldw	ra,4(sp)
  8030bc:	df000017 	ldw	fp,0(sp)
  8030c0:	dec00204 	addi	sp,sp,8
  8030c4:	f800283a 	ret

008030c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030c8:	defffe04 	addi	sp,sp,-8
  8030cc:	dfc00115 	stw	ra,4(sp)
  8030d0:	df000015 	stw	fp,0(sp)
  8030d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8030d8:	00802074 	movhi	r2,129
  8030dc:	10a08604 	addi	r2,r2,-32232
  8030e0:	10800017 	ldw	r2,0(r2)
  8030e4:	10000526 	beq	r2,zero,8030fc <alt_get_errno+0x34>
  8030e8:	00802074 	movhi	r2,129
  8030ec:	10a08604 	addi	r2,r2,-32232
  8030f0:	10800017 	ldw	r2,0(r2)
  8030f4:	103ee83a 	callr	r2
  8030f8:	00000206 	br	803104 <alt_get_errno+0x3c>
  8030fc:	00802074 	movhi	r2,129
  803100:	10a09004 	addi	r2,r2,-32192
}
  803104:	e037883a 	mov	sp,fp
  803108:	dfc00117 	ldw	ra,4(sp)
  80310c:	df000017 	ldw	fp,0(sp)
  803110:	dec00204 	addi	sp,sp,8
  803114:	f800283a 	ret

00803118 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803118:	defff904 	addi	sp,sp,-28
  80311c:	dfc00615 	stw	ra,24(sp)
  803120:	df000515 	stw	fp,20(sp)
  803124:	df000504 	addi	fp,sp,20
  803128:	e13ffd15 	stw	r4,-12(fp)
  80312c:	e17ffe15 	stw	r5,-8(fp)
  803130:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803134:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803138:	e0bffd17 	ldw	r2,-12(fp)
  80313c:	10000816 	blt	r2,zero,803160 <lseek+0x48>
  803140:	e13ffd17 	ldw	r4,-12(fp)
  803144:	01400304 	movi	r5,12
  803148:	0802d480 	call	802d48 <__mulsi3>
  80314c:	1007883a 	mov	r3,r2
  803150:	00802034 	movhi	r2,128
  803154:	109bd204 	addi	r2,r2,28488
  803158:	1885883a 	add	r2,r3,r2
  80315c:	00000106 	br	803164 <lseek+0x4c>
  803160:	0005883a 	mov	r2,zero
  803164:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803168:	e0bffc17 	ldw	r2,-16(fp)
  80316c:	10001026 	beq	r2,zero,8031b0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803170:	e0bffc17 	ldw	r2,-16(fp)
  803174:	10800017 	ldw	r2,0(r2)
  803178:	10800717 	ldw	r2,28(r2)
  80317c:	10000926 	beq	r2,zero,8031a4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	10800017 	ldw	r2,0(r2)
  803188:	10800717 	ldw	r2,28(r2)
  80318c:	e13ffc17 	ldw	r4,-16(fp)
  803190:	e17ffe17 	ldw	r5,-8(fp)
  803194:	e1bfff17 	ldw	r6,-4(fp)
  803198:	103ee83a 	callr	r2
  80319c:	e0bffb15 	stw	r2,-20(fp)
  8031a0:	00000506 	br	8031b8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8031a4:	00bfde84 	movi	r2,-134
  8031a8:	e0bffb15 	stw	r2,-20(fp)
  8031ac:	00000206 	br	8031b8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8031b0:	00bfebc4 	movi	r2,-81
  8031b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8031b8:	e0bffb17 	ldw	r2,-20(fp)
  8031bc:	1000070e 	bge	r2,zero,8031dc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  8031c0:	08030c80 	call	8030c8 <alt_get_errno>
  8031c4:	1007883a 	mov	r3,r2
  8031c8:	e0bffb17 	ldw	r2,-20(fp)
  8031cc:	0085c83a 	sub	r2,zero,r2
  8031d0:	18800015 	stw	r2,0(r3)
    rc = -1;
  8031d4:	00bfffc4 	movi	r2,-1
  8031d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8031dc:	e0bffb17 	ldw	r2,-20(fp)
}
  8031e0:	e037883a 	mov	sp,fp
  8031e4:	dfc00117 	ldw	ra,4(sp)
  8031e8:	df000017 	ldw	fp,0(sp)
  8031ec:	dec00204 	addi	sp,sp,8
  8031f0:	f800283a 	ret

008031f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8031f4:	defffd04 	addi	sp,sp,-12
  8031f8:	dfc00215 	stw	ra,8(sp)
  8031fc:	df000115 	stw	fp,4(sp)
  803200:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803204:	0009883a 	mov	r4,zero
  803208:	08036b80 	call	8036b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80320c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803210:	08036ec0 	call	8036ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803214:	01002034 	movhi	r4,128
  803218:	2119b404 	addi	r4,r4,26320
  80321c:	01402034 	movhi	r5,128
  803220:	2959b404 	addi	r5,r5,26320
  803224:	01802034 	movhi	r6,128
  803228:	3199b404 	addi	r6,r6,26320
  80322c:	08059b00 	call	8059b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803230:	08054900 	call	805490 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803234:	01002034 	movhi	r4,128
  803238:	21153b04 	addi	r4,r4,21740
  80323c:	08063040 	call	806304 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803240:	d1201417 	ldw	r4,-32688(gp)
  803244:	d0e01517 	ldw	r3,-32684(gp)
  803248:	d0a01617 	ldw	r2,-32680(gp)
  80324c:	180b883a 	mov	r5,r3
  803250:	100d883a 	mov	r6,r2
  803254:	08001f40 	call	8001f4 <main>
  803258:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80325c:	01000044 	movi	r4,1
  803260:	0802dc00 	call	802dc0 <close>
  exit (result);
  803264:	e13fff17 	ldw	r4,-4(fp)
  803268:	08063180 	call	806318 <exit>

0080326c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80326c:	defffe04 	addi	sp,sp,-8
  803270:	df000115 	stw	fp,4(sp)
  803274:	df000104 	addi	fp,sp,4
  803278:	e13fff15 	stw	r4,-4(fp)
}
  80327c:	e037883a 	mov	sp,fp
  803280:	df000017 	ldw	fp,0(sp)
  803284:	dec00104 	addi	sp,sp,4
  803288:	f800283a 	ret

0080328c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80328c:	defffe04 	addi	sp,sp,-8
  803290:	df000115 	stw	fp,4(sp)
  803294:	df000104 	addi	fp,sp,4
  803298:	e13fff15 	stw	r4,-4(fp)
}
  80329c:	e037883a 	mov	sp,fp
  8032a0:	df000017 	ldw	fp,0(sp)
  8032a4:	dec00104 	addi	sp,sp,4
  8032a8:	f800283a 	ret

008032ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8032ac:	defffe04 	addi	sp,sp,-8
  8032b0:	dfc00115 	stw	ra,4(sp)
  8032b4:	df000015 	stw	fp,0(sp)
  8032b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8032bc:	00802074 	movhi	r2,129
  8032c0:	10a08604 	addi	r2,r2,-32232
  8032c4:	10800017 	ldw	r2,0(r2)
  8032c8:	10000526 	beq	r2,zero,8032e0 <alt_get_errno+0x34>
  8032cc:	00802074 	movhi	r2,129
  8032d0:	10a08604 	addi	r2,r2,-32232
  8032d4:	10800017 	ldw	r2,0(r2)
  8032d8:	103ee83a 	callr	r2
  8032dc:	00000206 	br	8032e8 <alt_get_errno+0x3c>
  8032e0:	00802074 	movhi	r2,129
  8032e4:	10a09004 	addi	r2,r2,-32192
}
  8032e8:	e037883a 	mov	sp,fp
  8032ec:	dfc00117 	ldw	ra,4(sp)
  8032f0:	df000017 	ldw	fp,0(sp)
  8032f4:	dec00204 	addi	sp,sp,8
  8032f8:	f800283a 	ret

008032fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8032fc:	defff904 	addi	sp,sp,-28
  803300:	dfc00615 	stw	ra,24(sp)
  803304:	df000515 	stw	fp,20(sp)
  803308:	df000504 	addi	fp,sp,20
  80330c:	e13ffd15 	stw	r4,-12(fp)
  803310:	e17ffe15 	stw	r5,-8(fp)
  803314:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803318:	e0bffd17 	ldw	r2,-12(fp)
  80331c:	10000816 	blt	r2,zero,803340 <read+0x44>
  803320:	e13ffd17 	ldw	r4,-12(fp)
  803324:	01400304 	movi	r5,12
  803328:	0802d480 	call	802d48 <__mulsi3>
  80332c:	1007883a 	mov	r3,r2
  803330:	00802034 	movhi	r2,128
  803334:	109bd204 	addi	r2,r2,28488
  803338:	1885883a 	add	r2,r3,r2
  80333c:	00000106 	br	803344 <read+0x48>
  803340:	0005883a 	mov	r2,zero
  803344:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803348:	e0bffb17 	ldw	r2,-20(fp)
  80334c:	10002226 	beq	r2,zero,8033d8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803350:	e0bffb17 	ldw	r2,-20(fp)
  803354:	10800217 	ldw	r2,8(r2)
  803358:	108000cc 	andi	r2,r2,3
  80335c:	10800060 	cmpeqi	r2,r2,1
  803360:	1000181e 	bne	r2,zero,8033c4 <read+0xc8>
        (fd->dev->read))
  803364:	e0bffb17 	ldw	r2,-20(fp)
  803368:	10800017 	ldw	r2,0(r2)
  80336c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803370:	10001426 	beq	r2,zero,8033c4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803374:	e0bffb17 	ldw	r2,-20(fp)
  803378:	10800017 	ldw	r2,0(r2)
  80337c:	10800517 	ldw	r2,20(r2)
  803380:	e0ffff17 	ldw	r3,-4(fp)
  803384:	e13ffb17 	ldw	r4,-20(fp)
  803388:	e17ffe17 	ldw	r5,-8(fp)
  80338c:	180d883a 	mov	r6,r3
  803390:	103ee83a 	callr	r2
  803394:	e0bffc15 	stw	r2,-16(fp)
  803398:	e0bffc17 	ldw	r2,-16(fp)
  80339c:	1000070e 	bge	r2,zero,8033bc <read+0xc0>
        {
          ALT_ERRNO = -rval;
  8033a0:	08032ac0 	call	8032ac <alt_get_errno>
  8033a4:	1007883a 	mov	r3,r2
  8033a8:	e0bffc17 	ldw	r2,-16(fp)
  8033ac:	0085c83a 	sub	r2,zero,r2
  8033b0:	18800015 	stw	r2,0(r3)
          return -1;
  8033b4:	00bfffc4 	movi	r2,-1
  8033b8:	00000c06 	br	8033ec <read+0xf0>
        }
        return rval;
  8033bc:	e0bffc17 	ldw	r2,-16(fp)
  8033c0:	00000a06 	br	8033ec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8033c4:	08032ac0 	call	8032ac <alt_get_errno>
  8033c8:	1007883a 	mov	r3,r2
  8033cc:	00800344 	movi	r2,13
  8033d0:	18800015 	stw	r2,0(r3)
  8033d4:	00000406 	br	8033e8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8033d8:	08032ac0 	call	8032ac <alt_get_errno>
  8033dc:	1007883a 	mov	r3,r2
  8033e0:	00801444 	movi	r2,81
  8033e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8033e8:	00bfffc4 	movi	r2,-1
}
  8033ec:	e037883a 	mov	sp,fp
  8033f0:	dfc00117 	ldw	ra,4(sp)
  8033f4:	df000017 	ldw	fp,0(sp)
  8033f8:	dec00204 	addi	sp,sp,8
  8033fc:	f800283a 	ret

00803400 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803400:	defffc04 	addi	sp,sp,-16
  803404:	dfc00315 	stw	ra,12(sp)
  803408:	df000215 	stw	fp,8(sp)
  80340c:	dc000115 	stw	r16,4(sp)
  803410:	df000204 	addi	fp,sp,8
  803414:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  803418:	e0bffe17 	ldw	r2,-8(fp)
  80341c:	108000d0 	cmplti	r2,r2,3
  803420:	1000111e 	bne	r2,zero,803468 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  803424:	04002034 	movhi	r16,128
  803428:	841bd204 	addi	r16,r16,28488
  80342c:	e0bffe17 	ldw	r2,-8(fp)
  803430:	1009883a 	mov	r4,r2
  803434:	01400304 	movi	r5,12
  803438:	0802d480 	call	802d48 <__mulsi3>
  80343c:	8085883a 	add	r2,r16,r2
  803440:	10800204 	addi	r2,r2,8
  803444:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803448:	04002034 	movhi	r16,128
  80344c:	841bd204 	addi	r16,r16,28488
  803450:	e0bffe17 	ldw	r2,-8(fp)
  803454:	1009883a 	mov	r4,r2
  803458:	01400304 	movi	r5,12
  80345c:	0802d480 	call	802d48 <__mulsi3>
  803460:	8085883a 	add	r2,r16,r2
  803464:	10000015 	stw	zero,0(r2)
  }
}
  803468:	e6ffff04 	addi	sp,fp,-4
  80346c:	dfc00217 	ldw	ra,8(sp)
  803470:	df000117 	ldw	fp,4(sp)
  803474:	dc000017 	ldw	r16,0(sp)
  803478:	dec00304 	addi	sp,sp,12
  80347c:	f800283a 	ret

00803480 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803480:	defff904 	addi	sp,sp,-28
  803484:	df000615 	stw	fp,24(sp)
  803488:	df000604 	addi	fp,sp,24
  80348c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803490:	0005303a 	rdctl	r2,status
  803494:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803498:	e0fffc17 	ldw	r3,-16(fp)
  80349c:	00bfff84 	movi	r2,-2
  8034a0:	1884703a 	and	r2,r3,r2
  8034a4:	1001703a 	wrctl	status,r2
  
  return context;
  8034a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8034ac:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8034b0:	d0a00a17 	ldw	r2,-32728(gp)
  8034b4:	10c000c4 	addi	r3,r2,3
  8034b8:	00bfff04 	movi	r2,-4
  8034bc:	1884703a 	and	r2,r3,r2
  8034c0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8034c4:	d0e00a17 	ldw	r3,-32728(gp)
  8034c8:	e0bfff17 	ldw	r2,-4(fp)
  8034cc:	1887883a 	add	r3,r3,r2
  8034d0:	00804034 	movhi	r2,256
  8034d4:	10800004 	addi	r2,r2,0
  8034d8:	10c0062e 	bgeu	r2,r3,8034f4 <sbrk+0x74>
  8034dc:	e0bffa17 	ldw	r2,-24(fp)
  8034e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8034e4:	e0bffd17 	ldw	r2,-12(fp)
  8034e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8034ec:	00bfffc4 	movi	r2,-1
  8034f0:	00000b06 	br	803520 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8034f4:	d0a00a17 	ldw	r2,-32728(gp)
  8034f8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  8034fc:	d0e00a17 	ldw	r3,-32728(gp)
  803500:	e0bfff17 	ldw	r2,-4(fp)
  803504:	1885883a 	add	r2,r3,r2
  803508:	d0a00a15 	stw	r2,-32728(gp)
  80350c:	e0bffa17 	ldw	r2,-24(fp)
  803510:	e0bffe15 	stw	r2,-8(fp)
  803514:	e0bffe17 	ldw	r2,-8(fp)
  803518:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80351c:	e0bffb17 	ldw	r2,-20(fp)
} 
  803520:	e037883a 	mov	sp,fp
  803524:	df000017 	ldw	fp,0(sp)
  803528:	dec00104 	addi	sp,sp,4
  80352c:	f800283a 	ret

00803530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803530:	defffe04 	addi	sp,sp,-8
  803534:	dfc00115 	stw	ra,4(sp)
  803538:	df000015 	stw	fp,0(sp)
  80353c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803540:	00802074 	movhi	r2,129
  803544:	10a08604 	addi	r2,r2,-32232
  803548:	10800017 	ldw	r2,0(r2)
  80354c:	10000526 	beq	r2,zero,803564 <alt_get_errno+0x34>
  803550:	00802074 	movhi	r2,129
  803554:	10a08604 	addi	r2,r2,-32232
  803558:	10800017 	ldw	r2,0(r2)
  80355c:	103ee83a 	callr	r2
  803560:	00000206 	br	80356c <alt_get_errno+0x3c>
  803564:	00802074 	movhi	r2,129
  803568:	10a09004 	addi	r2,r2,-32192
}
  80356c:	e037883a 	mov	sp,fp
  803570:	dfc00117 	ldw	ra,4(sp)
  803574:	df000017 	ldw	fp,0(sp)
  803578:	dec00204 	addi	sp,sp,8
  80357c:	f800283a 	ret

00803580 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803580:	defff904 	addi	sp,sp,-28
  803584:	dfc00615 	stw	ra,24(sp)
  803588:	df000515 	stw	fp,20(sp)
  80358c:	df000504 	addi	fp,sp,20
  803590:	e13ffd15 	stw	r4,-12(fp)
  803594:	e17ffe15 	stw	r5,-8(fp)
  803598:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80359c:	e0bffd17 	ldw	r2,-12(fp)
  8035a0:	10000816 	blt	r2,zero,8035c4 <write+0x44>
  8035a4:	e13ffd17 	ldw	r4,-12(fp)
  8035a8:	01400304 	movi	r5,12
  8035ac:	0802d480 	call	802d48 <__mulsi3>
  8035b0:	1007883a 	mov	r3,r2
  8035b4:	00802034 	movhi	r2,128
  8035b8:	109bd204 	addi	r2,r2,28488
  8035bc:	1885883a 	add	r2,r3,r2
  8035c0:	00000106 	br	8035c8 <write+0x48>
  8035c4:	0005883a 	mov	r2,zero
  8035c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8035cc:	e0bffb17 	ldw	r2,-20(fp)
  8035d0:	10002126 	beq	r2,zero,803658 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8035d4:	e0bffb17 	ldw	r2,-20(fp)
  8035d8:	10800217 	ldw	r2,8(r2)
  8035dc:	108000cc 	andi	r2,r2,3
  8035e0:	10001826 	beq	r2,zero,803644 <write+0xc4>
  8035e4:	e0bffb17 	ldw	r2,-20(fp)
  8035e8:	10800017 	ldw	r2,0(r2)
  8035ec:	10800617 	ldw	r2,24(r2)
  8035f0:	10001426 	beq	r2,zero,803644 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8035f4:	e0bffb17 	ldw	r2,-20(fp)
  8035f8:	10800017 	ldw	r2,0(r2)
  8035fc:	10800617 	ldw	r2,24(r2)
  803600:	e0ffff17 	ldw	r3,-4(fp)
  803604:	e13ffb17 	ldw	r4,-20(fp)
  803608:	e17ffe17 	ldw	r5,-8(fp)
  80360c:	180d883a 	mov	r6,r3
  803610:	103ee83a 	callr	r2
  803614:	e0bffc15 	stw	r2,-16(fp)
  803618:	e0bffc17 	ldw	r2,-16(fp)
  80361c:	1000070e 	bge	r2,zero,80363c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  803620:	08035300 	call	803530 <alt_get_errno>
  803624:	1007883a 	mov	r3,r2
  803628:	e0bffc17 	ldw	r2,-16(fp)
  80362c:	0085c83a 	sub	r2,zero,r2
  803630:	18800015 	stw	r2,0(r3)
        return -1;
  803634:	00bfffc4 	movi	r2,-1
  803638:	00000c06 	br	80366c <write+0xec>
      }
      return rval;
  80363c:	e0bffc17 	ldw	r2,-16(fp)
  803640:	00000a06 	br	80366c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803644:	08035300 	call	803530 <alt_get_errno>
  803648:	1007883a 	mov	r3,r2
  80364c:	00800344 	movi	r2,13
  803650:	18800015 	stw	r2,0(r3)
  803654:	00000406 	br	803668 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803658:	08035300 	call	803530 <alt_get_errno>
  80365c:	1007883a 	mov	r3,r2
  803660:	00801444 	movi	r2,81
  803664:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803668:	00bfffc4 	movi	r2,-1
}
  80366c:	e037883a 	mov	sp,fp
  803670:	dfc00117 	ldw	ra,4(sp)
  803674:	df000017 	ldw	fp,0(sp)
  803678:	dec00204 	addi	sp,sp,8
  80367c:	f800283a 	ret

00803680 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803680:	defffd04 	addi	sp,sp,-12
  803684:	dfc00215 	stw	ra,8(sp)
  803688:	df000115 	stw	fp,4(sp)
  80368c:	df000104 	addi	fp,sp,4
  803690:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803694:	e13fff17 	ldw	r4,-4(fp)
  803698:	01402074 	movhi	r5,129
  80369c:	29608304 	addi	r5,r5,-32244
  8036a0:	08053ec0 	call	8053ec <alt_dev_llist_insert>
}
  8036a4:	e037883a 	mov	sp,fp
  8036a8:	dfc00117 	ldw	ra,4(sp)
  8036ac:	df000017 	ldw	fp,0(sp)
  8036b0:	dec00204 	addi	sp,sp,8
  8036b4:	f800283a 	ret

008036b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8036b8:	defffd04 	addi	sp,sp,-12
  8036bc:	dfc00215 	stw	ra,8(sp)
  8036c0:	df000115 	stw	fp,4(sp)
  8036c4:	df000104 	addi	fp,sp,4
  8036c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8036cc:	0805e680 	call	805e68 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8036d0:	00800044 	movi	r2,1
  8036d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8036d8:	e037883a 	mov	sp,fp
  8036dc:	dfc00117 	ldw	ra,4(sp)
  8036e0:	df000017 	ldw	fp,0(sp)
  8036e4:	dec00204 	addi	sp,sp,8
  8036e8:	f800283a 	ret

008036ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8036ec:	defffe04 	addi	sp,sp,-8
  8036f0:	dfc00115 	stw	ra,4(sp)
  8036f4:	df000015 	stw	fp,0(sp)
  8036f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  8036fc:	01004034 	movhi	r4,256
  803700:	21080004 	addi	r4,r4,8192
  803704:	000b883a 	mov	r5,zero
  803708:	01800044 	movi	r6,1
  80370c:	01c0fa04 	movi	r7,1000
  803710:	0804ba80 	call	804ba8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
  803714:	01002034 	movhi	r4,128
  803718:	211c3c04 	addi	r4,r4,28912
  80371c:	000b883a 	mov	r5,zero
  803720:	000d883a 	mov	r6,zero
  803724:	080424c0 	call	80424c <altera_avalon_jtag_uart_init>
  803728:	01002034 	movhi	r4,128
  80372c:	211c3204 	addi	r4,r4,28872
  803730:	08036800 	call	803680 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  803734:	0001883a 	nop
    BEMICRO_MAX10_SERIAL_FLASH_CONTROLLER_INIT ( FLASH, flash);
  803738:	01002074 	movhi	r4,129
  80373c:	21204a04 	addi	r4,r4,-32472
  803740:	08037900 	call	803790 <alt_epcs_flash_init>
}
  803744:	e037883a 	mov	sp,fp
  803748:	dfc00117 	ldw	ra,4(sp)
  80374c:	df000017 	ldw	fp,0(sp)
  803750:	dec00204 	addi	sp,sp,8
  803754:	f800283a 	ret

00803758 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  803758:	defffd04 	addi	sp,sp,-12
  80375c:	dfc00215 	stw	ra,8(sp)
  803760:	df000115 	stw	fp,4(sp)
  803764:	df000104 	addi	fp,sp,4
  803768:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  80376c:	e13fff17 	ldw	r4,-4(fp)
  803770:	01402074 	movhi	r5,129
  803774:	29608804 	addi	r5,r5,-32224
  803778:	08053ec0 	call	8053ec <alt_dev_llist_insert>
}
  80377c:	e037883a 	mov	sp,fp
  803780:	dfc00117 	ldw	ra,4(sp)
  803784:	df000017 	ldw	fp,0(sp)
  803788:	dec00204 	addi	sp,sp,8
  80378c:	f800283a 	ret

00803790 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  803790:	defffc04 	addi	sp,sp,-16
  803794:	dfc00315 	stw	ra,12(sp)
  803798:	df000215 	stw	fp,8(sp)
  80379c:	df000204 	addi	fp,sp,8
  8037a0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  8037a4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  8037a8:	e13fff17 	ldw	r4,-4(fp)
  8037ac:	08037e40 	call	8037e4 <alt_epcs_flash_query>
  8037b0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  8037b4:	e0bffe17 	ldw	r2,-8(fp)
  8037b8:	1000041e 	bne	r2,zero,8037cc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  8037bc:	e0bfff17 	ldw	r2,-4(fp)
  8037c0:	1009883a 	mov	r4,r2
  8037c4:	08037580 	call	803758 <alt_flash_device_register>
  8037c8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  8037cc:	e0bffe17 	ldw	r2,-8(fp)
}
  8037d0:	e037883a 	mov	sp,fp
  8037d4:	dfc00117 	ldw	ra,4(sp)
  8037d8:	df000017 	ldw	fp,0(sp)
  8037dc:	dec00204 	addi	sp,sp,8
  8037e0:	f800283a 	ret

008037e4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  8037e4:	defffc04 	addi	sp,sp,-16
  8037e8:	dfc00315 	stw	ra,12(sp)
  8037ec:	df000215 	stw	fp,8(sp)
  8037f0:	df000204 	addi	fp,sp,8
  8037f4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  8037f8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  8037fc:	e0bfff17 	ldw	r2,-4(fp)
  803800:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  803804:	e0bfff17 	ldw	r2,-4(fp)
  803808:	10802e17 	ldw	r2,184(r2)
  80380c:	1009883a 	mov	r4,r2
  803810:	08050bc0 	call	8050bc <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  803814:	10c03fcc 	andi	r3,r2,255
  803818:	e0bfff17 	ldw	r2,-4(fp)
  80381c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  803820:	e0bfff17 	ldw	r2,-4(fp)
  803824:	10803017 	ldw	r2,192(r2)
  803828:	10800598 	cmpnei	r2,r2,22
  80382c:	10000a1e 	bne	r2,zero,803858 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  803830:	e0bfff17 	ldw	r2,-4(fp)
  803834:	00c02034 	movhi	r3,128
  803838:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  80383c:	e0bfff17 	ldw	r2,-4(fp)
  803840:	00c02004 	movi	r3,128
  803844:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  803848:	e0bfff17 	ldw	r2,-4(fp)
  80384c:	00c00074 	movhi	r3,1
  803850:	10c01015 	stw	r3,64(r2)
  803854:	00007406 	br	803a28 <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  803858:	e0bfff17 	ldw	r2,-4(fp)
  80385c:	10803017 	ldw	r2,192(r2)
  803860:	10800518 	cmpnei	r2,r2,20
  803864:	10000a1e 	bne	r2,zero,803890 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  803868:	e0bfff17 	ldw	r2,-4(fp)
  80386c:	00c00834 	movhi	r3,32
  803870:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  803874:	e0bfff17 	ldw	r2,-4(fp)
  803878:	00c00804 	movi	r3,32
  80387c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  803880:	e0bfff17 	ldw	r2,-4(fp)
  803884:	00c00074 	movhi	r3,1
  803888:	10c01015 	stw	r3,64(r2)
  80388c:	00006606 	br	803a28 <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  803890:	e0bfff17 	ldw	r2,-4(fp)
  803894:	10803017 	ldw	r2,192(r2)
  803898:	108004d8 	cmpnei	r2,r2,19
  80389c:	10000a1e 	bne	r2,zero,8038c8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  8038a0:	e0bfff17 	ldw	r2,-4(fp)
  8038a4:	00c00434 	movhi	r3,16
  8038a8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  8038ac:	e0bfff17 	ldw	r2,-4(fp)
  8038b0:	00c00404 	movi	r3,16
  8038b4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  8038b8:	e0bfff17 	ldw	r2,-4(fp)
  8038bc:	00c00074 	movhi	r3,1
  8038c0:	10c01015 	stw	r3,64(r2)
  8038c4:	00005806 	br	803a28 <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  8038c8:	e0bfff17 	ldw	r2,-4(fp)
  8038cc:	10803017 	ldw	r2,192(r2)
  8038d0:	10800498 	cmpnei	r2,r2,18
  8038d4:	10000a1e 	bne	r2,zero,803900 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  8038d8:	e0bfff17 	ldw	r2,-4(fp)
  8038dc:	00c00234 	movhi	r3,8
  8038e0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  8038e4:	e0bfff17 	ldw	r2,-4(fp)
  8038e8:	00c00204 	movi	r3,8
  8038ec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  8038f0:	e0bfff17 	ldw	r2,-4(fp)
  8038f4:	00c00074 	movhi	r3,1
  8038f8:	10c01015 	stw	r3,64(r2)
  8038fc:	00004a06 	br	803a28 <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  803900:	e0bfff17 	ldw	r2,-4(fp)
  803904:	10803017 	ldw	r2,192(r2)
  803908:	10800418 	cmpnei	r2,r2,16
  80390c:	10000a1e 	bne	r2,zero,803938 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  803910:	e0bfff17 	ldw	r2,-4(fp)
  803914:	00c000b4 	movhi	r3,2
  803918:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  80391c:	e0bfff17 	ldw	r2,-4(fp)
  803920:	00c00104 	movi	r3,4
  803924:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  803928:	e0bfff17 	ldw	r2,-4(fp)
  80392c:	00e00014 	movui	r3,32768
  803930:	10c01015 	stw	r3,64(r2)
  803934:	00003c06 	br	803a28 <alt_epcs_flash_query+0x244>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  803938:	e0bfff17 	ldw	r2,-4(fp)
  80393c:	10802e17 	ldw	r2,184(r2)
  803940:	1009883a 	mov	r4,r2
  803944:	08051240 	call	805124 <epcs_read_device_id>
  803948:	1007883a 	mov	r3,r2
  80394c:	e0bfff17 	ldw	r2,-4(fp)
  803950:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  803954:	e0bfff17 	ldw	r2,-4(fp)
  803958:	10c03017 	ldw	r3,192(r2)
  80395c:	00804034 	movhi	r2,256
  803960:	10bfffc4 	addi	r2,r2,-1
  803964:	1886703a 	and	r3,r3,r2
  803968:	00800874 	movhi	r2,33
  80396c:	10ae8604 	addi	r2,r2,-17896
  803970:	18800a1e 	bne	r3,r2,80399c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  803974:	e0bfff17 	ldw	r2,-4(fp)
  803978:	00c04034 	movhi	r3,256
  80397c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  803980:	e0bfff17 	ldw	r2,-4(fp)
  803984:	00c04004 	movi	r3,256
  803988:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  80398c:	e0bfff17 	ldw	r2,-4(fp)
  803990:	00c00074 	movhi	r3,1
  803994:	10c01015 	stw	r3,64(r2)
  803998:	00002306 	br	803a28 <alt_epcs_flash_query+0x244>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  80399c:	e0bfff17 	ldw	r2,-4(fp)
  8039a0:	10803017 	ldw	r2,192(r2)
  8039a4:	10803fcc 	andi	r2,r2,255
  8039a8:	10800618 	cmpnei	r2,r2,24
  8039ac:	10000a1e 	bne	r2,zero,8039d8 <alt_epcs_flash_query+0x1f4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  8039b0:	e0bfff17 	ldw	r2,-4(fp)
  8039b4:	00c04034 	movhi	r3,256
  8039b8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  8039bc:	e0bfff17 	ldw	r2,-4(fp)
  8039c0:	00c01004 	movi	r3,64
  8039c4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  8039c8:	e0bfff17 	ldw	r2,-4(fp)
  8039cc:	00c00134 	movhi	r3,4
  8039d0:	10c01015 	stw	r3,64(r2)
  8039d4:	00001406 	br	803a28 <alt_epcs_flash_query+0x244>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  8039d8:	e0bfff17 	ldw	r2,-4(fp)
  8039dc:	10803017 	ldw	r2,192(r2)
  8039e0:	10803fcc 	andi	r2,r2,255
  8039e4:	10800658 	cmpnei	r2,r2,25
  8039e8:	10000d1e 	bne	r2,zero,803a20 <alt_epcs_flash_query+0x23c>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  8039ec:	e0bfff17 	ldw	r2,-4(fp)
  8039f0:	00c08034 	movhi	r3,512
  8039f4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  8039f8:	e0bfff17 	ldw	r2,-4(fp)
  8039fc:	00c08004 	movi	r3,512
  803a00:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  803a04:	e0bfff17 	ldw	r2,-4(fp)
  803a08:	00c00074 	movhi	r3,1
  803a0c:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  803a10:	e0bfff17 	ldw	r2,-4(fp)
  803a14:	00c00044 	movi	r3,1
  803a18:	10c03215 	stw	r3,200(r2)
  803a1c:	00000206 	br	803a28 <alt_epcs_flash_query+0x244>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  803a20:	00bffb44 	movi	r2,-19
  803a24:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  803a28:	e0bfff17 	ldw	r2,-4(fp)
  803a2c:	10800e17 	ldw	r2,56(r2)
  803a30:	1007883a 	mov	r3,r2
  803a34:	e0bfff17 	ldw	r2,-4(fp)
  803a38:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
  803a3c:	e0bfff17 	ldw	r2,-4(fp)
  803a40:	00c00044 	movi	r3,1
  803a44:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  803a48:	e0bfff17 	ldw	r2,-4(fp)
  803a4c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  803a50:	e0bfff17 	ldw	r2,-4(fp)
  803a54:	00c04004 	movi	r3,256
  803a58:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  803a5c:	e0bffe17 	ldw	r2,-8(fp)
}
  803a60:	e037883a 	mov	sp,fp
  803a64:	dfc00117 	ldw	ra,4(sp)
  803a68:	df000017 	ldw	fp,0(sp)
  803a6c:	dec00204 	addi	sp,sp,8
  803a70:	f800283a 	ret

00803a74 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  803a74:	deffee04 	addi	sp,sp,-72
  803a78:	dfc01115 	stw	ra,68(sp)
  803a7c:	df001015 	stw	fp,64(sp)
  803a80:	df001004 	addi	fp,sp,64
  803a84:	e13ffc15 	stw	r4,-16(fp)
  803a88:	e17ffd15 	stw	r5,-12(fp)
  803a8c:	e1bffe15 	stw	r6,-8(fp)
  803a90:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  803a94:	00800804 	movi	r2,32
  803a98:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  803a9c:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  803aa0:	00002606 	br	803b3c <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  803aa4:	e0bff117 	ldw	r2,-60(fp)
  803aa8:	e0ffff17 	ldw	r3,-4(fp)
  803aac:	1880012e 	bgeu	r3,r2,803ab4 <alt_epcs_flash_memcmp+0x40>
  803ab0:	1805883a 	mov	r2,r3
  803ab4:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  803ab8:	e0fffe17 	ldw	r3,-8(fp)
  803abc:	e0bff017 	ldw	r2,-64(fp)
  803ac0:	1887883a 	add	r3,r3,r2
  803ac4:	e0bff404 	addi	r2,fp,-48
  803ac8:	e13ffc17 	ldw	r4,-16(fp)
  803acc:	180b883a 	mov	r5,r3
  803ad0:	100d883a 	mov	r6,r2
  803ad4:	e1fff217 	ldw	r7,-56(fp)
  803ad8:	08040500 	call	804050 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  803adc:	1000020e 	bge	r2,zero,803ae8 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  803ae0:	00bfffc4 	movi	r2,-1
  803ae4:	00001806 	br	803b48 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  803ae8:	e0bff017 	ldw	r2,-64(fp)
  803aec:	e0fffd17 	ldw	r3,-12(fp)
  803af0:	1889883a 	add	r4,r3,r2
  803af4:	e0bff217 	ldw	r2,-56(fp)
  803af8:	e0fff404 	addi	r3,fp,-48
  803afc:	180b883a 	mov	r5,r3
  803b00:	100d883a 	mov	r6,r2
  803b04:	08063500 	call	806350 <memcmp>
  803b08:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  803b0c:	e0bff317 	ldw	r2,-52(fp)
  803b10:	10000226 	beq	r2,zero,803b1c <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
  803b14:	e0bff317 	ldw	r2,-52(fp)
  803b18:	00000b06 	br	803b48 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
  803b1c:	e0bff217 	ldw	r2,-56(fp)
  803b20:	e0ffff17 	ldw	r3,-4(fp)
  803b24:	1885c83a 	sub	r2,r3,r2
  803b28:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  803b2c:	e0fff017 	ldw	r3,-64(fp)
  803b30:	e0bff217 	ldw	r2,-56(fp)
  803b34:	1885883a 	add	r2,r3,r2
  803b38:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  803b3c:	e0bfff17 	ldw	r2,-4(fp)
  803b40:	103fd81e 	bne	r2,zero,803aa4 <__reset+0xff802aa4>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  803b44:	0005883a 	mov	r2,zero
}
  803b48:	e037883a 	mov	sp,fp
  803b4c:	dfc00117 	ldw	ra,4(sp)
  803b50:	df000017 	ldw	fp,0(sp)
  803b54:	dec00204 	addi	sp,sp,8
  803b58:	f800283a 	ret

00803b5c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  803b5c:	defff404 	addi	sp,sp,-48
  803b60:	dfc00b15 	stw	ra,44(sp)
  803b64:	df000a15 	stw	fp,40(sp)
  803b68:	df000a04 	addi	fp,sp,40
  803b6c:	e13ffc15 	stw	r4,-16(fp)
  803b70:	e17ffd15 	stw	r5,-12(fp)
  803b74:	e1bffe15 	stw	r6,-8(fp)
  803b78:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  803b7c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  803b80:	e03ff815 	stw	zero,-32(fp)
  803b84:	00008306 	br	803d94 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  803b88:	e0fffc17 	ldw	r3,-16(fp)
  803b8c:	e0bff817 	ldw	r2,-32(fp)
  803b90:	1004913a 	slli	r2,r2,4
  803b94:	1885883a 	add	r2,r3,r2
  803b98:	10800d04 	addi	r2,r2,52
  803b9c:	10800017 	ldw	r2,0(r2)
  803ba0:	e0fffd17 	ldw	r3,-12(fp)
  803ba4:	18807816 	blt	r3,r2,803d88 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  803ba8:	e0fffc17 	ldw	r3,-16(fp)
  803bac:	e0bff817 	ldw	r2,-32(fp)
  803bb0:	1004913a 	slli	r2,r2,4
  803bb4:	1885883a 	add	r2,r3,r2
  803bb8:	10800d04 	addi	r2,r2,52
  803bbc:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  803bc0:	e13ffc17 	ldw	r4,-16(fp)
  803bc4:	e0bff817 	ldw	r2,-32(fp)
  803bc8:	1004913a 	slli	r2,r2,4
  803bcc:	2085883a 	add	r2,r4,r2
  803bd0:	10800e04 	addi	r2,r2,56
  803bd4:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  803bd8:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  803bdc:	e0fffd17 	ldw	r3,-12(fp)
  803be0:	1880690e 	bge	r3,r2,803d88 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  803be4:	e0fffc17 	ldw	r3,-16(fp)
  803be8:	e0bff817 	ldw	r2,-32(fp)
  803bec:	1004913a 	slli	r2,r2,4
  803bf0:	1885883a 	add	r2,r3,r2
  803bf4:	10800d04 	addi	r2,r2,52
  803bf8:	10800017 	ldw	r2,0(r2)
  803bfc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  803c00:	e03ff915 	stw	zero,-28(fp)
  803c04:	00005806 	br	803d68 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  803c08:	e0fffd17 	ldw	r3,-12(fp)
  803c0c:	e0bffa17 	ldw	r2,-24(fp)
  803c10:	18804916 	blt	r3,r2,803d38 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  803c14:	e0fffc17 	ldw	r3,-16(fp)
  803c18:	e0bff817 	ldw	r2,-32(fp)
  803c1c:	10800104 	addi	r2,r2,4
  803c20:	1004913a 	slli	r2,r2,4
  803c24:	1885883a 	add	r2,r3,r2
  803c28:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  803c2c:	e0bffa17 	ldw	r2,-24(fp)
  803c30:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  803c34:	e0fffd17 	ldw	r3,-12(fp)
  803c38:	18803f0e 	bge	r3,r2,803d38 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  803c3c:	e0fffc17 	ldw	r3,-16(fp)
  803c40:	e0bff817 	ldw	r2,-32(fp)
  803c44:	10800104 	addi	r2,r2,4
  803c48:	1004913a 	slli	r2,r2,4
  803c4c:	1885883a 	add	r2,r3,r2
  803c50:	10c00017 	ldw	r3,0(r2)
  803c54:	e0bffa17 	ldw	r2,-24(fp)
  803c58:	1887883a 	add	r3,r3,r2
  803c5c:	e0bffd17 	ldw	r2,-12(fp)
  803c60:	1885c83a 	sub	r2,r3,r2
  803c64:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  803c68:	e0fffb17 	ldw	r3,-20(fp)
  803c6c:	e0bfff17 	ldw	r2,-4(fp)
  803c70:	1880010e 	bge	r3,r2,803c78 <alt_epcs_flash_write+0x11c>
  803c74:	1805883a 	mov	r2,r3
  803c78:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  803c7c:	e0bffb17 	ldw	r2,-20(fp)
  803c80:	e13ffc17 	ldw	r4,-16(fp)
  803c84:	e17ffe17 	ldw	r5,-8(fp)
  803c88:	e1bffd17 	ldw	r6,-12(fp)
  803c8c:	100f883a 	mov	r7,r2
  803c90:	0803a740 	call	803a74 <alt_epcs_flash_memcmp>
  803c94:	10001226 	beq	r2,zero,803ce0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  803c98:	e0bffc17 	ldw	r2,-16(fp)
  803c9c:	10800817 	ldw	r2,32(r2)
  803ca0:	e13ffc17 	ldw	r4,-16(fp)
  803ca4:	e17ffa17 	ldw	r5,-24(fp)
  803ca8:	103ee83a 	callr	r2
  803cac:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  803cb0:	e0bff717 	ldw	r2,-36(fp)
  803cb4:	10000a1e 	bne	r2,zero,803ce0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  803cb8:	e0bffc17 	ldw	r2,-16(fp)
  803cbc:	10800917 	ldw	r2,36(r2)
  803cc0:	e0fffb17 	ldw	r3,-20(fp)
  803cc4:	d8c00015 	stw	r3,0(sp)
  803cc8:	e13ffc17 	ldw	r4,-16(fp)
  803ccc:	e17ffa17 	ldw	r5,-24(fp)
  803cd0:	e1bffd17 	ldw	r6,-12(fp)
  803cd4:	e1fffe17 	ldw	r7,-8(fp)
  803cd8:	103ee83a 	callr	r2
  803cdc:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  803ce0:	e0ffff17 	ldw	r3,-4(fp)
  803ce4:	e0bffb17 	ldw	r2,-20(fp)
  803ce8:	18802e26 	beq	r3,r2,803da4 <alt_epcs_flash_write+0x248>
  803cec:	e0bff717 	ldw	r2,-36(fp)
  803cf0:	10002c1e 	bne	r2,zero,803da4 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  803cf4:	e0ffff17 	ldw	r3,-4(fp)
  803cf8:	e0bffb17 	ldw	r2,-20(fp)
  803cfc:	1885c83a 	sub	r2,r3,r2
  803d00:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  803d04:	e0fffc17 	ldw	r3,-16(fp)
  803d08:	e0bff817 	ldw	r2,-32(fp)
  803d0c:	10800104 	addi	r2,r2,4
  803d10:	1004913a 	slli	r2,r2,4
  803d14:	1885883a 	add	r2,r3,r2
  803d18:	10c00017 	ldw	r3,0(r2)
  803d1c:	e0bffa17 	ldw	r2,-24(fp)
  803d20:	1885883a 	add	r2,r3,r2
  803d24:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  803d28:	e0bffb17 	ldw	r2,-20(fp)
  803d2c:	e0fffe17 	ldw	r3,-8(fp)
  803d30:	1885883a 	add	r2,r3,r2
  803d34:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  803d38:	e0fffc17 	ldw	r3,-16(fp)
  803d3c:	e0bff817 	ldw	r2,-32(fp)
  803d40:	10800104 	addi	r2,r2,4
  803d44:	1004913a 	slli	r2,r2,4
  803d48:	1885883a 	add	r2,r3,r2
  803d4c:	10800017 	ldw	r2,0(r2)
  803d50:	e0fffa17 	ldw	r3,-24(fp)
  803d54:	1885883a 	add	r2,r3,r2
  803d58:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  803d5c:	e0bff917 	ldw	r2,-28(fp)
  803d60:	10800044 	addi	r2,r2,1
  803d64:	e0bff915 	stw	r2,-28(fp)
  803d68:	e0fffc17 	ldw	r3,-16(fp)
  803d6c:	e0bff817 	ldw	r2,-32(fp)
  803d70:	1004913a 	slli	r2,r2,4
  803d74:	1885883a 	add	r2,r3,r2
  803d78:	10800f04 	addi	r2,r2,60
  803d7c:	10800017 	ldw	r2,0(r2)
  803d80:	e0fff917 	ldw	r3,-28(fp)
  803d84:	18bfa016 	blt	r3,r2,803c08 <__reset+0xff802c08>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  803d88:	e0bff817 	ldw	r2,-32(fp)
  803d8c:	10800044 	addi	r2,r2,1
  803d90:	e0bff815 	stw	r2,-32(fp)
  803d94:	e0bffc17 	ldw	r2,-16(fp)
  803d98:	10800c17 	ldw	r2,48(r2)
  803d9c:	e0fff817 	ldw	r3,-32(fp)
  803da0:	18bf7916 	blt	r3,r2,803b88 <__reset+0xff802b88>
      }
    }
  }

finished:
  return ret_code;
  803da4:	e0bff717 	ldw	r2,-36(fp)
}
  803da8:	e037883a 	mov	sp,fp
  803dac:	dfc00117 	ldw	ra,4(sp)
  803db0:	df000017 	ldw	fp,0(sp)
  803db4:	dec00204 	addi	sp,sp,8
  803db8:	f800283a 	ret

00803dbc <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  803dbc:	defffa04 	addi	sp,sp,-24
  803dc0:	df000515 	stw	fp,20(sp)
  803dc4:	df000504 	addi	fp,sp,20
  803dc8:	e13ffd15 	stw	r4,-12(fp)
  803dcc:	e17ffe15 	stw	r5,-8(fp)
  803dd0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  803dd4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  803dd8:	e0bffd17 	ldw	r2,-12(fp)
  803ddc:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  803de0:	e0bffc17 	ldw	r2,-16(fp)
  803de4:	10c00c17 	ldw	r3,48(r2)
  803de8:	e0bfff17 	ldw	r2,-4(fp)
  803dec:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  803df0:	e0bffc17 	ldw	r2,-16(fp)
  803df4:	10800c17 	ldw	r2,48(r2)
  803df8:	1000031e 	bne	r2,zero,803e08 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  803dfc:	00bffec4 	movi	r2,-5
  803e00:	e0bffb15 	stw	r2,-20(fp)
  803e04:	00000b06 	br	803e34 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  803e08:	e0bffc17 	ldw	r2,-16(fp)
  803e0c:	10800c17 	ldw	r2,48(r2)
  803e10:	10800250 	cmplti	r2,r2,9
  803e14:	1000031e 	bne	r2,zero,803e24 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  803e18:	00bffd04 	movi	r2,-12
  803e1c:	e0bffb15 	stw	r2,-20(fp)
  803e20:	00000406 	br	803e34 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	10c00d04 	addi	r3,r2,52
  803e2c:	e0bffe17 	ldw	r2,-8(fp)
  803e30:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  803e34:	e0bffb17 	ldw	r2,-20(fp)
}
  803e38:	e037883a 	mov	sp,fp
  803e3c:	df000017 	ldw	fp,0(sp)
  803e40:	dec00104 	addi	sp,sp,4
  803e44:	f800283a 	ret

00803e48 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  803e48:	defff904 	addi	sp,sp,-28
  803e4c:	df000615 	stw	fp,24(sp)
  803e50:	df000604 	addi	fp,sp,24
  803e54:	e13ffe15 	stw	r4,-8(fp)
  803e58:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  803e5c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  803e60:	e0bffe17 	ldw	r2,-8(fp)
  803e64:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  803e68:	e0bffb17 	ldw	r2,-20(fp)
  803e6c:	10800c17 	ldw	r2,48(r2)
  803e70:	10bfffc4 	addi	r2,r2,-1
  803e74:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  803e78:	e0fffb17 	ldw	r3,-20(fp)
  803e7c:	e0bffc17 	ldw	r2,-16(fp)
  803e80:	1004913a 	slli	r2,r2,4
  803e84:	1885883a 	add	r2,r3,r2
  803e88:	10800d04 	addi	r2,r2,52
  803e8c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  803e90:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  803e94:	e13ffb17 	ldw	r4,-20(fp)
  803e98:	e0bffc17 	ldw	r2,-16(fp)
  803e9c:	1004913a 	slli	r2,r2,4
  803ea0:	2085883a 	add	r2,r4,r2
  803ea4:	10800e04 	addi	r2,r2,56
  803ea8:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  803eac:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  803eb0:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  803eb4:	e0bfff17 	ldw	r2,-4(fp)
  803eb8:	e0fffd17 	ldw	r3,-12(fp)
  803ebc:	1880022e 	bgeu	r3,r2,803ec8 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  803ec0:	00bffec4 	movi	r2,-5
  803ec4:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  803ec8:	e0bffa17 	ldw	r2,-24(fp)
}
  803ecc:	e037883a 	mov	sp,fp
  803ed0:	df000017 	ldw	fp,0(sp)
  803ed4:	dec00104 	addi	sp,sp,4
  803ed8:	f800283a 	ret

00803edc <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  803edc:	defffa04 	addi	sp,sp,-24
  803ee0:	dfc00515 	stw	ra,20(sp)
  803ee4:	df000415 	stw	fp,16(sp)
  803ee8:	df000404 	addi	fp,sp,16
  803eec:	e13ffe15 	stw	r4,-8(fp)
  803ef0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  803ef4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  803ef8:	e0bffe17 	ldw	r2,-8(fp)
  803efc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  803f00:	e13ffe17 	ldw	r4,-8(fp)
  803f04:	e17fff17 	ldw	r5,-4(fp)
  803f08:	0803e480 	call	803e48 <alt_epcs_test_address>
  803f0c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  803f10:	e0bffc17 	ldw	r2,-16(fp)
  803f14:	10000816 	blt	r2,zero,803f38 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  803f18:	e0bffd17 	ldw	r2,-12(fp)
  803f1c:	11002e17 	ldw	r4,184(r2)
  803f20:	e0ffff17 	ldw	r3,-4(fp)
  803f24:	e0bffd17 	ldw	r2,-12(fp)
  803f28:	10803217 	ldw	r2,200(r2)
  803f2c:	180b883a 	mov	r5,r3
  803f30:	100d883a 	mov	r6,r2
  803f34:	0804cfc0 	call	804cfc <epcs_sector_erase>
  }
  return ret_code;
  803f38:	e0bffc17 	ldw	r2,-16(fp)
}
  803f3c:	e037883a 	mov	sp,fp
  803f40:	dfc00117 	ldw	ra,4(sp)
  803f44:	df000017 	ldw	fp,0(sp)
  803f48:	dec00204 	addi	sp,sp,8
  803f4c:	f800283a 	ret

00803f50 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  803f50:	defff404 	addi	sp,sp,-48
  803f54:	dfc00b15 	stw	ra,44(sp)
  803f58:	df000a15 	stw	fp,40(sp)
  803f5c:	df000a04 	addi	fp,sp,40
  803f60:	e13ffc15 	stw	r4,-16(fp)
  803f64:	e17ffd15 	stw	r5,-12(fp)
  803f68:	e1bffe15 	stw	r6,-8(fp)
  803f6c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  803f70:	e0bffc17 	ldw	r2,-16(fp)
  803f74:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  803f78:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  803f7c:	e13ffc17 	ldw	r4,-16(fp)
  803f80:	e17ffe17 	ldw	r5,-8(fp)
  803f84:	0803e480 	call	803e48 <alt_epcs_test_address>
  803f88:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  803f8c:	e0bff917 	ldw	r2,-28(fp)
  803f90:	10002916 	blt	r2,zero,804038 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  803f94:	00002606 	br	804030 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  803f98:	e0bff817 	ldw	r2,-32(fp)
  803f9c:	10c03117 	ldw	r3,196(r2)
  803fa0:	e0bffe17 	ldw	r2,-8(fp)
  803fa4:	1887883a 	add	r3,r3,r2
  803fa8:	e0bff817 	ldw	r2,-32(fp)
  803fac:	10803117 	ldw	r2,196(r2)
  803fb0:	0085c83a 	sub	r2,zero,r2
  803fb4:	1884703a 	and	r2,r3,r2
  803fb8:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  803fbc:	e0fffa17 	ldw	r3,-24(fp)
  803fc0:	e0bffe17 	ldw	r2,-8(fp)
  803fc4:	1885c83a 	sub	r2,r3,r2
  803fc8:	e0c00217 	ldw	r3,8(fp)
  803fcc:	1880010e 	bge	r3,r2,803fd4 <alt_epcs_flash_write_block+0x84>
  803fd0:	1805883a 	mov	r2,r3
  803fd4:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  803fd8:	e0bff817 	ldw	r2,-32(fp)
  803fdc:	11002e17 	ldw	r4,184(r2)
  803fe0:	e0bff717 	ldw	r2,-36(fp)
  803fe4:	e0ffff17 	ldw	r3,-4(fp)
  803fe8:	1887883a 	add	r3,r3,r2
  803fec:	e0bff817 	ldw	r2,-32(fp)
  803ff0:	10803217 	ldw	r2,200(r2)
  803ff4:	d8800015 	stw	r2,0(sp)
  803ff8:	e17ffe17 	ldw	r5,-8(fp)
  803ffc:	180d883a 	mov	r6,r3
  804000:	e1fffb17 	ldw	r7,-20(fp)
  804004:	0804fa00 	call	804fa0 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  804008:	e0c00217 	ldw	r3,8(fp)
  80400c:	e0bffb17 	ldw	r2,-20(fp)
  804010:	1885c83a 	sub	r2,r3,r2
  804014:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  804018:	e0fff717 	ldw	r3,-36(fp)
  80401c:	e0bffb17 	ldw	r2,-20(fp)
  804020:	1885883a 	add	r2,r3,r2
  804024:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  804028:	e0bffa17 	ldw	r2,-24(fp)
  80402c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  804030:	e0800217 	ldw	r2,8(fp)
  804034:	103fd81e 	bne	r2,zero,803f98 <__reset+0xff802f98>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  804038:	e0bff917 	ldw	r2,-28(fp)
}
  80403c:	e037883a 	mov	sp,fp
  804040:	dfc00117 	ldw	ra,4(sp)
  804044:	df000017 	ldw	fp,0(sp)
  804048:	dec00204 	addi	sp,sp,8
  80404c:	f800283a 	ret

00804050 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  804050:	defff704 	addi	sp,sp,-36
  804054:	dfc00815 	stw	ra,32(sp)
  804058:	df000715 	stw	fp,28(sp)
  80405c:	df000704 	addi	fp,sp,28
  804060:	e13ffc15 	stw	r4,-16(fp)
  804064:	e17ffd15 	stw	r5,-12(fp)
  804068:	e1bffe15 	stw	r6,-8(fp)
  80406c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  804070:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  804074:	e0bffc17 	ldw	r2,-16(fp)
  804078:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  80407c:	e13ffc17 	ldw	r4,-16(fp)
  804080:	e17ffd17 	ldw	r5,-12(fp)
  804084:	0803e480 	call	803e48 <alt_epcs_test_address>
  804088:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  80408c:	e0bffa17 	ldw	r2,-24(fp)
  804090:	10000f16 	blt	r2,zero,8040d0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  804094:	e0bffb17 	ldw	r2,-20(fp)
  804098:	10c02e17 	ldw	r3,184(r2)
  80409c:	e0bffb17 	ldw	r2,-20(fp)
  8040a0:	10803217 	ldw	r2,200(r2)
  8040a4:	d8800015 	stw	r2,0(sp)
  8040a8:	1809883a 	mov	r4,r3
  8040ac:	e17ffd17 	ldw	r5,-12(fp)
  8040b0:	e1bffe17 	ldw	r6,-8(fp)
  8040b4:	e1ffff17 	ldw	r7,-4(fp)
  8040b8:	0804df40 	call	804df4 <epcs_read_buffer>
  8040bc:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  8040c0:	e0fffa17 	ldw	r3,-24(fp)
  8040c4:	e0bfff17 	ldw	r2,-4(fp)
  8040c8:	1880011e 	bne	r3,r2,8040d0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  8040cc:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  8040d0:	e0bffa17 	ldw	r2,-24(fp)
}
  8040d4:	e037883a 	mov	sp,fp
  8040d8:	dfc00117 	ldw	ra,4(sp)
  8040dc:	df000017 	ldw	fp,0(sp)
  8040e0:	dec00204 	addi	sp,sp,8
  8040e4:	f800283a 	ret

008040e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8040e8:	defffa04 	addi	sp,sp,-24
  8040ec:	dfc00515 	stw	ra,20(sp)
  8040f0:	df000415 	stw	fp,16(sp)
  8040f4:	df000404 	addi	fp,sp,16
  8040f8:	e13ffd15 	stw	r4,-12(fp)
  8040fc:	e17ffe15 	stw	r5,-8(fp)
  804100:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804104:	e0bffd17 	ldw	r2,-12(fp)
  804108:	10800017 	ldw	r2,0(r2)
  80410c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  804110:	e0bffc17 	ldw	r2,-16(fp)
  804114:	10c00a04 	addi	r3,r2,40
  804118:	e0bffd17 	ldw	r2,-12(fp)
  80411c:	10800217 	ldw	r2,8(r2)
  804120:	1809883a 	mov	r4,r3
  804124:	e17ffe17 	ldw	r5,-8(fp)
  804128:	e1bfff17 	ldw	r6,-4(fp)
  80412c:	100f883a 	mov	r7,r2
  804130:	08047100 	call	804710 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  804134:	e037883a 	mov	sp,fp
  804138:	dfc00117 	ldw	ra,4(sp)
  80413c:	df000017 	ldw	fp,0(sp)
  804140:	dec00204 	addi	sp,sp,8
  804144:	f800283a 	ret

00804148 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804148:	defffa04 	addi	sp,sp,-24
  80414c:	dfc00515 	stw	ra,20(sp)
  804150:	df000415 	stw	fp,16(sp)
  804154:	df000404 	addi	fp,sp,16
  804158:	e13ffd15 	stw	r4,-12(fp)
  80415c:	e17ffe15 	stw	r5,-8(fp)
  804160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804164:	e0bffd17 	ldw	r2,-12(fp)
  804168:	10800017 	ldw	r2,0(r2)
  80416c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  804170:	e0bffc17 	ldw	r2,-16(fp)
  804174:	10c00a04 	addi	r3,r2,40
  804178:	e0bffd17 	ldw	r2,-12(fp)
  80417c:	10800217 	ldw	r2,8(r2)
  804180:	1809883a 	mov	r4,r3
  804184:	e17ffe17 	ldw	r5,-8(fp)
  804188:	e1bfff17 	ldw	r6,-4(fp)
  80418c:	100f883a 	mov	r7,r2
  804190:	080491c0 	call	80491c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804194:	e037883a 	mov	sp,fp
  804198:	dfc00117 	ldw	ra,4(sp)
  80419c:	df000017 	ldw	fp,0(sp)
  8041a0:	dec00204 	addi	sp,sp,8
  8041a4:	f800283a 	ret

008041a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8041a8:	defffc04 	addi	sp,sp,-16
  8041ac:	dfc00315 	stw	ra,12(sp)
  8041b0:	df000215 	stw	fp,8(sp)
  8041b4:	df000204 	addi	fp,sp,8
  8041b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8041bc:	e0bfff17 	ldw	r2,-4(fp)
  8041c0:	10800017 	ldw	r2,0(r2)
  8041c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8041c8:	e0bffe17 	ldw	r2,-8(fp)
  8041cc:	10c00a04 	addi	r3,r2,40
  8041d0:	e0bfff17 	ldw	r2,-4(fp)
  8041d4:	10800217 	ldw	r2,8(r2)
  8041d8:	1809883a 	mov	r4,r3
  8041dc:	100b883a 	mov	r5,r2
  8041e0:	08045bc0 	call	8045bc <altera_avalon_jtag_uart_close>
}
  8041e4:	e037883a 	mov	sp,fp
  8041e8:	dfc00117 	ldw	ra,4(sp)
  8041ec:	df000017 	ldw	fp,0(sp)
  8041f0:	dec00204 	addi	sp,sp,8
  8041f4:	f800283a 	ret

008041f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8041f8:	defffa04 	addi	sp,sp,-24
  8041fc:	dfc00515 	stw	ra,20(sp)
  804200:	df000415 	stw	fp,16(sp)
  804204:	df000404 	addi	fp,sp,16
  804208:	e13ffd15 	stw	r4,-12(fp)
  80420c:	e17ffe15 	stw	r5,-8(fp)
  804210:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  804214:	e0bffd17 	ldw	r2,-12(fp)
  804218:	10800017 	ldw	r2,0(r2)
  80421c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804220:	e0bffc17 	ldw	r2,-16(fp)
  804224:	10800a04 	addi	r2,r2,40
  804228:	1009883a 	mov	r4,r2
  80422c:	e17ffe17 	ldw	r5,-8(fp)
  804230:	e1bfff17 	ldw	r6,-4(fp)
  804234:	08046240 	call	804624 <altera_avalon_jtag_uart_ioctl>
}
  804238:	e037883a 	mov	sp,fp
  80423c:	dfc00117 	ldw	ra,4(sp)
  804240:	df000017 	ldw	fp,0(sp)
  804244:	dec00204 	addi	sp,sp,8
  804248:	f800283a 	ret

0080424c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80424c:	defffa04 	addi	sp,sp,-24
  804250:	dfc00515 	stw	ra,20(sp)
  804254:	df000415 	stw	fp,16(sp)
  804258:	df000404 	addi	fp,sp,16
  80425c:	e13ffd15 	stw	r4,-12(fp)
  804260:	e17ffe15 	stw	r5,-8(fp)
  804264:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804268:	e0bffd17 	ldw	r2,-12(fp)
  80426c:	00c00044 	movi	r3,1
  804270:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  804274:	e0bffd17 	ldw	r2,-12(fp)
  804278:	10800017 	ldw	r2,0(r2)
  80427c:	10800104 	addi	r2,r2,4
  804280:	1007883a 	mov	r3,r2
  804284:	e0bffd17 	ldw	r2,-12(fp)
  804288:	10800817 	ldw	r2,32(r2)
  80428c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804290:	e0fffe17 	ldw	r3,-8(fp)
  804294:	e0bfff17 	ldw	r2,-4(fp)
  804298:	d8000015 	stw	zero,0(sp)
  80429c:	1809883a 	mov	r4,r3
  8042a0:	100b883a 	mov	r5,r2
  8042a4:	01802034 	movhi	r6,128
  8042a8:	3190c404 	addi	r6,r6,17168
  8042ac:	e1fffd17 	ldw	r7,-12(fp)
  8042b0:	08056000 	call	805600 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8042b4:	e0bffd17 	ldw	r2,-12(fp)
  8042b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8042bc:	e0bffd17 	ldw	r2,-12(fp)
  8042c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8042c4:	00802074 	movhi	r2,129
  8042c8:	10a09504 	addi	r2,r2,-32172
  8042cc:	10800017 	ldw	r2,0(r2)
  8042d0:	1809883a 	mov	r4,r3
  8042d4:	100b883a 	mov	r5,r2
  8042d8:	01802034 	movhi	r6,128
  8042dc:	31914504 	addi	r6,r6,17684
  8042e0:	e1fffd17 	ldw	r7,-12(fp)
  8042e4:	080525c0 	call	80525c <alt_alarm_start>
  8042e8:	1000040e 	bge	r2,zero,8042fc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8042ec:	e0fffd17 	ldw	r3,-12(fp)
  8042f0:	00a00034 	movhi	r2,32768
  8042f4:	10bfffc4 	addi	r2,r2,-1
  8042f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8042fc:	e037883a 	mov	sp,fp
  804300:	dfc00117 	ldw	ra,4(sp)
  804304:	df000017 	ldw	fp,0(sp)
  804308:	dec00204 	addi	sp,sp,8
  80430c:	f800283a 	ret

00804310 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  804310:	defff804 	addi	sp,sp,-32
  804314:	df000715 	stw	fp,28(sp)
  804318:	df000704 	addi	fp,sp,28
  80431c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  804320:	e0bfff17 	ldw	r2,-4(fp)
  804324:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  804328:	e0bffb17 	ldw	r2,-20(fp)
  80432c:	10800017 	ldw	r2,0(r2)
  804330:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804334:	e0bffc17 	ldw	r2,-16(fp)
  804338:	10800104 	addi	r2,r2,4
  80433c:	10800037 	ldwio	r2,0(r2)
  804340:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  804344:	e0bffd17 	ldw	r2,-12(fp)
  804348:	1080c00c 	andi	r2,r2,768
  80434c:	1000011e 	bne	r2,zero,804354 <altera_avalon_jtag_uart_irq+0x44>
      break;
  804350:	00006c06 	br	804504 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  804354:	e0bffd17 	ldw	r2,-12(fp)
  804358:	1080400c 	andi	r2,r2,256
  80435c:	10003426 	beq	r2,zero,804430 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  804360:	00800074 	movhi	r2,1
  804364:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804368:	e0bffb17 	ldw	r2,-20(fp)
  80436c:	10800a17 	ldw	r2,40(r2)
  804370:	10800044 	addi	r2,r2,1
  804374:	1081ffcc 	andi	r2,r2,2047
  804378:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80437c:	e0bffb17 	ldw	r2,-20(fp)
  804380:	10c00b17 	ldw	r3,44(r2)
  804384:	e0bffe17 	ldw	r2,-8(fp)
  804388:	1880011e 	bne	r3,r2,804390 <altera_avalon_jtag_uart_irq+0x80>
          break;
  80438c:	00001606 	br	8043e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804390:	e0bffc17 	ldw	r2,-16(fp)
  804394:	10800037 	ldwio	r2,0(r2)
  804398:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80439c:	e0bff917 	ldw	r2,-28(fp)
  8043a0:	10a0000c 	andi	r2,r2,32768
  8043a4:	1000011e 	bne	r2,zero,8043ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
  8043a8:	00000f06 	br	8043e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8043ac:	e0bffb17 	ldw	r2,-20(fp)
  8043b0:	10800a17 	ldw	r2,40(r2)
  8043b4:	e0fff917 	ldw	r3,-28(fp)
  8043b8:	1809883a 	mov	r4,r3
  8043bc:	e0fffb17 	ldw	r3,-20(fp)
  8043c0:	1885883a 	add	r2,r3,r2
  8043c4:	10800e04 	addi	r2,r2,56
  8043c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8043cc:	e0bffb17 	ldw	r2,-20(fp)
  8043d0:	10800a17 	ldw	r2,40(r2)
  8043d4:	10800044 	addi	r2,r2,1
  8043d8:	10c1ffcc 	andi	r3,r2,2047
  8043dc:	e0bffb17 	ldw	r2,-20(fp)
  8043e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8043e4:	003fe006 	br	804368 <__reset+0xff803368>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8043e8:	e0bff917 	ldw	r2,-28(fp)
  8043ec:	10bfffec 	andhi	r2,r2,65535
  8043f0:	10000f26 	beq	r2,zero,804430 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8043f4:	e0bffb17 	ldw	r2,-20(fp)
  8043f8:	10c00817 	ldw	r3,32(r2)
  8043fc:	00bfff84 	movi	r2,-2
  804400:	1886703a 	and	r3,r3,r2
  804404:	e0bffb17 	ldw	r2,-20(fp)
  804408:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80440c:	e0bffc17 	ldw	r2,-16(fp)
  804410:	10800104 	addi	r2,r2,4
  804414:	1007883a 	mov	r3,r2
  804418:	e0bffb17 	ldw	r2,-20(fp)
  80441c:	10800817 	ldw	r2,32(r2)
  804420:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804424:	e0bffc17 	ldw	r2,-16(fp)
  804428:	10800104 	addi	r2,r2,4
  80442c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  804430:	e0bffd17 	ldw	r2,-12(fp)
  804434:	1080800c 	andi	r2,r2,512
  804438:	10003126 	beq	r2,zero,804500 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80443c:	e0bffd17 	ldw	r2,-12(fp)
  804440:	1004d43a 	srli	r2,r2,16
  804444:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  804448:	00001406 	br	80449c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80444c:	e0bffc17 	ldw	r2,-16(fp)
  804450:	e0fffb17 	ldw	r3,-20(fp)
  804454:	18c00d17 	ldw	r3,52(r3)
  804458:	e13ffb17 	ldw	r4,-20(fp)
  80445c:	20c7883a 	add	r3,r4,r3
  804460:	18c20e04 	addi	r3,r3,2104
  804464:	18c00003 	ldbu	r3,0(r3)
  804468:	18c03fcc 	andi	r3,r3,255
  80446c:	18c0201c 	xori	r3,r3,128
  804470:	18ffe004 	addi	r3,r3,-128
  804474:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804478:	e0bffb17 	ldw	r2,-20(fp)
  80447c:	10800d17 	ldw	r2,52(r2)
  804480:	10800044 	addi	r2,r2,1
  804484:	10c1ffcc 	andi	r3,r2,2047
  804488:	e0bffb17 	ldw	r2,-20(fp)
  80448c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804490:	e0bffa17 	ldw	r2,-24(fp)
  804494:	10bfffc4 	addi	r2,r2,-1
  804498:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80449c:	e0bffa17 	ldw	r2,-24(fp)
  8044a0:	10000526 	beq	r2,zero,8044b8 <altera_avalon_jtag_uart_irq+0x1a8>
  8044a4:	e0bffb17 	ldw	r2,-20(fp)
  8044a8:	10c00d17 	ldw	r3,52(r2)
  8044ac:	e0bffb17 	ldw	r2,-20(fp)
  8044b0:	10800c17 	ldw	r2,48(r2)
  8044b4:	18bfe51e 	bne	r3,r2,80444c <__reset+0xff80344c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8044b8:	e0bffa17 	ldw	r2,-24(fp)
  8044bc:	10001026 	beq	r2,zero,804500 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8044c0:	e0bffb17 	ldw	r2,-20(fp)
  8044c4:	10c00817 	ldw	r3,32(r2)
  8044c8:	00bfff44 	movi	r2,-3
  8044cc:	1886703a 	and	r3,r3,r2
  8044d0:	e0bffb17 	ldw	r2,-20(fp)
  8044d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8044d8:	e0bffb17 	ldw	r2,-20(fp)
  8044dc:	10800017 	ldw	r2,0(r2)
  8044e0:	10800104 	addi	r2,r2,4
  8044e4:	1007883a 	mov	r3,r2
  8044e8:	e0bffb17 	ldw	r2,-20(fp)
  8044ec:	10800817 	ldw	r2,32(r2)
  8044f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8044f4:	e0bffc17 	ldw	r2,-16(fp)
  8044f8:	10800104 	addi	r2,r2,4
  8044fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  804500:	003f8c06 	br	804334 <__reset+0xff803334>
}
  804504:	e037883a 	mov	sp,fp
  804508:	df000017 	ldw	fp,0(sp)
  80450c:	dec00104 	addi	sp,sp,4
  804510:	f800283a 	ret

00804514 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  804514:	defff804 	addi	sp,sp,-32
  804518:	df000715 	stw	fp,28(sp)
  80451c:	df000704 	addi	fp,sp,28
  804520:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  804524:	e0bffb17 	ldw	r2,-20(fp)
  804528:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80452c:	e0bff917 	ldw	r2,-28(fp)
  804530:	10800017 	ldw	r2,0(r2)
  804534:	10800104 	addi	r2,r2,4
  804538:	10800037 	ldwio	r2,0(r2)
  80453c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804540:	e0bffa17 	ldw	r2,-24(fp)
  804544:	1081000c 	andi	r2,r2,1024
  804548:	10000b26 	beq	r2,zero,804578 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80454c:	e0bff917 	ldw	r2,-28(fp)
  804550:	10800017 	ldw	r2,0(r2)
  804554:	10800104 	addi	r2,r2,4
  804558:	1007883a 	mov	r3,r2
  80455c:	e0bff917 	ldw	r2,-28(fp)
  804560:	10800817 	ldw	r2,32(r2)
  804564:	10810014 	ori	r2,r2,1024
  804568:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80456c:	e0bff917 	ldw	r2,-28(fp)
  804570:	10000915 	stw	zero,36(r2)
  804574:	00000a06 	br	8045a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804578:	e0bff917 	ldw	r2,-28(fp)
  80457c:	10c00917 	ldw	r3,36(r2)
  804580:	00a00034 	movhi	r2,32768
  804584:	10bfff04 	addi	r2,r2,-4
  804588:	10c00536 	bltu	r2,r3,8045a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80458c:	e0bff917 	ldw	r2,-28(fp)
  804590:	10800917 	ldw	r2,36(r2)
  804594:	10c00044 	addi	r3,r2,1
  804598:	e0bff917 	ldw	r2,-28(fp)
  80459c:	10c00915 	stw	r3,36(r2)
  8045a0:	00802074 	movhi	r2,129
  8045a4:	10a09504 	addi	r2,r2,-32172
  8045a8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8045ac:	e037883a 	mov	sp,fp
  8045b0:	df000017 	ldw	fp,0(sp)
  8045b4:	dec00104 	addi	sp,sp,4
  8045b8:	f800283a 	ret

008045bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8045bc:	defffd04 	addi	sp,sp,-12
  8045c0:	df000215 	stw	fp,8(sp)
  8045c4:	df000204 	addi	fp,sp,8
  8045c8:	e13ffe15 	stw	r4,-8(fp)
  8045cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8045d0:	00000506 	br	8045e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8045d4:	e0bfff17 	ldw	r2,-4(fp)
  8045d8:	1090000c 	andi	r2,r2,16384
  8045dc:	10000226 	beq	r2,zero,8045e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8045e0:	00bffd44 	movi	r2,-11
  8045e4:	00000b06 	br	804614 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8045e8:	e0bffe17 	ldw	r2,-8(fp)
  8045ec:	10c00d17 	ldw	r3,52(r2)
  8045f0:	e0bffe17 	ldw	r2,-8(fp)
  8045f4:	10800c17 	ldw	r2,48(r2)
  8045f8:	18800526 	beq	r3,r2,804610 <altera_avalon_jtag_uart_close+0x54>
  8045fc:	e0bffe17 	ldw	r2,-8(fp)
  804600:	10c00917 	ldw	r3,36(r2)
  804604:	e0bffe17 	ldw	r2,-8(fp)
  804608:	10800117 	ldw	r2,4(r2)
  80460c:	18bff136 	bltu	r3,r2,8045d4 <__reset+0xff8035d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804610:	0005883a 	mov	r2,zero
}
  804614:	e037883a 	mov	sp,fp
  804618:	df000017 	ldw	fp,0(sp)
  80461c:	dec00104 	addi	sp,sp,4
  804620:	f800283a 	ret

00804624 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  804624:	defffa04 	addi	sp,sp,-24
  804628:	df000515 	stw	fp,20(sp)
  80462c:	df000504 	addi	fp,sp,20
  804630:	e13ffd15 	stw	r4,-12(fp)
  804634:	e17ffe15 	stw	r5,-8(fp)
  804638:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80463c:	00bff9c4 	movi	r2,-25
  804640:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  804644:	e0bffe17 	ldw	r2,-8(fp)
  804648:	10da8060 	cmpeqi	r3,r2,27137
  80464c:	1800031e 	bne	r3,zero,80465c <altera_avalon_jtag_uart_ioctl+0x38>
  804650:	109a80a0 	cmpeqi	r2,r2,27138
  804654:	1000191e 	bne	r2,zero,8046bc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  804658:	00002806 	br	8046fc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80465c:	e0bffd17 	ldw	r2,-12(fp)
  804660:	10c00117 	ldw	r3,4(r2)
  804664:	00a00034 	movhi	r2,32768
  804668:	10bfffc4 	addi	r2,r2,-1
  80466c:	18801226 	beq	r3,r2,8046b8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  804670:	e0bfff17 	ldw	r2,-4(fp)
  804674:	10800017 	ldw	r2,0(r2)
  804678:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80467c:	e0bffc17 	ldw	r2,-16(fp)
  804680:	10800090 	cmplti	r2,r2,2
  804684:	1000061e 	bne	r2,zero,8046a0 <altera_avalon_jtag_uart_ioctl+0x7c>
  804688:	e0fffc17 	ldw	r3,-16(fp)
  80468c:	00a00034 	movhi	r2,32768
  804690:	10bfffc4 	addi	r2,r2,-1
  804694:	18800226 	beq	r3,r2,8046a0 <altera_avalon_jtag_uart_ioctl+0x7c>
  804698:	e0bffc17 	ldw	r2,-16(fp)
  80469c:	00000206 	br	8046a8 <altera_avalon_jtag_uart_ioctl+0x84>
  8046a0:	00a00034 	movhi	r2,32768
  8046a4:	10bfff84 	addi	r2,r2,-2
  8046a8:	e0fffd17 	ldw	r3,-12(fp)
  8046ac:	18800115 	stw	r2,4(r3)
      rc = 0;
  8046b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8046b4:	00001106 	br	8046fc <altera_avalon_jtag_uart_ioctl+0xd8>
  8046b8:	00001006 	br	8046fc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8046bc:	e0bffd17 	ldw	r2,-12(fp)
  8046c0:	10c00117 	ldw	r3,4(r2)
  8046c4:	00a00034 	movhi	r2,32768
  8046c8:	10bfffc4 	addi	r2,r2,-1
  8046cc:	18800a26 	beq	r3,r2,8046f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8046d0:	e0bffd17 	ldw	r2,-12(fp)
  8046d4:	10c00917 	ldw	r3,36(r2)
  8046d8:	e0bffd17 	ldw	r2,-12(fp)
  8046dc:	10800117 	ldw	r2,4(r2)
  8046e0:	1885803a 	cmpltu	r2,r3,r2
  8046e4:	10c03fcc 	andi	r3,r2,255
  8046e8:	e0bfff17 	ldw	r2,-4(fp)
  8046ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8046f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8046f4:	00000006 	br	8046f8 <altera_avalon_jtag_uart_ioctl+0xd4>
  8046f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8046fc:	e0bffb17 	ldw	r2,-20(fp)
}
  804700:	e037883a 	mov	sp,fp
  804704:	df000017 	ldw	fp,0(sp)
  804708:	dec00104 	addi	sp,sp,4
  80470c:	f800283a 	ret

00804710 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  804710:	defff304 	addi	sp,sp,-52
  804714:	dfc00c15 	stw	ra,48(sp)
  804718:	df000b15 	stw	fp,44(sp)
  80471c:	df000b04 	addi	fp,sp,44
  804720:	e13ffc15 	stw	r4,-16(fp)
  804724:	e17ffd15 	stw	r5,-12(fp)
  804728:	e1bffe15 	stw	r6,-8(fp)
  80472c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  804730:	e0bffd17 	ldw	r2,-12(fp)
  804734:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804738:	00004906 	br	804860 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80473c:	e0bffc17 	ldw	r2,-16(fp)
  804740:	10800a17 	ldw	r2,40(r2)
  804744:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804748:	e0bffc17 	ldw	r2,-16(fp)
  80474c:	10800b17 	ldw	r2,44(r2)
  804750:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  804754:	e0fff717 	ldw	r3,-36(fp)
  804758:	e0bff817 	ldw	r2,-32(fp)
  80475c:	18800536 	bltu	r3,r2,804774 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804760:	e0fff717 	ldw	r3,-36(fp)
  804764:	e0bff817 	ldw	r2,-32(fp)
  804768:	1885c83a 	sub	r2,r3,r2
  80476c:	e0bff615 	stw	r2,-40(fp)
  804770:	00000406 	br	804784 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  804774:	00c20004 	movi	r3,2048
  804778:	e0bff817 	ldw	r2,-32(fp)
  80477c:	1885c83a 	sub	r2,r3,r2
  804780:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  804784:	e0bff617 	ldw	r2,-40(fp)
  804788:	1000011e 	bne	r2,zero,804790 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  80478c:	00001d06 	br	804804 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  804790:	e0fffe17 	ldw	r3,-8(fp)
  804794:	e0bff617 	ldw	r2,-40(fp)
  804798:	1880022e 	bgeu	r3,r2,8047a4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80479c:	e0bffe17 	ldw	r2,-8(fp)
  8047a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8047a4:	e0bff817 	ldw	r2,-32(fp)
  8047a8:	10800e04 	addi	r2,r2,56
  8047ac:	e0fffc17 	ldw	r3,-16(fp)
  8047b0:	1885883a 	add	r2,r3,r2
  8047b4:	e13ff517 	ldw	r4,-44(fp)
  8047b8:	100b883a 	mov	r5,r2
  8047bc:	e1bff617 	ldw	r6,-40(fp)
  8047c0:	08010c00 	call	8010c0 <memcpy>
      ptr   += n;
  8047c4:	e0fff517 	ldw	r3,-44(fp)
  8047c8:	e0bff617 	ldw	r2,-40(fp)
  8047cc:	1885883a 	add	r2,r3,r2
  8047d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8047d4:	e0fffe17 	ldw	r3,-8(fp)
  8047d8:	e0bff617 	ldw	r2,-40(fp)
  8047dc:	1885c83a 	sub	r2,r3,r2
  8047e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8047e4:	e0fff817 	ldw	r3,-32(fp)
  8047e8:	e0bff617 	ldw	r2,-40(fp)
  8047ec:	1885883a 	add	r2,r3,r2
  8047f0:	10c1ffcc 	andi	r3,r2,2047
  8047f4:	e0bffc17 	ldw	r2,-16(fp)
  8047f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8047fc:	e0bffe17 	ldw	r2,-8(fp)
  804800:	00bfce16 	blt	zero,r2,80473c <__reset+0xff80373c>

    /* If we read any data then return it */
    if (ptr != buffer)
  804804:	e0fff517 	ldw	r3,-44(fp)
  804808:	e0bffd17 	ldw	r2,-12(fp)
  80480c:	18800126 	beq	r3,r2,804814 <altera_avalon_jtag_uart_read+0x104>
      break;
  804810:	00001506 	br	804868 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  804814:	e0bfff17 	ldw	r2,-4(fp)
  804818:	1090000c 	andi	r2,r2,16384
  80481c:	10000126 	beq	r2,zero,804824 <altera_avalon_jtag_uart_read+0x114>
      break;
  804820:	00001106 	br	804868 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  804824:	0001883a 	nop
  804828:	e0bffc17 	ldw	r2,-16(fp)
  80482c:	10c00a17 	ldw	r3,40(r2)
  804830:	e0bff717 	ldw	r2,-36(fp)
  804834:	1880051e 	bne	r3,r2,80484c <altera_avalon_jtag_uart_read+0x13c>
  804838:	e0bffc17 	ldw	r2,-16(fp)
  80483c:	10c00917 	ldw	r3,36(r2)
  804840:	e0bffc17 	ldw	r2,-16(fp)
  804844:	10800117 	ldw	r2,4(r2)
  804848:	18bff736 	bltu	r3,r2,804828 <__reset+0xff803828>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	10c00a17 	ldw	r3,40(r2)
  804854:	e0bff717 	ldw	r2,-36(fp)
  804858:	1880011e 	bne	r3,r2,804860 <altera_avalon_jtag_uart_read+0x150>
      break;
  80485c:	00000206 	br	804868 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804860:	e0bffe17 	ldw	r2,-8(fp)
  804864:	00bfb516 	blt	zero,r2,80473c <__reset+0xff80373c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  804868:	e0fff517 	ldw	r3,-44(fp)
  80486c:	e0bffd17 	ldw	r2,-12(fp)
  804870:	18801826 	beq	r3,r2,8048d4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804874:	0005303a 	rdctl	r2,status
  804878:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80487c:	e0fffa17 	ldw	r3,-24(fp)
  804880:	00bfff84 	movi	r2,-2
  804884:	1884703a 	and	r2,r3,r2
  804888:	1001703a 	wrctl	status,r2
  
  return context;
  80488c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804890:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804894:	e0bffc17 	ldw	r2,-16(fp)
  804898:	10800817 	ldw	r2,32(r2)
  80489c:	10c00054 	ori	r3,r2,1
  8048a0:	e0bffc17 	ldw	r2,-16(fp)
  8048a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8048a8:	e0bffc17 	ldw	r2,-16(fp)
  8048ac:	10800017 	ldw	r2,0(r2)
  8048b0:	10800104 	addi	r2,r2,4
  8048b4:	1007883a 	mov	r3,r2
  8048b8:	e0bffc17 	ldw	r2,-16(fp)
  8048bc:	10800817 	ldw	r2,32(r2)
  8048c0:	18800035 	stwio	r2,0(r3)
  8048c4:	e0bff917 	ldw	r2,-28(fp)
  8048c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8048cc:	e0bffb17 	ldw	r2,-20(fp)
  8048d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8048d4:	e0fff517 	ldw	r3,-44(fp)
  8048d8:	e0bffd17 	ldw	r2,-12(fp)
  8048dc:	18800426 	beq	r3,r2,8048f0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  8048e0:	e0fff517 	ldw	r3,-44(fp)
  8048e4:	e0bffd17 	ldw	r2,-12(fp)
  8048e8:	1885c83a 	sub	r2,r3,r2
  8048ec:	00000606 	br	804908 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  8048f0:	e0bfff17 	ldw	r2,-4(fp)
  8048f4:	1090000c 	andi	r2,r2,16384
  8048f8:	10000226 	beq	r2,zero,804904 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  8048fc:	00bffd44 	movi	r2,-11
  804900:	00000106 	br	804908 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  804904:	00bffec4 	movi	r2,-5
}
  804908:	e037883a 	mov	sp,fp
  80490c:	dfc00117 	ldw	ra,4(sp)
  804910:	df000017 	ldw	fp,0(sp)
  804914:	dec00204 	addi	sp,sp,8
  804918:	f800283a 	ret

0080491c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80491c:	defff304 	addi	sp,sp,-52
  804920:	dfc00c15 	stw	ra,48(sp)
  804924:	df000b15 	stw	fp,44(sp)
  804928:	df000b04 	addi	fp,sp,44
  80492c:	e13ffc15 	stw	r4,-16(fp)
  804930:	e17ffd15 	stw	r5,-12(fp)
  804934:	e1bffe15 	stw	r6,-8(fp)
  804938:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80493c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804940:	e0bffd17 	ldw	r2,-12(fp)
  804944:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804948:	00003806 	br	804a2c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80494c:	e0bffc17 	ldw	r2,-16(fp)
  804950:	10800c17 	ldw	r2,48(r2)
  804954:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  804958:	e0bffc17 	ldw	r2,-16(fp)
  80495c:	10800d17 	ldw	r2,52(r2)
  804960:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  804964:	e0fff817 	ldw	r3,-32(fp)
  804968:	e0bff517 	ldw	r2,-44(fp)
  80496c:	1880062e 	bgeu	r3,r2,804988 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  804970:	e0fff517 	ldw	r3,-44(fp)
  804974:	e0bff817 	ldw	r2,-32(fp)
  804978:	1885c83a 	sub	r2,r3,r2
  80497c:	10bfffc4 	addi	r2,r2,-1
  804980:	e0bff615 	stw	r2,-40(fp)
  804984:	00000b06 	br	8049b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  804988:	e0bff517 	ldw	r2,-44(fp)
  80498c:	10000526 	beq	r2,zero,8049a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804990:	00c20004 	movi	r3,2048
  804994:	e0bff817 	ldw	r2,-32(fp)
  804998:	1885c83a 	sub	r2,r3,r2
  80499c:	e0bff615 	stw	r2,-40(fp)
  8049a0:	00000406 	br	8049b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8049a4:	00c1ffc4 	movi	r3,2047
  8049a8:	e0bff817 	ldw	r2,-32(fp)
  8049ac:	1885c83a 	sub	r2,r3,r2
  8049b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8049b4:	e0bff617 	ldw	r2,-40(fp)
  8049b8:	1000011e 	bne	r2,zero,8049c0 <altera_avalon_jtag_uart_write+0xa4>
        break;
  8049bc:	00001d06 	br	804a34 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  8049c0:	e0fffe17 	ldw	r3,-8(fp)
  8049c4:	e0bff617 	ldw	r2,-40(fp)
  8049c8:	1880022e 	bgeu	r3,r2,8049d4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  8049cc:	e0bffe17 	ldw	r2,-8(fp)
  8049d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8049d4:	e0bff817 	ldw	r2,-32(fp)
  8049d8:	10820e04 	addi	r2,r2,2104
  8049dc:	e0fffc17 	ldw	r3,-16(fp)
  8049e0:	1885883a 	add	r2,r3,r2
  8049e4:	1009883a 	mov	r4,r2
  8049e8:	e17ffd17 	ldw	r5,-12(fp)
  8049ec:	e1bff617 	ldw	r6,-40(fp)
  8049f0:	08010c00 	call	8010c0 <memcpy>
      ptr   += n;
  8049f4:	e0fffd17 	ldw	r3,-12(fp)
  8049f8:	e0bff617 	ldw	r2,-40(fp)
  8049fc:	1885883a 	add	r2,r3,r2
  804a00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  804a04:	e0fffe17 	ldw	r3,-8(fp)
  804a08:	e0bff617 	ldw	r2,-40(fp)
  804a0c:	1885c83a 	sub	r2,r3,r2
  804a10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804a14:	e0fff817 	ldw	r3,-32(fp)
  804a18:	e0bff617 	ldw	r2,-40(fp)
  804a1c:	1885883a 	add	r2,r3,r2
  804a20:	10c1ffcc 	andi	r3,r2,2047
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804a2c:	e0bffe17 	ldw	r2,-8(fp)
  804a30:	00bfc616 	blt	zero,r2,80494c <__reset+0xff80394c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a34:	0005303a 	rdctl	r2,status
  804a38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a3c:	e0fffa17 	ldw	r3,-24(fp)
  804a40:	00bfff84 	movi	r2,-2
  804a44:	1884703a 	and	r2,r3,r2
  804a48:	1001703a 	wrctl	status,r2
  
  return context;
  804a4c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804a50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804a54:	e0bffc17 	ldw	r2,-16(fp)
  804a58:	10800817 	ldw	r2,32(r2)
  804a5c:	10c00094 	ori	r3,r2,2
  804a60:	e0bffc17 	ldw	r2,-16(fp)
  804a64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804a68:	e0bffc17 	ldw	r2,-16(fp)
  804a6c:	10800017 	ldw	r2,0(r2)
  804a70:	10800104 	addi	r2,r2,4
  804a74:	1007883a 	mov	r3,r2
  804a78:	e0bffc17 	ldw	r2,-16(fp)
  804a7c:	10800817 	ldw	r2,32(r2)
  804a80:	18800035 	stwio	r2,0(r3)
  804a84:	e0bff917 	ldw	r2,-28(fp)
  804a88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a8c:	e0bffb17 	ldw	r2,-20(fp)
  804a90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  804a94:	e0bffe17 	ldw	r2,-8(fp)
  804a98:	0080120e 	bge	zero,r2,804ae4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  804a9c:	e0bfff17 	ldw	r2,-4(fp)
  804aa0:	1090000c 	andi	r2,r2,16384
  804aa4:	10000126 	beq	r2,zero,804aac <altera_avalon_jtag_uart_write+0x190>
        break;
  804aa8:	00001006 	br	804aec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804aac:	0001883a 	nop
  804ab0:	e0bffc17 	ldw	r2,-16(fp)
  804ab4:	10c00d17 	ldw	r3,52(r2)
  804ab8:	e0bff517 	ldw	r2,-44(fp)
  804abc:	1880051e 	bne	r3,r2,804ad4 <altera_avalon_jtag_uart_write+0x1b8>
  804ac0:	e0bffc17 	ldw	r2,-16(fp)
  804ac4:	10c00917 	ldw	r3,36(r2)
  804ac8:	e0bffc17 	ldw	r2,-16(fp)
  804acc:	10800117 	ldw	r2,4(r2)
  804ad0:	18bff736 	bltu	r3,r2,804ab0 <__reset+0xff803ab0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  804ad4:	e0bffc17 	ldw	r2,-16(fp)
  804ad8:	10800917 	ldw	r2,36(r2)
  804adc:	10000126 	beq	r2,zero,804ae4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  804ae0:	00000206 	br	804aec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  804ae4:	e0bffe17 	ldw	r2,-8(fp)
  804ae8:	00bf9716 	blt	zero,r2,804948 <__reset+0xff803948>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  804aec:	e0fffd17 	ldw	r3,-12(fp)
  804af0:	e0bff717 	ldw	r2,-36(fp)
  804af4:	18800426 	beq	r3,r2,804b08 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  804af8:	e0fffd17 	ldw	r3,-12(fp)
  804afc:	e0bff717 	ldw	r2,-36(fp)
  804b00:	1885c83a 	sub	r2,r3,r2
  804b04:	00000606 	br	804b20 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  804b08:	e0bfff17 	ldw	r2,-4(fp)
  804b0c:	1090000c 	andi	r2,r2,16384
  804b10:	10000226 	beq	r2,zero,804b1c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  804b14:	00bffd44 	movi	r2,-11
  804b18:	00000106 	br	804b20 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804b1c:	00bffec4 	movi	r2,-5
}
  804b20:	e037883a 	mov	sp,fp
  804b24:	dfc00117 	ldw	ra,4(sp)
  804b28:	df000017 	ldw	fp,0(sp)
  804b2c:	dec00204 	addi	sp,sp,8
  804b30:	f800283a 	ret

00804b34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  804b34:	defffa04 	addi	sp,sp,-24
  804b38:	dfc00515 	stw	ra,20(sp)
  804b3c:	df000415 	stw	fp,16(sp)
  804b40:	df000404 	addi	fp,sp,16
  804b44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  804b48:	0007883a 	mov	r3,zero
  804b4c:	e0bfff17 	ldw	r2,-4(fp)
  804b50:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  804b54:	e0bfff17 	ldw	r2,-4(fp)
  804b58:	10800104 	addi	r2,r2,4
  804b5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b60:	0005303a 	rdctl	r2,status
  804b64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b68:	e0fffd17 	ldw	r3,-12(fp)
  804b6c:	00bfff84 	movi	r2,-2
  804b70:	1884703a 	and	r2,r3,r2
  804b74:	1001703a 	wrctl	status,r2
  
  return context;
  804b78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  804b7c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  804b80:	0805d640 	call	805d64 <alt_tick>
  804b84:	e0bffc17 	ldw	r2,-16(fp)
  804b88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b8c:	e0bffe17 	ldw	r2,-8(fp)
  804b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  804b94:	e037883a 	mov	sp,fp
  804b98:	dfc00117 	ldw	ra,4(sp)
  804b9c:	df000017 	ldw	fp,0(sp)
  804ba0:	dec00204 	addi	sp,sp,8
  804ba4:	f800283a 	ret

00804ba8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  804ba8:	defff804 	addi	sp,sp,-32
  804bac:	dfc00715 	stw	ra,28(sp)
  804bb0:	df000615 	stw	fp,24(sp)
  804bb4:	df000604 	addi	fp,sp,24
  804bb8:	e13ffc15 	stw	r4,-16(fp)
  804bbc:	e17ffd15 	stw	r5,-12(fp)
  804bc0:	e1bffe15 	stw	r6,-8(fp)
  804bc4:	e1ffff15 	stw	r7,-4(fp)
  804bc8:	e0bfff17 	ldw	r2,-4(fp)
  804bcc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  804bd0:	00802074 	movhi	r2,129
  804bd4:	10a09504 	addi	r2,r2,-32172
  804bd8:	10800017 	ldw	r2,0(r2)
  804bdc:	1000041e 	bne	r2,zero,804bf0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  804be0:	00802074 	movhi	r2,129
  804be4:	10a09504 	addi	r2,r2,-32172
  804be8:	e0fffb17 	ldw	r3,-20(fp)
  804bec:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  804bf0:	e0bffc17 	ldw	r2,-16(fp)
  804bf4:	10800104 	addi	r2,r2,4
  804bf8:	00c001c4 	movi	r3,7
  804bfc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  804c00:	d8000015 	stw	zero,0(sp)
  804c04:	e13ffd17 	ldw	r4,-12(fp)
  804c08:	e17ffe17 	ldw	r5,-8(fp)
  804c0c:	01802034 	movhi	r6,128
  804c10:	3192cd04 	addi	r6,r6,19252
  804c14:	e1fffc17 	ldw	r7,-16(fp)
  804c18:	08056000 	call	805600 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  804c1c:	e037883a 	mov	sp,fp
  804c20:	dfc00117 	ldw	ra,4(sp)
  804c24:	df000017 	ldw	fp,0(sp)
  804c28:	dec00204 	addi	sp,sp,8
  804c2c:	f800283a 	ret

00804c30 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  804c30:	defff904 	addi	sp,sp,-28
  804c34:	dfc00615 	stw	ra,24(sp)
  804c38:	df000515 	stw	fp,20(sp)
  804c3c:	df000504 	addi	fp,sp,20
  804c40:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  804c44:	00800144 	movi	r2,5
  804c48:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  804c4c:	00800044 	movi	r2,1
  804c50:	d8800015 	stw	r2,0(sp)
  804c54:	e0bffe44 	addi	r2,fp,-7
  804c58:	d8800115 	stw	r2,4(sp)
  804c5c:	d8000215 	stw	zero,8(sp)
  804c60:	e13fff17 	ldw	r4,-4(fp)
  804c64:	000b883a 	mov	r5,zero
  804c68:	01800044 	movi	r6,1
  804c6c:	e1fffe04 	addi	r7,fp,-8
  804c70:	0805e880 	call	805e88 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  804c74:	e0bffe43 	ldbu	r2,-7(fp)
}
  804c78:	e037883a 	mov	sp,fp
  804c7c:	dfc00117 	ldw	ra,4(sp)
  804c80:	df000017 	ldw	fp,0(sp)
  804c84:	dec00204 	addi	sp,sp,8
  804c88:	f800283a 	ret

00804c8c <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  804c8c:	defffd04 	addi	sp,sp,-12
  804c90:	dfc00215 	stw	ra,8(sp)
  804c94:	df000115 	stw	fp,4(sp)
  804c98:	df000104 	addi	fp,sp,4
  804c9c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  804ca0:	e13fff17 	ldw	r4,-4(fp)
  804ca4:	0804c300 	call	804c30 <epcs_read_status_register>
  804ca8:	10803fcc 	andi	r2,r2,255
  804cac:	1080004c 	andi	r2,r2,1
}
  804cb0:	e037883a 	mov	sp,fp
  804cb4:	dfc00117 	ldw	ra,4(sp)
  804cb8:	df000017 	ldw	fp,0(sp)
  804cbc:	dec00204 	addi	sp,sp,8
  804cc0:	f800283a 	ret

00804cc4 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  804cc4:	defffd04 	addi	sp,sp,-12
  804cc8:	dfc00215 	stw	ra,8(sp)
  804ccc:	df000115 	stw	fp,4(sp)
  804cd0:	df000104 	addi	fp,sp,4
  804cd4:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  804cd8:	0001883a 	nop
  804cdc:	e13fff17 	ldw	r4,-4(fp)
  804ce0:	0804c8c0 	call	804c8c <epcs_test_wip>
  804ce4:	103ffd1e 	bne	r2,zero,804cdc <__reset+0xff803cdc>
  {
  }
}
  804ce8:	e037883a 	mov	sp,fp
  804cec:	dfc00117 	ldw	ra,4(sp)
  804cf0:	df000017 	ldw	fp,0(sp)
  804cf4:	dec00204 	addi	sp,sp,8
  804cf8:	f800283a 	ret

00804cfc <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  804cfc:	defff604 	addi	sp,sp,-40
  804d00:	dfc00915 	stw	ra,36(sp)
  804d04:	df000815 	stw	fp,32(sp)
  804d08:	df000804 	addi	fp,sp,32
  804d0c:	e13ffd15 	stw	r4,-12(fp)
  804d10:	e17ffe15 	stw	r5,-8(fp)
  804d14:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  804d18:	e0bfff17 	ldw	r2,-4(fp)
  804d1c:	10001226 	beq	r2,zero,804d68 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  804d20:	00bff604 	movi	r2,-40
  804d24:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  804d28:	e0bffe17 	ldw	r2,-8(fp)
  804d2c:	1004d63a 	srli	r2,r2,24
  804d30:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  804d34:	e0bffe17 	ldw	r2,-8(fp)
  804d38:	1004d43a 	srli	r2,r2,16
  804d3c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  804d40:	e0bffe17 	ldw	r2,-8(fp)
  804d44:	1004d23a 	srli	r2,r2,8
  804d48:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  804d4c:	e0bffe17 	ldw	r2,-8(fp)
  804d50:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  804d54:	00800144 	movi	r2,5
  804d58:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  804d5c:	e13ffd17 	ldw	r4,-12(fp)
  804d60:	08051a40 	call	8051a4 <epcs_enter_4_bytes_mode>
  804d64:	00000c06 	br	804d98 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  804d68:	00bff604 	movi	r2,-40
  804d6c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  804d70:	e0bffe17 	ldw	r2,-8(fp)
  804d74:	1004d43a 	srli	r2,r2,16
  804d78:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  804d7c:	e0bffe17 	ldw	r2,-8(fp)
  804d80:	1004d23a 	srli	r2,r2,8
  804d84:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  804d88:	e0bffe17 	ldw	r2,-8(fp)
  804d8c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  804d90:	00800104 	movi	r2,4
  804d94:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  804d98:	e13ffd17 	ldw	r4,-12(fp)
  804d9c:	0804ee80 	call	804ee8 <epcs_write_enable>

  alt_avalon_spi_command(
  804da0:	e0fffb03 	ldbu	r3,-20(fp)
  804da4:	e0bffb44 	addi	r2,fp,-19
  804da8:	d8000015 	stw	zero,0(sp)
  804dac:	d8000115 	stw	zero,4(sp)
  804db0:	d8000215 	stw	zero,8(sp)
  804db4:	e13ffd17 	ldw	r4,-12(fp)
  804db8:	000b883a 	mov	r5,zero
  804dbc:	180d883a 	mov	r6,r3
  804dc0:	100f883a 	mov	r7,r2
  804dc4:	0805e880 	call	805e88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  804dc8:	e13ffd17 	ldw	r4,-12(fp)
  804dcc:	0804cc40 	call	804cc4 <epcs_await_wip_released>

  if(four_bytes_mode)
  804dd0:	e0bfff17 	ldw	r2,-4(fp)
  804dd4:	10000226 	beq	r2,zero,804de0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  804dd8:	e13ffd17 	ldw	r4,-12(fp)
  804ddc:	08052000 	call	805200 <epcs_exit_4_bytes_mode>
  }
}
  804de0:	e037883a 	mov	sp,fp
  804de4:	dfc00117 	ldw	ra,4(sp)
  804de8:	df000017 	ldw	fp,0(sp)
  804dec:	dec00204 	addi	sp,sp,8
  804df0:	f800283a 	ret

00804df4 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  804df4:	defff404 	addi	sp,sp,-48
  804df8:	dfc00b15 	stw	ra,44(sp)
  804dfc:	df000a15 	stw	fp,40(sp)
  804e00:	df000a04 	addi	fp,sp,40
  804e04:	e13ffc15 	stw	r4,-16(fp)
  804e08:	e17ffd15 	stw	r5,-12(fp)
  804e0c:	e1bffe15 	stw	r6,-8(fp)
  804e10:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  804e14:	008000c4 	movi	r2,3
  804e18:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  804e1c:	e0800217 	ldw	r2,8(fp)
  804e20:	10001026 	beq	r2,zero,804e64 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  804e24:	e0bffd17 	ldw	r2,-12(fp)
  804e28:	1004d63a 	srli	r2,r2,24
  804e2c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  804e30:	e0bffd17 	ldw	r2,-12(fp)
  804e34:	1005d43a 	srai	r2,r2,16
  804e38:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  804e3c:	e0bffd17 	ldw	r2,-12(fp)
  804e40:	1005d23a 	srai	r2,r2,8
  804e44:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  804e48:	e0bffd17 	ldw	r2,-12(fp)
  804e4c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  804e50:	00800144 	movi	r2,5
  804e54:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  804e58:	e13ffc17 	ldw	r4,-16(fp)
  804e5c:	08051a40 	call	8051a4 <epcs_enter_4_bytes_mode>
  804e60:	00000a06 	br	804e8c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  804e64:	e0bffd17 	ldw	r2,-12(fp)
  804e68:	1005d43a 	srai	r2,r2,16
  804e6c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  804e70:	e0bffd17 	ldw	r2,-12(fp)
  804e74:	1005d23a 	srai	r2,r2,8
  804e78:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  804e7c:	e0bffd17 	ldw	r2,-12(fp)
  804e80:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  804e84:	00800104 	movi	r2,4
  804e88:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  804e8c:	e13ffc17 	ldw	r4,-16(fp)
  804e90:	0804cc40 	call	804cc4 <epcs_await_wip_released>

  alt_avalon_spi_command(
  804e94:	e0bfff17 	ldw	r2,-4(fp)
  804e98:	e0fffa04 	addi	r3,fp,-24
  804e9c:	d8800015 	stw	r2,0(sp)
  804ea0:	e0bffe17 	ldw	r2,-8(fp)
  804ea4:	d8800115 	stw	r2,4(sp)
  804ea8:	d8000215 	stw	zero,8(sp)
  804eac:	e13ffc17 	ldw	r4,-16(fp)
  804eb0:	000b883a 	mov	r5,zero
  804eb4:	e1bff917 	ldw	r6,-28(fp)
  804eb8:	180f883a 	mov	r7,r3
  804ebc:	0805e880 	call	805e88 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  804ec0:	e0800217 	ldw	r2,8(fp)
  804ec4:	10000226 	beq	r2,zero,804ed0 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  804ec8:	e13ffc17 	ldw	r4,-16(fp)
  804ecc:	08052000 	call	805200 <epcs_exit_4_bytes_mode>
  }

  return length;
  804ed0:	e0bfff17 	ldw	r2,-4(fp)
}
  804ed4:	e037883a 	mov	sp,fp
  804ed8:	dfc00117 	ldw	ra,4(sp)
  804edc:	df000017 	ldw	fp,0(sp)
  804ee0:	dec00204 	addi	sp,sp,8
  804ee4:	f800283a 	ret

00804ee8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  804ee8:	defff904 	addi	sp,sp,-28
  804eec:	dfc00615 	stw	ra,24(sp)
  804ef0:	df000515 	stw	fp,20(sp)
  804ef4:	df000504 	addi	fp,sp,20
  804ef8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  804efc:	00800184 	movi	r2,6
  804f00:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  804f04:	d8000015 	stw	zero,0(sp)
  804f08:	d8000115 	stw	zero,4(sp)
  804f0c:	d8000215 	stw	zero,8(sp)
  804f10:	e13fff17 	ldw	r4,-4(fp)
  804f14:	000b883a 	mov	r5,zero
  804f18:	01800044 	movi	r6,1
  804f1c:	e1fffe04 	addi	r7,fp,-8
  804f20:	0805e880 	call	805e88 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  804f24:	e037883a 	mov	sp,fp
  804f28:	dfc00117 	ldw	ra,4(sp)
  804f2c:	df000017 	ldw	fp,0(sp)
  804f30:	dec00204 	addi	sp,sp,8
  804f34:	f800283a 	ret

00804f38 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  804f38:	defff804 	addi	sp,sp,-32
  804f3c:	dfc00715 	stw	ra,28(sp)
  804f40:	df000615 	stw	fp,24(sp)
  804f44:	df000604 	addi	fp,sp,24
  804f48:	e13ffe15 	stw	r4,-8(fp)
  804f4c:	2805883a 	mov	r2,r5
  804f50:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  804f54:	00800044 	movi	r2,1
  804f58:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  804f5c:	e0bfff03 	ldbu	r2,-4(fp)
  804f60:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  804f64:	d8000015 	stw	zero,0(sp)
  804f68:	d8000115 	stw	zero,4(sp)
  804f6c:	d8000215 	stw	zero,8(sp)
  804f70:	e13ffe17 	ldw	r4,-8(fp)
  804f74:	000b883a 	mov	r5,zero
  804f78:	01800084 	movi	r6,2
  804f7c:	e1fffd04 	addi	r7,fp,-12
  804f80:	0805e880 	call	805e88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  804f84:	e13ffe17 	ldw	r4,-8(fp)
  804f88:	0804cc40 	call	804cc4 <epcs_await_wip_released>
}
  804f8c:	e037883a 	mov	sp,fp
  804f90:	dfc00117 	ldw	ra,4(sp)
  804f94:	df000017 	ldw	fp,0(sp)
  804f98:	dec00204 	addi	sp,sp,8
  804f9c:	f800283a 	ret

00804fa0 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  804fa0:	defff404 	addi	sp,sp,-48
  804fa4:	dfc00b15 	stw	ra,44(sp)
  804fa8:	df000a15 	stw	fp,40(sp)
  804fac:	df000a04 	addi	fp,sp,40
  804fb0:	e13ffc15 	stw	r4,-16(fp)
  804fb4:	e17ffd15 	stw	r5,-12(fp)
  804fb8:	e1bffe15 	stw	r6,-8(fp)
  804fbc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  804fc0:	00800084 	movi	r2,2
  804fc4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  804fc8:	e0800217 	ldw	r2,8(fp)
  804fcc:	10001026 	beq	r2,zero,805010 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  804fd0:	e0bffd17 	ldw	r2,-12(fp)
  804fd4:	1004d63a 	srli	r2,r2,24
  804fd8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  804fdc:	e0bffd17 	ldw	r2,-12(fp)
  804fe0:	1005d43a 	srai	r2,r2,16
  804fe4:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  804fe8:	e0bffd17 	ldw	r2,-12(fp)
  804fec:	1005d23a 	srai	r2,r2,8
  804ff0:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  804ff4:	e0bffd17 	ldw	r2,-12(fp)
  804ff8:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  804ffc:	00800144 	movi	r2,5
  805000:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  805004:	e13ffc17 	ldw	r4,-16(fp)
  805008:	08051a40 	call	8051a4 <epcs_enter_4_bytes_mode>
  80500c:	00000a06 	br	805038 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  805010:	e0bffd17 	ldw	r2,-12(fp)
  805014:	1005d43a 	srai	r2,r2,16
  805018:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  80501c:	e0bffd17 	ldw	r2,-12(fp)
  805020:	1005d23a 	srai	r2,r2,8
  805024:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  805028:	e0bffd17 	ldw	r2,-12(fp)
  80502c:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  805030:	00800104 	movi	r2,4
  805034:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  805038:	e13ffc17 	ldw	r4,-16(fp)
  80503c:	0804ee80 	call	804ee8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  805040:	e0fffa04 	addi	r3,fp,-24
  805044:	d8000015 	stw	zero,0(sp)
  805048:	d8000115 	stw	zero,4(sp)
  80504c:	00800044 	movi	r2,1
  805050:	d8800215 	stw	r2,8(sp)
  805054:	e13ffc17 	ldw	r4,-16(fp)
  805058:	000b883a 	mov	r5,zero
  80505c:	e1bff917 	ldw	r6,-28(fp)
  805060:	180f883a 	mov	r7,r3
  805064:	0805e880 	call	805e88 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  805068:	e0bfff17 	ldw	r2,-4(fp)
  80506c:	d8000015 	stw	zero,0(sp)
  805070:	d8000115 	stw	zero,4(sp)
  805074:	d8000215 	stw	zero,8(sp)
  805078:	e13ffc17 	ldw	r4,-16(fp)
  80507c:	000b883a 	mov	r5,zero
  805080:	100d883a 	mov	r6,r2
  805084:	e1fffe17 	ldw	r7,-8(fp)
  805088:	0805e880 	call	805e88 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  80508c:	e13ffc17 	ldw	r4,-16(fp)
  805090:	0804cc40 	call	804cc4 <epcs_await_wip_released>

  if(four_bytes_mode)
  805094:	e0800217 	ldw	r2,8(fp)
  805098:	10000226 	beq	r2,zero,8050a4 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  80509c:	e13ffc17 	ldw	r4,-16(fp)
  8050a0:	08052000 	call	805200 <epcs_exit_4_bytes_mode>
  }

  return length;
  8050a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8050a8:	e037883a 	mov	sp,fp
  8050ac:	dfc00117 	ldw	ra,4(sp)
  8050b0:	df000017 	ldw	fp,0(sp)
  8050b4:	dec00204 	addi	sp,sp,8
  8050b8:	f800283a 	ret

008050bc <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  8050bc:	defff804 	addi	sp,sp,-32
  8050c0:	dfc00715 	stw	ra,28(sp)
  8050c4:	df000615 	stw	fp,24(sp)
  8050c8:	df000604 	addi	fp,sp,24
  8050cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  8050d0:	00bfeac4 	movi	r2,-85
  8050d4:	e0bffd05 	stb	r2,-12(fp)
  8050d8:	e03ffd45 	stb	zero,-11(fp)
  8050dc:	e03ffd85 	stb	zero,-10(fp)
  8050e0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  8050e4:	00800044 	movi	r2,1
  8050e8:	d8800015 	stw	r2,0(sp)
  8050ec:	e0bffe04 	addi	r2,fp,-8
  8050f0:	d8800115 	stw	r2,4(sp)
  8050f4:	d8000215 	stw	zero,8(sp)
  8050f8:	e13fff17 	ldw	r4,-4(fp)
  8050fc:	000b883a 	mov	r5,zero
  805100:	01800104 	movi	r6,4
  805104:	e1fffd04 	addi	r7,fp,-12
  805108:	0805e880 	call	805e88 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  80510c:	e0bffe03 	ldbu	r2,-8(fp)
}
  805110:	e037883a 	mov	sp,fp
  805114:	dfc00117 	ldw	ra,4(sp)
  805118:	df000017 	ldw	fp,0(sp)
  80511c:	dec00204 	addi	sp,sp,8
  805120:	f800283a 	ret

00805124 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  805124:	defff904 	addi	sp,sp,-28
  805128:	dfc00615 	stw	ra,24(sp)
  80512c:	df000515 	stw	fp,20(sp)
  805130:	df000504 	addi	fp,sp,20
  805134:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  805138:	00bfe7c4 	movi	r2,-97
  80513c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  805140:	008000c4 	movi	r2,3
  805144:	d8800015 	stw	r2,0(sp)
  805148:	e0bffe44 	addi	r2,fp,-7
  80514c:	d8800115 	stw	r2,4(sp)
  805150:	d8000215 	stw	zero,8(sp)
  805154:	e13fff17 	ldw	r4,-4(fp)
  805158:	000b883a 	mov	r5,zero
  80515c:	01800044 	movi	r6,1
  805160:	e1fffe04 	addi	r7,fp,-8
  805164:	0805e880 	call	805e88 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  805168:	e0bffe43 	ldbu	r2,-7(fp)
  80516c:	10803fcc 	andi	r2,r2,255
  805170:	1006943a 	slli	r3,r2,16
  805174:	e0bffe83 	ldbu	r2,-6(fp)
  805178:	10803fcc 	andi	r2,r2,255
  80517c:	1004923a 	slli	r2,r2,8
  805180:	1886b03a 	or	r3,r3,r2
  805184:	e0bffec3 	ldbu	r2,-5(fp)
  805188:	10803fcc 	andi	r2,r2,255
  80518c:	1884b03a 	or	r2,r3,r2
}
  805190:	e037883a 	mov	sp,fp
  805194:	dfc00117 	ldw	ra,4(sp)
  805198:	df000017 	ldw	fp,0(sp)
  80519c:	dec00204 	addi	sp,sp,8
  8051a0:	f800283a 	ret

008051a4 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  8051a4:	defff904 	addi	sp,sp,-28
  8051a8:	dfc00615 	stw	ra,24(sp)
  8051ac:	df000515 	stw	fp,20(sp)
  8051b0:	df000504 	addi	fp,sp,20
  8051b4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  8051b8:	00bfedc4 	movi	r2,-73
  8051bc:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  8051c0:	e13fff17 	ldw	r4,-4(fp)
  8051c4:	0804ee80 	call	804ee8 <epcs_write_enable>

  alt_avalon_spi_command(
  8051c8:	d8000015 	stw	zero,0(sp)
  8051cc:	d8000115 	stw	zero,4(sp)
  8051d0:	d8000215 	stw	zero,8(sp)
  8051d4:	e13fff17 	ldw	r4,-4(fp)
  8051d8:	000b883a 	mov	r5,zero
  8051dc:	01800044 	movi	r6,1
  8051e0:	e1fffe04 	addi	r7,fp,-8
  8051e4:	0805e880 	call	805e88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  8051e8:	0001883a 	nop
}
  8051ec:	e037883a 	mov	sp,fp
  8051f0:	dfc00117 	ldw	ra,4(sp)
  8051f4:	df000017 	ldw	fp,0(sp)
  8051f8:	dec00204 	addi	sp,sp,8
  8051fc:	f800283a 	ret

00805200 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  805200:	defff904 	addi	sp,sp,-28
  805204:	dfc00615 	stw	ra,24(sp)
  805208:	df000515 	stw	fp,20(sp)
  80520c:	df000504 	addi	fp,sp,20
  805210:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  805214:	00bffa44 	movi	r2,-23
  805218:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  80521c:	e13fff17 	ldw	r4,-4(fp)
  805220:	0804ee80 	call	804ee8 <epcs_write_enable>

  alt_avalon_spi_command(
  805224:	d8000015 	stw	zero,0(sp)
  805228:	d8000115 	stw	zero,4(sp)
  80522c:	d8000215 	stw	zero,8(sp)
  805230:	e13fff17 	ldw	r4,-4(fp)
  805234:	000b883a 	mov	r5,zero
  805238:	01800044 	movi	r6,1
  80523c:	e1fffe04 	addi	r7,fp,-8
  805240:	0805e880 	call	805e88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  805244:	0001883a 	nop
}
  805248:	e037883a 	mov	sp,fp
  80524c:	dfc00117 	ldw	ra,4(sp)
  805250:	df000017 	ldw	fp,0(sp)
  805254:	dec00204 	addi	sp,sp,8
  805258:	f800283a 	ret

0080525c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80525c:	defff504 	addi	sp,sp,-44
  805260:	df000a15 	stw	fp,40(sp)
  805264:	df000a04 	addi	fp,sp,40
  805268:	e13ffc15 	stw	r4,-16(fp)
  80526c:	e17ffd15 	stw	r5,-12(fp)
  805270:	e1bffe15 	stw	r6,-8(fp)
  805274:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  805278:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80527c:	00802074 	movhi	r2,129
  805280:	10a09504 	addi	r2,r2,-32172
  805284:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  805288:	10003f26 	beq	r2,zero,805388 <alt_alarm_start+0x12c>
  {
    if (alarm)
  80528c:	e0bffc17 	ldw	r2,-16(fp)
  805290:	10003b26 	beq	r2,zero,805380 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  805294:	e0bffc17 	ldw	r2,-16(fp)
  805298:	e0fffe17 	ldw	r3,-8(fp)
  80529c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8052a0:	e0bffc17 	ldw	r2,-16(fp)
  8052a4:	e0ffff17 	ldw	r3,-4(fp)
  8052a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8052ac:	0005303a 	rdctl	r2,status
  8052b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8052b4:	e0fff817 	ldw	r3,-32(fp)
  8052b8:	00bfff84 	movi	r2,-2
  8052bc:	1884703a 	and	r2,r3,r2
  8052c0:	1001703a 	wrctl	status,r2
  
  return context;
  8052c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8052c8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8052cc:	00802074 	movhi	r2,129
  8052d0:	10a09604 	addi	r2,r2,-32168
  8052d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8052d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8052dc:	e0fffd17 	ldw	r3,-12(fp)
  8052e0:	e0bff617 	ldw	r2,-40(fp)
  8052e4:	1885883a 	add	r2,r3,r2
  8052e8:	10c00044 	addi	r3,r2,1
  8052ec:	e0bffc17 	ldw	r2,-16(fp)
  8052f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8052f4:	e0bffc17 	ldw	r2,-16(fp)
  8052f8:	10c00217 	ldw	r3,8(r2)
  8052fc:	e0bff617 	ldw	r2,-40(fp)
  805300:	1880042e 	bgeu	r3,r2,805314 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  805304:	e0bffc17 	ldw	r2,-16(fp)
  805308:	00c00044 	movi	r3,1
  80530c:	10c00405 	stb	r3,16(r2)
  805310:	00000206 	br	80531c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  805314:	e0bffc17 	ldw	r2,-16(fp)
  805318:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80531c:	e0fffc17 	ldw	r3,-16(fp)
  805320:	00802074 	movhi	r2,129
  805324:	10a08b04 	addi	r2,r2,-32212
  805328:	e0bff915 	stw	r2,-28(fp)
  80532c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805330:	e0bffa17 	ldw	r2,-24(fp)
  805334:	e0fff917 	ldw	r3,-28(fp)
  805338:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80533c:	e0bff917 	ldw	r2,-28(fp)
  805340:	10c00017 	ldw	r3,0(r2)
  805344:	e0bffa17 	ldw	r2,-24(fp)
  805348:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80534c:	e0bff917 	ldw	r2,-28(fp)
  805350:	10800017 	ldw	r2,0(r2)
  805354:	e0fffa17 	ldw	r3,-24(fp)
  805358:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80535c:	e0bff917 	ldw	r2,-28(fp)
  805360:	e0fffa17 	ldw	r3,-24(fp)
  805364:	10c00015 	stw	r3,0(r2)
  805368:	e0bff717 	ldw	r2,-36(fp)
  80536c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805370:	e0bffb17 	ldw	r2,-20(fp)
  805374:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  805378:	0005883a 	mov	r2,zero
  80537c:	00000306 	br	80538c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  805380:	00bffa84 	movi	r2,-22
  805384:	00000106 	br	80538c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  805388:	00bfde84 	movi	r2,-134
  }
}
  80538c:	e037883a 	mov	sp,fp
  805390:	df000017 	ldw	fp,0(sp)
  805394:	dec00104 	addi	sp,sp,4
  805398:	f800283a 	ret

0080539c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80539c:	defffe04 	addi	sp,sp,-8
  8053a0:	dfc00115 	stw	ra,4(sp)
  8053a4:	df000015 	stw	fp,0(sp)
  8053a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8053ac:	00802074 	movhi	r2,129
  8053b0:	10a08604 	addi	r2,r2,-32232
  8053b4:	10800017 	ldw	r2,0(r2)
  8053b8:	10000526 	beq	r2,zero,8053d0 <alt_get_errno+0x34>
  8053bc:	00802074 	movhi	r2,129
  8053c0:	10a08604 	addi	r2,r2,-32232
  8053c4:	10800017 	ldw	r2,0(r2)
  8053c8:	103ee83a 	callr	r2
  8053cc:	00000206 	br	8053d8 <alt_get_errno+0x3c>
  8053d0:	00802074 	movhi	r2,129
  8053d4:	10a09004 	addi	r2,r2,-32192
}
  8053d8:	e037883a 	mov	sp,fp
  8053dc:	dfc00117 	ldw	ra,4(sp)
  8053e0:	df000017 	ldw	fp,0(sp)
  8053e4:	dec00204 	addi	sp,sp,8
  8053e8:	f800283a 	ret

008053ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8053ec:	defffa04 	addi	sp,sp,-24
  8053f0:	dfc00515 	stw	ra,20(sp)
  8053f4:	df000415 	stw	fp,16(sp)
  8053f8:	df000404 	addi	fp,sp,16
  8053fc:	e13ffe15 	stw	r4,-8(fp)
  805400:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805404:	e0bffe17 	ldw	r2,-8(fp)
  805408:	10000326 	beq	r2,zero,805418 <alt_dev_llist_insert+0x2c>
  80540c:	e0bffe17 	ldw	r2,-8(fp)
  805410:	10800217 	ldw	r2,8(r2)
  805414:	1000061e 	bne	r2,zero,805430 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  805418:	080539c0 	call	80539c <alt_get_errno>
  80541c:	1007883a 	mov	r3,r2
  805420:	00800584 	movi	r2,22
  805424:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  805428:	00bffa84 	movi	r2,-22
  80542c:	00001306 	br	80547c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  805430:	e0bffe17 	ldw	r2,-8(fp)
  805434:	e0ffff17 	ldw	r3,-4(fp)
  805438:	e0fffc15 	stw	r3,-16(fp)
  80543c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805440:	e0bffd17 	ldw	r2,-12(fp)
  805444:	e0fffc17 	ldw	r3,-16(fp)
  805448:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80544c:	e0bffc17 	ldw	r2,-16(fp)
  805450:	10c00017 	ldw	r3,0(r2)
  805454:	e0bffd17 	ldw	r2,-12(fp)
  805458:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80545c:	e0bffc17 	ldw	r2,-16(fp)
  805460:	10800017 	ldw	r2,0(r2)
  805464:	e0fffd17 	ldw	r3,-12(fp)
  805468:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80546c:	e0bffc17 	ldw	r2,-16(fp)
  805470:	e0fffd17 	ldw	r3,-12(fp)
  805474:	10c00015 	stw	r3,0(r2)

  return 0;  
  805478:	0005883a 	mov	r2,zero
}
  80547c:	e037883a 	mov	sp,fp
  805480:	dfc00117 	ldw	ra,4(sp)
  805484:	df000017 	ldw	fp,0(sp)
  805488:	dec00204 	addi	sp,sp,8
  80548c:	f800283a 	ret

00805490 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  805490:	defffd04 	addi	sp,sp,-12
  805494:	dfc00215 	stw	ra,8(sp)
  805498:	df000115 	stw	fp,4(sp)
  80549c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8054a0:	00802034 	movhi	r2,128
  8054a4:	1099a904 	addi	r2,r2,26276
  8054a8:	e0bfff15 	stw	r2,-4(fp)
  8054ac:	00000606 	br	8054c8 <_do_ctors+0x38>
        (*ctor) (); 
  8054b0:	e0bfff17 	ldw	r2,-4(fp)
  8054b4:	10800017 	ldw	r2,0(r2)
  8054b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8054bc:	e0bfff17 	ldw	r2,-4(fp)
  8054c0:	10bfff04 	addi	r2,r2,-4
  8054c4:	e0bfff15 	stw	r2,-4(fp)
  8054c8:	e0ffff17 	ldw	r3,-4(fp)
  8054cc:	00802034 	movhi	r2,128
  8054d0:	1099aa04 	addi	r2,r2,26280
  8054d4:	18bff62e 	bgeu	r3,r2,8054b0 <__reset+0xff8044b0>
        (*ctor) (); 
}
  8054d8:	e037883a 	mov	sp,fp
  8054dc:	dfc00117 	ldw	ra,4(sp)
  8054e0:	df000017 	ldw	fp,0(sp)
  8054e4:	dec00204 	addi	sp,sp,8
  8054e8:	f800283a 	ret

008054ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8054ec:	defffd04 	addi	sp,sp,-12
  8054f0:	dfc00215 	stw	ra,8(sp)
  8054f4:	df000115 	stw	fp,4(sp)
  8054f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8054fc:	00802034 	movhi	r2,128
  805500:	1099a904 	addi	r2,r2,26276
  805504:	e0bfff15 	stw	r2,-4(fp)
  805508:	00000606 	br	805524 <_do_dtors+0x38>
        (*dtor) (); 
  80550c:	e0bfff17 	ldw	r2,-4(fp)
  805510:	10800017 	ldw	r2,0(r2)
  805514:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805518:	e0bfff17 	ldw	r2,-4(fp)
  80551c:	10bfff04 	addi	r2,r2,-4
  805520:	e0bfff15 	stw	r2,-4(fp)
  805524:	e0ffff17 	ldw	r3,-4(fp)
  805528:	00802034 	movhi	r2,128
  80552c:	1099aa04 	addi	r2,r2,26280
  805530:	18bff62e 	bgeu	r3,r2,80550c <__reset+0xff80450c>
        (*dtor) (); 
}
  805534:	e037883a 	mov	sp,fp
  805538:	dfc00117 	ldw	ra,4(sp)
  80553c:	df000017 	ldw	fp,0(sp)
  805540:	dec00204 	addi	sp,sp,8
  805544:	f800283a 	ret

00805548 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  805548:	defffc04 	addi	sp,sp,-16
  80554c:	dfc00315 	stw	ra,12(sp)
  805550:	df000215 	stw	fp,8(sp)
  805554:	df000204 	addi	fp,sp,8
  805558:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  80555c:	e13fff17 	ldw	r4,-4(fp)
  805560:	d1600b04 	addi	r5,gp,-32724
  805564:	080608c0 	call	80608c <alt_find_dev>
  805568:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  80556c:	e0bffe17 	ldw	r2,-8(fp)
  805570:	10000926 	beq	r2,zero,805598 <alt_flash_open_dev+0x50>
  805574:	e0bffe17 	ldw	r2,-8(fp)
  805578:	10800317 	ldw	r2,12(r2)
  80557c:	10000626 	beq	r2,zero,805598 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  805580:	e0bffe17 	ldw	r2,-8(fp)
  805584:	10800317 	ldw	r2,12(r2)
  805588:	e13ffe17 	ldw	r4,-8(fp)
  80558c:	e17fff17 	ldw	r5,-4(fp)
  805590:	103ee83a 	callr	r2
  805594:	00000106 	br	80559c <alt_flash_open_dev+0x54>
  }

  return dev;
  805598:	e0bffe17 	ldw	r2,-8(fp)
}
  80559c:	e037883a 	mov	sp,fp
  8055a0:	dfc00117 	ldw	ra,4(sp)
  8055a4:	df000017 	ldw	fp,0(sp)
  8055a8:	dec00204 	addi	sp,sp,8
  8055ac:	f800283a 	ret

008055b0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  8055b0:	defffd04 	addi	sp,sp,-12
  8055b4:	dfc00215 	stw	ra,8(sp)
  8055b8:	df000115 	stw	fp,4(sp)
  8055bc:	df000104 	addi	fp,sp,4
  8055c0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  8055c4:	e0bfff17 	ldw	r2,-4(fp)
  8055c8:	10000726 	beq	r2,zero,8055e8 <alt_flash_close_dev+0x38>
  8055cc:	e0bfff17 	ldw	r2,-4(fp)
  8055d0:	10800417 	ldw	r2,16(r2)
  8055d4:	10000426 	beq	r2,zero,8055e8 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
  8055d8:	e0bfff17 	ldw	r2,-4(fp)
  8055dc:	10800417 	ldw	r2,16(r2)
  8055e0:	e13fff17 	ldw	r4,-4(fp)
  8055e4:	103ee83a 	callr	r2
  }
  return;
  8055e8:	0001883a 	nop
}
  8055ec:	e037883a 	mov	sp,fp
  8055f0:	dfc00117 	ldw	ra,4(sp)
  8055f4:	df000017 	ldw	fp,0(sp)
  8055f8:	dec00204 	addi	sp,sp,8
  8055fc:	f800283a 	ret

00805600 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805600:	defff904 	addi	sp,sp,-28
  805604:	dfc00615 	stw	ra,24(sp)
  805608:	df000515 	stw	fp,20(sp)
  80560c:	df000504 	addi	fp,sp,20
  805610:	e13ffc15 	stw	r4,-16(fp)
  805614:	e17ffd15 	stw	r5,-12(fp)
  805618:	e1bffe15 	stw	r6,-8(fp)
  80561c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  805620:	e0800217 	ldw	r2,8(fp)
  805624:	d8800015 	stw	r2,0(sp)
  805628:	e13ffc17 	ldw	r4,-16(fp)
  80562c:	e17ffd17 	ldw	r5,-12(fp)
  805630:	e1bffe17 	ldw	r6,-8(fp)
  805634:	e1ffff17 	ldw	r7,-4(fp)
  805638:	08057e00 	call	8057e0 <alt_iic_isr_register>
}  
  80563c:	e037883a 	mov	sp,fp
  805640:	dfc00117 	ldw	ra,4(sp)
  805644:	df000017 	ldw	fp,0(sp)
  805648:	dec00204 	addi	sp,sp,8
  80564c:	f800283a 	ret

00805650 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  805650:	defff904 	addi	sp,sp,-28
  805654:	df000615 	stw	fp,24(sp)
  805658:	df000604 	addi	fp,sp,24
  80565c:	e13ffe15 	stw	r4,-8(fp)
  805660:	e17fff15 	stw	r5,-4(fp)
  805664:	e0bfff17 	ldw	r2,-4(fp)
  805668:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80566c:	0005303a 	rdctl	r2,status
  805670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805674:	e0fffb17 	ldw	r3,-20(fp)
  805678:	00bfff84 	movi	r2,-2
  80567c:	1884703a 	and	r2,r3,r2
  805680:	1001703a 	wrctl	status,r2
  
  return context;
  805684:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805688:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80568c:	e0bffa17 	ldw	r2,-24(fp)
  805690:	00c00044 	movi	r3,1
  805694:	1884983a 	sll	r2,r3,r2
  805698:	1007883a 	mov	r3,r2
  80569c:	00802074 	movhi	r2,129
  8056a0:	10a09404 	addi	r2,r2,-32176
  8056a4:	10800017 	ldw	r2,0(r2)
  8056a8:	1886b03a 	or	r3,r3,r2
  8056ac:	00802074 	movhi	r2,129
  8056b0:	10a09404 	addi	r2,r2,-32176
  8056b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8056b8:	00802074 	movhi	r2,129
  8056bc:	10a09404 	addi	r2,r2,-32176
  8056c0:	10800017 	ldw	r2,0(r2)
  8056c4:	100170fa 	wrctl	ienable,r2
  8056c8:	e0bffc17 	ldw	r2,-16(fp)
  8056cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8056d0:	e0bffd17 	ldw	r2,-12(fp)
  8056d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8056d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8056dc:	0001883a 	nop
}
  8056e0:	e037883a 	mov	sp,fp
  8056e4:	df000017 	ldw	fp,0(sp)
  8056e8:	dec00104 	addi	sp,sp,4
  8056ec:	f800283a 	ret

008056f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8056f0:	defff904 	addi	sp,sp,-28
  8056f4:	df000615 	stw	fp,24(sp)
  8056f8:	df000604 	addi	fp,sp,24
  8056fc:	e13ffe15 	stw	r4,-8(fp)
  805700:	e17fff15 	stw	r5,-4(fp)
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80570c:	0005303a 	rdctl	r2,status
  805710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805714:	e0fffb17 	ldw	r3,-20(fp)
  805718:	00bfff84 	movi	r2,-2
  80571c:	1884703a 	and	r2,r3,r2
  805720:	1001703a 	wrctl	status,r2
  
  return context;
  805724:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805728:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80572c:	e0bffa17 	ldw	r2,-24(fp)
  805730:	00c00044 	movi	r3,1
  805734:	1884983a 	sll	r2,r3,r2
  805738:	0084303a 	nor	r2,zero,r2
  80573c:	1007883a 	mov	r3,r2
  805740:	00802074 	movhi	r2,129
  805744:	10a09404 	addi	r2,r2,-32176
  805748:	10800017 	ldw	r2,0(r2)
  80574c:	1886703a 	and	r3,r3,r2
  805750:	00802074 	movhi	r2,129
  805754:	10a09404 	addi	r2,r2,-32176
  805758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80575c:	00802074 	movhi	r2,129
  805760:	10a09404 	addi	r2,r2,-32176
  805764:	10800017 	ldw	r2,0(r2)
  805768:	100170fa 	wrctl	ienable,r2
  80576c:	e0bffc17 	ldw	r2,-16(fp)
  805770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805774:	e0bffd17 	ldw	r2,-12(fp)
  805778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80577c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  805780:	0001883a 	nop
}
  805784:	e037883a 	mov	sp,fp
  805788:	df000017 	ldw	fp,0(sp)
  80578c:	dec00104 	addi	sp,sp,4
  805790:	f800283a 	ret

00805794 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  805794:	defffc04 	addi	sp,sp,-16
  805798:	df000315 	stw	fp,12(sp)
  80579c:	df000304 	addi	fp,sp,12
  8057a0:	e13ffe15 	stw	r4,-8(fp)
  8057a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8057a8:	000530fa 	rdctl	r2,ienable
  8057ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8057b0:	e0bfff17 	ldw	r2,-4(fp)
  8057b4:	00c00044 	movi	r3,1
  8057b8:	1884983a 	sll	r2,r3,r2
  8057bc:	1007883a 	mov	r3,r2
  8057c0:	e0bffd17 	ldw	r2,-12(fp)
  8057c4:	1884703a 	and	r2,r3,r2
  8057c8:	1004c03a 	cmpne	r2,r2,zero
  8057cc:	10803fcc 	andi	r2,r2,255
}
  8057d0:	e037883a 	mov	sp,fp
  8057d4:	df000017 	ldw	fp,0(sp)
  8057d8:	dec00104 	addi	sp,sp,4
  8057dc:	f800283a 	ret

008057e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8057e0:	defff504 	addi	sp,sp,-44
  8057e4:	dfc00a15 	stw	ra,40(sp)
  8057e8:	df000915 	stw	fp,36(sp)
  8057ec:	df000904 	addi	fp,sp,36
  8057f0:	e13ffc15 	stw	r4,-16(fp)
  8057f4:	e17ffd15 	stw	r5,-12(fp)
  8057f8:	e1bffe15 	stw	r6,-8(fp)
  8057fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  805800:	00bffa84 	movi	r2,-22
  805804:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  805808:	e0bffd17 	ldw	r2,-12(fp)
  80580c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  805810:	e0bff817 	ldw	r2,-32(fp)
  805814:	10800808 	cmpgei	r2,r2,32
  805818:	1000271e 	bne	r2,zero,8058b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80581c:	0005303a 	rdctl	r2,status
  805820:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805824:	e0fffa17 	ldw	r3,-24(fp)
  805828:	00bfff84 	movi	r2,-2
  80582c:	1884703a 	and	r2,r3,r2
  805830:	1001703a 	wrctl	status,r2
  
  return context;
  805834:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  805838:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  80583c:	00802074 	movhi	r2,129
  805840:	10a0a104 	addi	r2,r2,-32124
  805844:	e0fff817 	ldw	r3,-32(fp)
  805848:	180690fa 	slli	r3,r3,3
  80584c:	10c5883a 	add	r2,r2,r3
  805850:	e0fffe17 	ldw	r3,-8(fp)
  805854:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  805858:	00802074 	movhi	r2,129
  80585c:	10a0a104 	addi	r2,r2,-32124
  805860:	e0fff817 	ldw	r3,-32(fp)
  805864:	180690fa 	slli	r3,r3,3
  805868:	10c5883a 	add	r2,r2,r3
  80586c:	10800104 	addi	r2,r2,4
  805870:	e0ffff17 	ldw	r3,-4(fp)
  805874:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805878:	e0bffe17 	ldw	r2,-8(fp)
  80587c:	10000526 	beq	r2,zero,805894 <alt_iic_isr_register+0xb4>
  805880:	e0bff817 	ldw	r2,-32(fp)
  805884:	e13ffc17 	ldw	r4,-16(fp)
  805888:	100b883a 	mov	r5,r2
  80588c:	08056500 	call	805650 <alt_ic_irq_enable>
  805890:	00000406 	br	8058a4 <alt_iic_isr_register+0xc4>
  805894:	e0bff817 	ldw	r2,-32(fp)
  805898:	e13ffc17 	ldw	r4,-16(fp)
  80589c:	100b883a 	mov	r5,r2
  8058a0:	08056f00 	call	8056f0 <alt_ic_irq_disable>
  8058a4:	e0bff715 	stw	r2,-36(fp)
  8058a8:	e0bff917 	ldw	r2,-28(fp)
  8058ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8058b0:	e0bffb17 	ldw	r2,-20(fp)
  8058b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8058b8:	e0bff717 	ldw	r2,-36(fp)
}
  8058bc:	e037883a 	mov	sp,fp
  8058c0:	dfc00117 	ldw	ra,4(sp)
  8058c4:	df000017 	ldw	fp,0(sp)
  8058c8:	dec00204 	addi	sp,sp,8
  8058cc:	f800283a 	ret

008058d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8058d0:	defff804 	addi	sp,sp,-32
  8058d4:	dfc00715 	stw	ra,28(sp)
  8058d8:	df000615 	stw	fp,24(sp)
  8058dc:	dc000515 	stw	r16,20(sp)
  8058e0:	df000604 	addi	fp,sp,24
  8058e4:	e13ffb15 	stw	r4,-20(fp)
  8058e8:	e17ffc15 	stw	r5,-16(fp)
  8058ec:	e1bffd15 	stw	r6,-12(fp)
  8058f0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  8058f4:	e13ffc17 	ldw	r4,-16(fp)
  8058f8:	e17ffd17 	ldw	r5,-12(fp)
  8058fc:	e1bffe17 	ldw	r6,-8(fp)
  805900:	0805b6c0 	call	805b6c <open>
  805904:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  805908:	e0bffa17 	ldw	r2,-24(fp)
  80590c:	10002216 	blt	r2,zero,805998 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  805910:	04002034 	movhi	r16,128
  805914:	841bd204 	addi	r16,r16,28488
  805918:	e0bffa17 	ldw	r2,-24(fp)
  80591c:	1009883a 	mov	r4,r2
  805920:	01400304 	movi	r5,12
  805924:	0802d480 	call	802d48 <__mulsi3>
  805928:	8085883a 	add	r2,r16,r2
  80592c:	10c00017 	ldw	r3,0(r2)
  805930:	e0bffb17 	ldw	r2,-20(fp)
  805934:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  805938:	04002034 	movhi	r16,128
  80593c:	841bd204 	addi	r16,r16,28488
  805940:	e0bffa17 	ldw	r2,-24(fp)
  805944:	1009883a 	mov	r4,r2
  805948:	01400304 	movi	r5,12
  80594c:	0802d480 	call	802d48 <__mulsi3>
  805950:	8085883a 	add	r2,r16,r2
  805954:	10800104 	addi	r2,r2,4
  805958:	10c00017 	ldw	r3,0(r2)
  80595c:	e0bffb17 	ldw	r2,-20(fp)
  805960:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  805964:	04002034 	movhi	r16,128
  805968:	841bd204 	addi	r16,r16,28488
  80596c:	e0bffa17 	ldw	r2,-24(fp)
  805970:	1009883a 	mov	r4,r2
  805974:	01400304 	movi	r5,12
  805978:	0802d480 	call	802d48 <__mulsi3>
  80597c:	8085883a 	add	r2,r16,r2
  805980:	10800204 	addi	r2,r2,8
  805984:	10c00017 	ldw	r3,0(r2)
  805988:	e0bffb17 	ldw	r2,-20(fp)
  80598c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  805990:	e13ffa17 	ldw	r4,-24(fp)
  805994:	08034000 	call	803400 <alt_release_fd>
  }
} 
  805998:	e6ffff04 	addi	sp,fp,-4
  80599c:	dfc00217 	ldw	ra,8(sp)
  8059a0:	df000117 	ldw	fp,4(sp)
  8059a4:	dc000017 	ldw	r16,0(sp)
  8059a8:	dec00304 	addi	sp,sp,12
  8059ac:	f800283a 	ret

008059b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8059b0:	defffb04 	addi	sp,sp,-20
  8059b4:	dfc00415 	stw	ra,16(sp)
  8059b8:	df000315 	stw	fp,12(sp)
  8059bc:	df000304 	addi	fp,sp,12
  8059c0:	e13ffd15 	stw	r4,-12(fp)
  8059c4:	e17ffe15 	stw	r5,-8(fp)
  8059c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8059cc:	01002034 	movhi	r4,128
  8059d0:	211bd504 	addi	r4,r4,28500
  8059d4:	e17ffd17 	ldw	r5,-12(fp)
  8059d8:	01800044 	movi	r6,1
  8059dc:	01c07fc4 	movi	r7,511
  8059e0:	08058d00 	call	8058d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8059e4:	01002034 	movhi	r4,128
  8059e8:	211bd204 	addi	r4,r4,28488
  8059ec:	e17ffe17 	ldw	r5,-8(fp)
  8059f0:	000d883a 	mov	r6,zero
  8059f4:	01c07fc4 	movi	r7,511
  8059f8:	08058d00 	call	8058d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8059fc:	01002034 	movhi	r4,128
  805a00:	211bd804 	addi	r4,r4,28512
  805a04:	e17fff17 	ldw	r5,-4(fp)
  805a08:	01800044 	movi	r6,1
  805a0c:	01c07fc4 	movi	r7,511
  805a10:	08058d00 	call	8058d0 <alt_open_fd>
}  
  805a14:	e037883a 	mov	sp,fp
  805a18:	dfc00117 	ldw	ra,4(sp)
  805a1c:	df000017 	ldw	fp,0(sp)
  805a20:	dec00204 	addi	sp,sp,8
  805a24:	f800283a 	ret

00805a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805a28:	defffe04 	addi	sp,sp,-8
  805a2c:	dfc00115 	stw	ra,4(sp)
  805a30:	df000015 	stw	fp,0(sp)
  805a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805a38:	00802074 	movhi	r2,129
  805a3c:	10a08604 	addi	r2,r2,-32232
  805a40:	10800017 	ldw	r2,0(r2)
  805a44:	10000526 	beq	r2,zero,805a5c <alt_get_errno+0x34>
  805a48:	00802074 	movhi	r2,129
  805a4c:	10a08604 	addi	r2,r2,-32232
  805a50:	10800017 	ldw	r2,0(r2)
  805a54:	103ee83a 	callr	r2
  805a58:	00000206 	br	805a64 <alt_get_errno+0x3c>
  805a5c:	00802074 	movhi	r2,129
  805a60:	10a09004 	addi	r2,r2,-32192
}
  805a64:	e037883a 	mov	sp,fp
  805a68:	dfc00117 	ldw	ra,4(sp)
  805a6c:	df000017 	ldw	fp,0(sp)
  805a70:	dec00204 	addi	sp,sp,8
  805a74:	f800283a 	ret

00805a78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805a78:	defffb04 	addi	sp,sp,-20
  805a7c:	dfc00415 	stw	ra,16(sp)
  805a80:	df000315 	stw	fp,12(sp)
  805a84:	dc000215 	stw	r16,8(sp)
  805a88:	df000304 	addi	fp,sp,12
  805a8c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805a90:	e0bffe17 	ldw	r2,-8(fp)
  805a94:	10800217 	ldw	r2,8(r2)
  805a98:	10d00034 	orhi	r3,r2,16384
  805a9c:	e0bffe17 	ldw	r2,-8(fp)
  805aa0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805aa4:	e03ffd15 	stw	zero,-12(fp)
  805aa8:	00002306 	br	805b38 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805aac:	04002034 	movhi	r16,128
  805ab0:	841bd204 	addi	r16,r16,28488
  805ab4:	e0bffd17 	ldw	r2,-12(fp)
  805ab8:	1009883a 	mov	r4,r2
  805abc:	01400304 	movi	r5,12
  805ac0:	0802d480 	call	802d48 <__mulsi3>
  805ac4:	8085883a 	add	r2,r16,r2
  805ac8:	10c00017 	ldw	r3,0(r2)
  805acc:	e0bffe17 	ldw	r2,-8(fp)
  805ad0:	10800017 	ldw	r2,0(r2)
  805ad4:	1880151e 	bne	r3,r2,805b2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805ad8:	04002034 	movhi	r16,128
  805adc:	841bd204 	addi	r16,r16,28488
  805ae0:	e0bffd17 	ldw	r2,-12(fp)
  805ae4:	1009883a 	mov	r4,r2
  805ae8:	01400304 	movi	r5,12
  805aec:	0802d480 	call	802d48 <__mulsi3>
  805af0:	8085883a 	add	r2,r16,r2
  805af4:	10800204 	addi	r2,r2,8
  805af8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805afc:	10000b0e 	bge	r2,zero,805b2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  805b00:	e13ffd17 	ldw	r4,-12(fp)
  805b04:	01400304 	movi	r5,12
  805b08:	0802d480 	call	802d48 <__mulsi3>
  805b0c:	1007883a 	mov	r3,r2
  805b10:	00802034 	movhi	r2,128
  805b14:	109bd204 	addi	r2,r2,28488
  805b18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805b1c:	e0bffe17 	ldw	r2,-8(fp)
  805b20:	18800226 	beq	r3,r2,805b2c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  805b24:	00bffcc4 	movi	r2,-13
  805b28:	00000a06 	br	805b54 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805b2c:	e0bffd17 	ldw	r2,-12(fp)
  805b30:	10800044 	addi	r2,r2,1
  805b34:	e0bffd15 	stw	r2,-12(fp)
  805b38:	00802074 	movhi	r2,129
  805b3c:	10a08504 	addi	r2,r2,-32236
  805b40:	10800017 	ldw	r2,0(r2)
  805b44:	1007883a 	mov	r3,r2
  805b48:	e0bffd17 	ldw	r2,-12(fp)
  805b4c:	18bfd72e 	bgeu	r3,r2,805aac <__reset+0xff804aac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  805b50:	0005883a 	mov	r2,zero
}
  805b54:	e6ffff04 	addi	sp,fp,-4
  805b58:	dfc00217 	ldw	ra,8(sp)
  805b5c:	df000117 	ldw	fp,4(sp)
  805b60:	dc000017 	ldw	r16,0(sp)
  805b64:	dec00304 	addi	sp,sp,12
  805b68:	f800283a 	ret

00805b6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805b6c:	defff604 	addi	sp,sp,-40
  805b70:	dfc00915 	stw	ra,36(sp)
  805b74:	df000815 	stw	fp,32(sp)
  805b78:	df000804 	addi	fp,sp,32
  805b7c:	e13ffd15 	stw	r4,-12(fp)
  805b80:	e17ffe15 	stw	r5,-8(fp)
  805b84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805b88:	00bfffc4 	movi	r2,-1
  805b8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  805b90:	00bffb44 	movi	r2,-19
  805b94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  805b98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805b9c:	e13ffd17 	ldw	r4,-12(fp)
  805ba0:	01402074 	movhi	r5,129
  805ba4:	29608304 	addi	r5,r5,-32244
  805ba8:	080608c0 	call	80608c <alt_find_dev>
  805bac:	e0bff815 	stw	r2,-32(fp)
  805bb0:	e0bff817 	ldw	r2,-32(fp)
  805bb4:	1000051e 	bne	r2,zero,805bcc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805bb8:	e13ffd17 	ldw	r4,-12(fp)
  805bbc:	080611c0 	call	80611c <alt_find_file>
  805bc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  805bc4:	00800044 	movi	r2,1
  805bc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805bcc:	e0bff817 	ldw	r2,-32(fp)
  805bd0:	10002b26 	beq	r2,zero,805c80 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805bd4:	e13ff817 	ldw	r4,-32(fp)
  805bd8:	08062300 	call	806230 <alt_get_fd>
  805bdc:	e0bff915 	stw	r2,-28(fp)
  805be0:	e0bff917 	ldw	r2,-28(fp)
  805be4:	1000030e 	bge	r2,zero,805bf4 <open+0x88>
    {
      status = index;
  805be8:	e0bff917 	ldw	r2,-28(fp)
  805bec:	e0bffa15 	stw	r2,-24(fp)
  805bf0:	00002506 	br	805c88 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  805bf4:	e13ff917 	ldw	r4,-28(fp)
  805bf8:	01400304 	movi	r5,12
  805bfc:	0802d480 	call	802d48 <__mulsi3>
  805c00:	1007883a 	mov	r3,r2
  805c04:	00802034 	movhi	r2,128
  805c08:	109bd204 	addi	r2,r2,28488
  805c0c:	1885883a 	add	r2,r3,r2
  805c10:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805c14:	e0fffe17 	ldw	r3,-8(fp)
  805c18:	00900034 	movhi	r2,16384
  805c1c:	10bfffc4 	addi	r2,r2,-1
  805c20:	1886703a 	and	r3,r3,r2
  805c24:	e0bffc17 	ldw	r2,-16(fp)
  805c28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  805c2c:	e0bffb17 	ldw	r2,-20(fp)
  805c30:	1000051e 	bne	r2,zero,805c48 <open+0xdc>
  805c34:	e13ffc17 	ldw	r4,-16(fp)
  805c38:	0805a780 	call	805a78 <alt_file_locked>
  805c3c:	e0bffa15 	stw	r2,-24(fp)
  805c40:	e0bffa17 	ldw	r2,-24(fp)
  805c44:	10001016 	blt	r2,zero,805c88 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805c48:	e0bff817 	ldw	r2,-32(fp)
  805c4c:	10800317 	ldw	r2,12(r2)
  805c50:	10000826 	beq	r2,zero,805c74 <open+0x108>
  805c54:	e0bff817 	ldw	r2,-32(fp)
  805c58:	10800317 	ldw	r2,12(r2)
  805c5c:	e13ffc17 	ldw	r4,-16(fp)
  805c60:	e17ffd17 	ldw	r5,-12(fp)
  805c64:	e1bffe17 	ldw	r6,-8(fp)
  805c68:	e1ffff17 	ldw	r7,-4(fp)
  805c6c:	103ee83a 	callr	r2
  805c70:	00000106 	br	805c78 <open+0x10c>
  805c74:	0005883a 	mov	r2,zero
  805c78:	e0bffa15 	stw	r2,-24(fp)
  805c7c:	00000206 	br	805c88 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805c80:	00bffb44 	movi	r2,-19
  805c84:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805c88:	e0bffa17 	ldw	r2,-24(fp)
  805c8c:	1000090e 	bge	r2,zero,805cb4 <open+0x148>
  {
    alt_release_fd (index);  
  805c90:	e13ff917 	ldw	r4,-28(fp)
  805c94:	08034000 	call	803400 <alt_release_fd>
    ALT_ERRNO = -status;
  805c98:	0805a280 	call	805a28 <alt_get_errno>
  805c9c:	1007883a 	mov	r3,r2
  805ca0:	e0bffa17 	ldw	r2,-24(fp)
  805ca4:	0085c83a 	sub	r2,zero,r2
  805ca8:	18800015 	stw	r2,0(r3)
    return -1;
  805cac:	00bfffc4 	movi	r2,-1
  805cb0:	00000106 	br	805cb8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  805cb4:	e0bff917 	ldw	r2,-28(fp)
}
  805cb8:	e037883a 	mov	sp,fp
  805cbc:	dfc00117 	ldw	ra,4(sp)
  805cc0:	df000017 	ldw	fp,0(sp)
  805cc4:	dec00204 	addi	sp,sp,8
  805cc8:	f800283a 	ret

00805ccc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  805ccc:	defffa04 	addi	sp,sp,-24
  805cd0:	df000515 	stw	fp,20(sp)
  805cd4:	df000504 	addi	fp,sp,20
  805cd8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805cdc:	0005303a 	rdctl	r2,status
  805ce0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ce4:	e0fffc17 	ldw	r3,-16(fp)
  805ce8:	00bfff84 	movi	r2,-2
  805cec:	1884703a 	and	r2,r3,r2
  805cf0:	1001703a 	wrctl	status,r2
  
  return context;
  805cf4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805cf8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  805cfc:	e0bfff17 	ldw	r2,-4(fp)
  805d00:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805d04:	e0bffd17 	ldw	r2,-12(fp)
  805d08:	10800017 	ldw	r2,0(r2)
  805d0c:	e0fffd17 	ldw	r3,-12(fp)
  805d10:	18c00117 	ldw	r3,4(r3)
  805d14:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  805d18:	e0bffd17 	ldw	r2,-12(fp)
  805d1c:	10800117 	ldw	r2,4(r2)
  805d20:	e0fffd17 	ldw	r3,-12(fp)
  805d24:	18c00017 	ldw	r3,0(r3)
  805d28:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  805d2c:	e0bffd17 	ldw	r2,-12(fp)
  805d30:	e0fffd17 	ldw	r3,-12(fp)
  805d34:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  805d38:	e0bffd17 	ldw	r2,-12(fp)
  805d3c:	e0fffd17 	ldw	r3,-12(fp)
  805d40:	10c00015 	stw	r3,0(r2)
  805d44:	e0bffb17 	ldw	r2,-20(fp)
  805d48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d4c:	e0bffe17 	ldw	r2,-8(fp)
  805d50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805d54:	e037883a 	mov	sp,fp
  805d58:	df000017 	ldw	fp,0(sp)
  805d5c:	dec00104 	addi	sp,sp,4
  805d60:	f800283a 	ret

00805d64 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805d64:	defffb04 	addi	sp,sp,-20
  805d68:	dfc00415 	stw	ra,16(sp)
  805d6c:	df000315 	stw	fp,12(sp)
  805d70:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805d74:	d0a00e17 	ldw	r2,-32712(gp)
  805d78:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805d7c:	d0a01917 	ldw	r2,-32668(gp)
  805d80:	10800044 	addi	r2,r2,1
  805d84:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805d88:	00002e06 	br	805e44 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  805d8c:	e0bffd17 	ldw	r2,-12(fp)
  805d90:	10800017 	ldw	r2,0(r2)
  805d94:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805d98:	e0bffd17 	ldw	r2,-12(fp)
  805d9c:	10800403 	ldbu	r2,16(r2)
  805da0:	10803fcc 	andi	r2,r2,255
  805da4:	10000426 	beq	r2,zero,805db8 <alt_tick+0x54>
  805da8:	d0a01917 	ldw	r2,-32668(gp)
  805dac:	1000021e 	bne	r2,zero,805db8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  805db0:	e0bffd17 	ldw	r2,-12(fp)
  805db4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805db8:	e0bffd17 	ldw	r2,-12(fp)
  805dbc:	10800217 	ldw	r2,8(r2)
  805dc0:	d0e01917 	ldw	r3,-32668(gp)
  805dc4:	18801d36 	bltu	r3,r2,805e3c <alt_tick+0xd8>
  805dc8:	e0bffd17 	ldw	r2,-12(fp)
  805dcc:	10800403 	ldbu	r2,16(r2)
  805dd0:	10803fcc 	andi	r2,r2,255
  805dd4:	1000191e 	bne	r2,zero,805e3c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  805dd8:	e0bffd17 	ldw	r2,-12(fp)
  805ddc:	10800317 	ldw	r2,12(r2)
  805de0:	e0fffd17 	ldw	r3,-12(fp)
  805de4:	18c00517 	ldw	r3,20(r3)
  805de8:	1809883a 	mov	r4,r3
  805dec:	103ee83a 	callr	r2
  805df0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805df4:	e0bfff17 	ldw	r2,-4(fp)
  805df8:	1000031e 	bne	r2,zero,805e08 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  805dfc:	e13ffd17 	ldw	r4,-12(fp)
  805e00:	0805ccc0 	call	805ccc <alt_alarm_stop>
  805e04:	00000d06 	br	805e3c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  805e08:	e0bffd17 	ldw	r2,-12(fp)
  805e0c:	10c00217 	ldw	r3,8(r2)
  805e10:	e0bfff17 	ldw	r2,-4(fp)
  805e14:	1887883a 	add	r3,r3,r2
  805e18:	e0bffd17 	ldw	r2,-12(fp)
  805e1c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  805e20:	e0bffd17 	ldw	r2,-12(fp)
  805e24:	10c00217 	ldw	r3,8(r2)
  805e28:	d0a01917 	ldw	r2,-32668(gp)
  805e2c:	1880032e 	bgeu	r3,r2,805e3c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  805e30:	e0bffd17 	ldw	r2,-12(fp)
  805e34:	00c00044 	movi	r3,1
  805e38:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  805e3c:	e0bffe17 	ldw	r2,-8(fp)
  805e40:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805e44:	e0fffd17 	ldw	r3,-12(fp)
  805e48:	d0a00e04 	addi	r2,gp,-32712
  805e4c:	18bfcf1e 	bne	r3,r2,805d8c <__reset+0xff804d8c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  805e50:	0001883a 	nop
}
  805e54:	e037883a 	mov	sp,fp
  805e58:	dfc00117 	ldw	ra,4(sp)
  805e5c:	df000017 	ldw	fp,0(sp)
  805e60:	dec00204 	addi	sp,sp,8
  805e64:	f800283a 	ret

00805e68 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  805e68:	deffff04 	addi	sp,sp,-4
  805e6c:	df000015 	stw	fp,0(sp)
  805e70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805e74:	000170fa 	wrctl	ienable,zero
}
  805e78:	e037883a 	mov	sp,fp
  805e7c:	df000017 	ldw	fp,0(sp)
  805e80:	dec00104 	addi	sp,sp,4
  805e84:	f800283a 	ret

00805e88 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  805e88:	defff404 	addi	sp,sp,-48
  805e8c:	df000b15 	stw	fp,44(sp)
  805e90:	df000b04 	addi	fp,sp,44
  805e94:	e13ffc15 	stw	r4,-16(fp)
  805e98:	e17ffd15 	stw	r5,-12(fp)
  805e9c:	e1bffe15 	stw	r6,-8(fp)
  805ea0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  805ea4:	e0ffff17 	ldw	r3,-4(fp)
  805ea8:	e0bffe17 	ldw	r2,-8(fp)
  805eac:	1885883a 	add	r2,r3,r2
  805eb0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  805eb4:	e0c00217 	ldw	r3,8(fp)
  805eb8:	e0800117 	ldw	r2,4(fp)
  805ebc:	1885883a 	add	r2,r3,r2
  805ec0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  805ec4:	e0800117 	ldw	r2,4(fp)
  805ec8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  805ecc:	e0bffe17 	ldw	r2,-8(fp)
  805ed0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  805ed4:	00800044 	movi	r2,1
  805ed8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  805edc:	e0bffc17 	ldw	r2,-16(fp)
  805ee0:	10800504 	addi	r2,r2,20
  805ee4:	1009883a 	mov	r4,r2
  805ee8:	e0bffd17 	ldw	r2,-12(fp)
  805eec:	00c00044 	movi	r3,1
  805ef0:	1884983a 	sll	r2,r3,r2
  805ef4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  805ef8:	e0800317 	ldw	r2,12(fp)
  805efc:	1080008c 	andi	r2,r2,2
  805f00:	1000051e 	bne	r2,zero,805f18 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  805f04:	e0bffc17 	ldw	r2,-16(fp)
  805f08:	10800304 	addi	r2,r2,12
  805f0c:	1007883a 	mov	r3,r2
  805f10:	00810004 	movi	r2,1024
  805f14:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  805f18:	e0bffc17 	ldw	r2,-16(fp)
  805f1c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  805f20:	e0bffc17 	ldw	r2,-16(fp)
  805f24:	10800204 	addi	r2,r2,8
  805f28:	10800037 	ldwio	r2,0(r2)
  805f2c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  805f30:	e0bffa17 	ldw	r2,-24(fp)
  805f34:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  805f38:	10000226 	beq	r2,zero,805f44 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  805f3c:	e0bff717 	ldw	r2,-36(fp)
  805f40:	1000031e 	bne	r2,zero,805f50 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  805f44:	e0bffa17 	ldw	r2,-24(fp)
  805f48:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  805f4c:	103ff426 	beq	r2,zero,805f20 <__reset+0xff804f20>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  805f50:	e0bffa17 	ldw	r2,-24(fp)
  805f54:	1080100c 	andi	r2,r2,64
  805f58:	10001e26 	beq	r2,zero,805fd4 <alt_avalon_spi_command+0x14c>
  805f5c:	e0bff717 	ldw	r2,-36(fp)
  805f60:	00801c0e 	bge	zero,r2,805fd4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  805f64:	e0bff717 	ldw	r2,-36(fp)
  805f68:	10bfffc4 	addi	r2,r2,-1
  805f6c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  805f70:	e0ffff17 	ldw	r3,-4(fp)
  805f74:	e0bff817 	ldw	r2,-32(fp)
  805f78:	18800a2e 	bgeu	r3,r2,805fa4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  805f7c:	e0bffc17 	ldw	r2,-16(fp)
  805f80:	10800104 	addi	r2,r2,4
  805f84:	1009883a 	mov	r4,r2
  805f88:	e0bfff17 	ldw	r2,-4(fp)
  805f8c:	10c00044 	addi	r3,r2,1
  805f90:	e0ffff15 	stw	r3,-4(fp)
  805f94:	10800003 	ldbu	r2,0(r2)
  805f98:	10803fcc 	andi	r2,r2,255
  805f9c:	20800035 	stwio	r2,0(r4)
  805fa0:	00000c06 	br	805fd4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  805fa4:	e0bff517 	ldw	r2,-44(fp)
  805fa8:	10000826 	beq	r2,zero,805fcc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  805fac:	e0bff517 	ldw	r2,-44(fp)
  805fb0:	10bfffc4 	addi	r2,r2,-1
  805fb4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  805fb8:	e0bffc17 	ldw	r2,-16(fp)
  805fbc:	10800104 	addi	r2,r2,4
  805fc0:	0007883a 	mov	r3,zero
  805fc4:	10c00035 	stwio	r3,0(r2)
  805fc8:	00000206 	br	805fd4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  805fcc:	00bf0004 	movi	r2,-1024
  805fd0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  805fd4:	e0bffa17 	ldw	r2,-24(fp)
  805fd8:	1080200c 	andi	r2,r2,128
  805fdc:	10001726 	beq	r2,zero,80603c <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  805fe0:	e0bffc17 	ldw	r2,-16(fp)
  805fe4:	10800037 	ldwio	r2,0(r2)
  805fe8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  805fec:	e0bff617 	ldw	r2,-40(fp)
  805ff0:	10000426 	beq	r2,zero,806004 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  805ff4:	e0bff617 	ldw	r2,-40(fp)
  805ff8:	10bfffc4 	addi	r2,r2,-1
  805ffc:	e0bff615 	stw	r2,-40(fp)
  806000:	00000506 	br	806018 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  806004:	e0800217 	ldw	r2,8(fp)
  806008:	10c00044 	addi	r3,r2,1
  80600c:	e0c00215 	stw	r3,8(fp)
  806010:	e0fffb17 	ldw	r3,-20(fp)
  806014:	10c00005 	stb	r3,0(r2)
      credits++;
  806018:	e0bff717 	ldw	r2,-36(fp)
  80601c:	10800044 	addi	r2,r2,1
  806020:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  806024:	e0bff617 	ldw	r2,-40(fp)
  806028:	1000041e 	bne	r2,zero,80603c <alt_avalon_spi_command+0x1b4>
  80602c:	e0c00217 	ldw	r3,8(fp)
  806030:	e0bff917 	ldw	r2,-28(fp)
  806034:	1880011e 	bne	r3,r2,80603c <alt_avalon_spi_command+0x1b4>
        break;
  806038:	00000106 	br	806040 <alt_avalon_spi_command+0x1b8>
    }
    
  }
  80603c:	003fb806 	br	805f20 <__reset+0xff804f20>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  806040:	e0bffc17 	ldw	r2,-16(fp)
  806044:	10800204 	addi	r2,r2,8
  806048:	10800037 	ldwio	r2,0(r2)
  80604c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  806050:	e0bffa17 	ldw	r2,-24(fp)
  806054:	1080080c 	andi	r2,r2,32
  806058:	103ff926 	beq	r2,zero,806040 <__reset+0xff805040>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  80605c:	e0800317 	ldw	r2,12(fp)
  806060:	1080004c 	andi	r2,r2,1
  806064:	1000041e 	bne	r2,zero,806078 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  806068:	e0bffc17 	ldw	r2,-16(fp)
  80606c:	10800304 	addi	r2,r2,12
  806070:	0007883a 	mov	r3,zero
  806074:	10c00035 	stwio	r3,0(r2)

  return read_length;
  806078:	e0800117 	ldw	r2,4(fp)
}
  80607c:	e037883a 	mov	sp,fp
  806080:	df000017 	ldw	fp,0(sp)
  806084:	dec00104 	addi	sp,sp,4
  806088:	f800283a 	ret

0080608c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80608c:	defffa04 	addi	sp,sp,-24
  806090:	dfc00515 	stw	ra,20(sp)
  806094:	df000415 	stw	fp,16(sp)
  806098:	df000404 	addi	fp,sp,16
  80609c:	e13ffe15 	stw	r4,-8(fp)
  8060a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8060a4:	e0bfff17 	ldw	r2,-4(fp)
  8060a8:	10800017 	ldw	r2,0(r2)
  8060ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8060b0:	e13ffe17 	ldw	r4,-8(fp)
  8060b4:	08002f40 	call	8002f4 <strlen>
  8060b8:	10800044 	addi	r2,r2,1
  8060bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8060c0:	00000d06 	br	8060f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8060c4:	e0bffc17 	ldw	r2,-16(fp)
  8060c8:	10c00217 	ldw	r3,8(r2)
  8060cc:	e0bffd17 	ldw	r2,-12(fp)
  8060d0:	1809883a 	mov	r4,r3
  8060d4:	e17ffe17 	ldw	r5,-8(fp)
  8060d8:	100d883a 	mov	r6,r2
  8060dc:	08063500 	call	806350 <memcmp>
  8060e0:	1000021e 	bne	r2,zero,8060ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8060e4:	e0bffc17 	ldw	r2,-16(fp)
  8060e8:	00000706 	br	806108 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8060ec:	e0bffc17 	ldw	r2,-16(fp)
  8060f0:	10800017 	ldw	r2,0(r2)
  8060f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8060f8:	e0fffc17 	ldw	r3,-16(fp)
  8060fc:	e0bfff17 	ldw	r2,-4(fp)
  806100:	18bff01e 	bne	r3,r2,8060c4 <__reset+0xff8050c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  806104:	0005883a 	mov	r2,zero
}
  806108:	e037883a 	mov	sp,fp
  80610c:	dfc00117 	ldw	ra,4(sp)
  806110:	df000017 	ldw	fp,0(sp)
  806114:	dec00204 	addi	sp,sp,8
  806118:	f800283a 	ret

0080611c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80611c:	defffb04 	addi	sp,sp,-20
  806120:	dfc00415 	stw	ra,16(sp)
  806124:	df000315 	stw	fp,12(sp)
  806128:	df000304 	addi	fp,sp,12
  80612c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  806130:	00802074 	movhi	r2,129
  806134:	10a08104 	addi	r2,r2,-32252
  806138:	10800017 	ldw	r2,0(r2)
  80613c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806140:	00003106 	br	806208 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  806144:	e0bffd17 	ldw	r2,-12(fp)
  806148:	10800217 	ldw	r2,8(r2)
  80614c:	1009883a 	mov	r4,r2
  806150:	08002f40 	call	8002f4 <strlen>
  806154:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  806158:	e0bffd17 	ldw	r2,-12(fp)
  80615c:	10c00217 	ldw	r3,8(r2)
  806160:	e0bffe17 	ldw	r2,-8(fp)
  806164:	10bfffc4 	addi	r2,r2,-1
  806168:	1885883a 	add	r2,r3,r2
  80616c:	10800003 	ldbu	r2,0(r2)
  806170:	10803fcc 	andi	r2,r2,255
  806174:	1080201c 	xori	r2,r2,128
  806178:	10bfe004 	addi	r2,r2,-128
  80617c:	10800bd8 	cmpnei	r2,r2,47
  806180:	1000031e 	bne	r2,zero,806190 <alt_find_file+0x74>
    {
      len -= 1;
  806184:	e0bffe17 	ldw	r2,-8(fp)
  806188:	10bfffc4 	addi	r2,r2,-1
  80618c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806190:	e0bffe17 	ldw	r2,-8(fp)
  806194:	e0ffff17 	ldw	r3,-4(fp)
  806198:	1885883a 	add	r2,r3,r2
  80619c:	10800003 	ldbu	r2,0(r2)
  8061a0:	10803fcc 	andi	r2,r2,255
  8061a4:	1080201c 	xori	r2,r2,128
  8061a8:	10bfe004 	addi	r2,r2,-128
  8061ac:	10800be0 	cmpeqi	r2,r2,47
  8061b0:	1000081e 	bne	r2,zero,8061d4 <alt_find_file+0xb8>
  8061b4:	e0bffe17 	ldw	r2,-8(fp)
  8061b8:	e0ffff17 	ldw	r3,-4(fp)
  8061bc:	1885883a 	add	r2,r3,r2
  8061c0:	10800003 	ldbu	r2,0(r2)
  8061c4:	10803fcc 	andi	r2,r2,255
  8061c8:	1080201c 	xori	r2,r2,128
  8061cc:	10bfe004 	addi	r2,r2,-128
  8061d0:	10000a1e 	bne	r2,zero,8061fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  8061d4:	e0bffd17 	ldw	r2,-12(fp)
  8061d8:	10c00217 	ldw	r3,8(r2)
  8061dc:	e0bffe17 	ldw	r2,-8(fp)
  8061e0:	1809883a 	mov	r4,r3
  8061e4:	e17fff17 	ldw	r5,-4(fp)
  8061e8:	100d883a 	mov	r6,r2
  8061ec:	08063500 	call	806350 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8061f0:	1000021e 	bne	r2,zero,8061fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8061f4:	e0bffd17 	ldw	r2,-12(fp)
  8061f8:	00000806 	br	80621c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  8061fc:	e0bffd17 	ldw	r2,-12(fp)
  806200:	10800017 	ldw	r2,0(r2)
  806204:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806208:	e0fffd17 	ldw	r3,-12(fp)
  80620c:	00802074 	movhi	r2,129
  806210:	10a08104 	addi	r2,r2,-32252
  806214:	18bfcb1e 	bne	r3,r2,806144 <__reset+0xff805144>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  806218:	0005883a 	mov	r2,zero
}
  80621c:	e037883a 	mov	sp,fp
  806220:	dfc00117 	ldw	ra,4(sp)
  806224:	df000017 	ldw	fp,0(sp)
  806228:	dec00204 	addi	sp,sp,8
  80622c:	f800283a 	ret

00806230 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  806230:	defffa04 	addi	sp,sp,-24
  806234:	dfc00515 	stw	ra,20(sp)
  806238:	df000415 	stw	fp,16(sp)
  80623c:	dc000315 	stw	r16,12(sp)
  806240:	df000404 	addi	fp,sp,16
  806244:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  806248:	00bffa04 	movi	r2,-24
  80624c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806250:	e03ffc15 	stw	zero,-16(fp)
  806254:	00002106 	br	8062dc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  806258:	04002034 	movhi	r16,128
  80625c:	841bd204 	addi	r16,r16,28488
  806260:	e0bffc17 	ldw	r2,-16(fp)
  806264:	1009883a 	mov	r4,r2
  806268:	01400304 	movi	r5,12
  80626c:	0802d480 	call	802d48 <__mulsi3>
  806270:	8085883a 	add	r2,r16,r2
  806274:	10800017 	ldw	r2,0(r2)
  806278:	1000151e 	bne	r2,zero,8062d0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  80627c:	04002034 	movhi	r16,128
  806280:	841bd204 	addi	r16,r16,28488
  806284:	e0bffc17 	ldw	r2,-16(fp)
  806288:	1009883a 	mov	r4,r2
  80628c:	01400304 	movi	r5,12
  806290:	0802d480 	call	802d48 <__mulsi3>
  806294:	8085883a 	add	r2,r16,r2
  806298:	e0fffe17 	ldw	r3,-8(fp)
  80629c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8062a0:	00802074 	movhi	r2,129
  8062a4:	10a08504 	addi	r2,r2,-32236
  8062a8:	10c00017 	ldw	r3,0(r2)
  8062ac:	e0bffc17 	ldw	r2,-16(fp)
  8062b0:	1880040e 	bge	r3,r2,8062c4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  8062b4:	00802074 	movhi	r2,129
  8062b8:	10a08504 	addi	r2,r2,-32236
  8062bc:	e0fffc17 	ldw	r3,-16(fp)
  8062c0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  8062c4:	e0bffc17 	ldw	r2,-16(fp)
  8062c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8062cc:	00000606 	br	8062e8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8062d0:	e0bffc17 	ldw	r2,-16(fp)
  8062d4:	10800044 	addi	r2,r2,1
  8062d8:	e0bffc15 	stw	r2,-16(fp)
  8062dc:	e0bffc17 	ldw	r2,-16(fp)
  8062e0:	10800810 	cmplti	r2,r2,32
  8062e4:	103fdc1e 	bne	r2,zero,806258 <__reset+0xff805258>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8062e8:	e0bffd17 	ldw	r2,-12(fp)
}
  8062ec:	e6ffff04 	addi	sp,fp,-4
  8062f0:	dfc00217 	ldw	ra,8(sp)
  8062f4:	df000117 	ldw	fp,4(sp)
  8062f8:	dc000017 	ldw	r16,0(sp)
  8062fc:	dec00304 	addi	sp,sp,12
  806300:	f800283a 	ret

00806304 <atexit>:
  806304:	200b883a 	mov	r5,r4
  806308:	000d883a 	mov	r6,zero
  80630c:	0009883a 	mov	r4,zero
  806310:	000f883a 	mov	r7,zero
  806314:	08063cc1 	jmpi	8063cc <__register_exitproc>

00806318 <exit>:
  806318:	defffe04 	addi	sp,sp,-8
  80631c:	000b883a 	mov	r5,zero
  806320:	dc000015 	stw	r16,0(sp)
  806324:	dfc00115 	stw	ra,4(sp)
  806328:	2021883a 	mov	r16,r4
  80632c:	08064e00 	call	8064e0 <__call_exitprocs>
  806330:	00802074 	movhi	r2,129
  806334:	10a07d04 	addi	r2,r2,-32268
  806338:	11000017 	ldw	r4,0(r2)
  80633c:	20800f17 	ldw	r2,60(r4)
  806340:	10000126 	beq	r2,zero,806348 <exit+0x30>
  806344:	103ee83a 	callr	r2
  806348:	8009883a 	mov	r4,r16
  80634c:	08066740 	call	806674 <_exit>

00806350 <memcmp>:
  806350:	01c000c4 	movi	r7,3
  806354:	3980192e 	bgeu	r7,r6,8063bc <memcmp+0x6c>
  806358:	2144b03a 	or	r2,r4,r5
  80635c:	11c4703a 	and	r2,r2,r7
  806360:	10000f26 	beq	r2,zero,8063a0 <memcmp+0x50>
  806364:	20800003 	ldbu	r2,0(r4)
  806368:	28c00003 	ldbu	r3,0(r5)
  80636c:	10c0151e 	bne	r2,r3,8063c4 <memcmp+0x74>
  806370:	31bfff84 	addi	r6,r6,-2
  806374:	01ffffc4 	movi	r7,-1
  806378:	00000406 	br	80638c <memcmp+0x3c>
  80637c:	20800003 	ldbu	r2,0(r4)
  806380:	28c00003 	ldbu	r3,0(r5)
  806384:	31bfffc4 	addi	r6,r6,-1
  806388:	10c00e1e 	bne	r2,r3,8063c4 <memcmp+0x74>
  80638c:	21000044 	addi	r4,r4,1
  806390:	29400044 	addi	r5,r5,1
  806394:	31fff91e 	bne	r6,r7,80637c <__reset+0xff80537c>
  806398:	0005883a 	mov	r2,zero
  80639c:	f800283a 	ret
  8063a0:	20c00017 	ldw	r3,0(r4)
  8063a4:	28800017 	ldw	r2,0(r5)
  8063a8:	1880041e 	bne	r3,r2,8063bc <memcmp+0x6c>
  8063ac:	31bfff04 	addi	r6,r6,-4
  8063b0:	21000104 	addi	r4,r4,4
  8063b4:	29400104 	addi	r5,r5,4
  8063b8:	39bff936 	bltu	r7,r6,8063a0 <__reset+0xff8053a0>
  8063bc:	303fe91e 	bne	r6,zero,806364 <__reset+0xff805364>
  8063c0:	003ff506 	br	806398 <__reset+0xff805398>
  8063c4:	10c5c83a 	sub	r2,r2,r3
  8063c8:	f800283a 	ret

008063cc <__register_exitproc>:
  8063cc:	00802074 	movhi	r2,129
  8063d0:	defffa04 	addi	sp,sp,-24
  8063d4:	10a07d04 	addi	r2,r2,-32268
  8063d8:	dc000315 	stw	r16,12(sp)
  8063dc:	14000017 	ldw	r16,0(r2)
  8063e0:	dc400415 	stw	r17,16(sp)
  8063e4:	dfc00515 	stw	ra,20(sp)
  8063e8:	80805217 	ldw	r2,328(r16)
  8063ec:	2023883a 	mov	r17,r4
  8063f0:	10003626 	beq	r2,zero,8064cc <__register_exitproc+0x100>
  8063f4:	10c00117 	ldw	r3,4(r2)
  8063f8:	010007c4 	movi	r4,31
  8063fc:	20c00e16 	blt	r4,r3,806438 <__register_exitproc+0x6c>
  806400:	1a400044 	addi	r9,r3,1
  806404:	8800211e 	bne	r17,zero,80648c <__register_exitproc+0xc0>
  806408:	18c00084 	addi	r3,r3,2
  80640c:	18c7883a 	add	r3,r3,r3
  806410:	18c7883a 	add	r3,r3,r3
  806414:	12400115 	stw	r9,4(r2)
  806418:	10c7883a 	add	r3,r2,r3
  80641c:	19400015 	stw	r5,0(r3)
  806420:	0005883a 	mov	r2,zero
  806424:	dfc00517 	ldw	ra,20(sp)
  806428:	dc400417 	ldw	r17,16(sp)
  80642c:	dc000317 	ldw	r16,12(sp)
  806430:	dec00604 	addi	sp,sp,24
  806434:	f800283a 	ret
  806438:	00800034 	movhi	r2,0
  80643c:	10800004 	addi	r2,r2,0
  806440:	10002526 	beq	r2,zero,8064d8 <__register_exitproc+0x10c>
  806444:	01006404 	movi	r4,400
  806448:	d9400015 	stw	r5,0(sp)
  80644c:	d9800115 	stw	r6,4(sp)
  806450:	d9c00215 	stw	r7,8(sp)
  806454:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  806458:	d9400017 	ldw	r5,0(sp)
  80645c:	d9800117 	ldw	r6,4(sp)
  806460:	d9c00217 	ldw	r7,8(sp)
  806464:	10001c26 	beq	r2,zero,8064d8 <__register_exitproc+0x10c>
  806468:	80c05217 	ldw	r3,328(r16)
  80646c:	10000115 	stw	zero,4(r2)
  806470:	02400044 	movi	r9,1
  806474:	10c00015 	stw	r3,0(r2)
  806478:	80805215 	stw	r2,328(r16)
  80647c:	10006215 	stw	zero,392(r2)
  806480:	10006315 	stw	zero,396(r2)
  806484:	0007883a 	mov	r3,zero
  806488:	883fdf26 	beq	r17,zero,806408 <__reset+0xff805408>
  80648c:	18d1883a 	add	r8,r3,r3
  806490:	4211883a 	add	r8,r8,r8
  806494:	1211883a 	add	r8,r2,r8
  806498:	41802215 	stw	r6,136(r8)
  80649c:	01000044 	movi	r4,1
  8064a0:	11806217 	ldw	r6,392(r2)
  8064a4:	20c8983a 	sll	r4,r4,r3
  8064a8:	310cb03a 	or	r6,r6,r4
  8064ac:	11806215 	stw	r6,392(r2)
  8064b0:	41c04215 	stw	r7,264(r8)
  8064b4:	01800084 	movi	r6,2
  8064b8:	89bfd31e 	bne	r17,r6,806408 <__reset+0xff805408>
  8064bc:	11806317 	ldw	r6,396(r2)
  8064c0:	3108b03a 	or	r4,r6,r4
  8064c4:	11006315 	stw	r4,396(r2)
  8064c8:	003fcf06 	br	806408 <__reset+0xff805408>
  8064cc:	80805304 	addi	r2,r16,332
  8064d0:	80805215 	stw	r2,328(r16)
  8064d4:	003fc706 	br	8063f4 <__reset+0xff8053f4>
  8064d8:	00bfffc4 	movi	r2,-1
  8064dc:	003fd106 	br	806424 <__reset+0xff805424>

008064e0 <__call_exitprocs>:
  8064e0:	00802074 	movhi	r2,129
  8064e4:	10a07d04 	addi	r2,r2,-32268
  8064e8:	10800017 	ldw	r2,0(r2)
  8064ec:	defff404 	addi	sp,sp,-48
  8064f0:	dd800815 	stw	r22,32(sp)
  8064f4:	d8800015 	stw	r2,0(sp)
  8064f8:	10805204 	addi	r2,r2,328
  8064fc:	dd000615 	stw	r20,24(sp)
  806500:	dc800415 	stw	r18,16(sp)
  806504:	dfc00b15 	stw	ra,44(sp)
  806508:	df000a15 	stw	fp,40(sp)
  80650c:	ddc00915 	stw	r23,36(sp)
  806510:	dd400715 	stw	r21,28(sp)
  806514:	dcc00515 	stw	r19,20(sp)
  806518:	dc400315 	stw	r17,12(sp)
  80651c:	dc000215 	stw	r16,8(sp)
  806520:	2025883a 	mov	r18,r4
  806524:	2829883a 	mov	r20,r5
  806528:	d8800115 	stw	r2,4(sp)
  80652c:	05bfffc4 	movi	r22,-1
  806530:	d8800017 	ldw	r2,0(sp)
  806534:	14c05217 	ldw	r19,328(r2)
  806538:	98001d26 	beq	r19,zero,8065b0 <__call_exitprocs+0xd0>
  80653c:	dd400117 	ldw	r21,4(sp)
  806540:	98800117 	ldw	r2,4(r19)
  806544:	173fffc4 	addi	fp,r2,-1
  806548:	e0000d16 	blt	fp,zero,806580 <__call_exitprocs+0xa0>
  80654c:	14000044 	addi	r16,r2,1
  806550:	8421883a 	add	r16,r16,r16
  806554:	8421883a 	add	r16,r16,r16
  806558:	84402004 	addi	r17,r16,128
  80655c:	9c63883a 	add	r17,r19,r17
  806560:	9c21883a 	add	r16,r19,r16
  806564:	a0001e26 	beq	r20,zero,8065e0 <__call_exitprocs+0x100>
  806568:	80804017 	ldw	r2,256(r16)
  80656c:	15001c26 	beq	r2,r20,8065e0 <__call_exitprocs+0x100>
  806570:	e73fffc4 	addi	fp,fp,-1
  806574:	843fff04 	addi	r16,r16,-4
  806578:	8c7fff04 	addi	r17,r17,-4
  80657c:	e5bff91e 	bne	fp,r22,806564 <__reset+0xff805564>
  806580:	00800034 	movhi	r2,0
  806584:	10800004 	addi	r2,r2,0
  806588:	10000926 	beq	r2,zero,8065b0 <__call_exitprocs+0xd0>
  80658c:	98800117 	ldw	r2,4(r19)
  806590:	1000311e 	bne	r2,zero,806658 <__call_exitprocs+0x178>
  806594:	98800017 	ldw	r2,0(r19)
  806598:	10003426 	beq	r2,zero,80666c <__call_exitprocs+0x18c>
  80659c:	9809883a 	mov	r4,r19
  8065a0:	a8800015 	stw	r2,0(r21)
  8065a4:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8065a8:	acc00017 	ldw	r19,0(r21)
  8065ac:	983fe41e 	bne	r19,zero,806540 <__reset+0xff805540>
  8065b0:	dfc00b17 	ldw	ra,44(sp)
  8065b4:	df000a17 	ldw	fp,40(sp)
  8065b8:	ddc00917 	ldw	r23,36(sp)
  8065bc:	dd800817 	ldw	r22,32(sp)
  8065c0:	dd400717 	ldw	r21,28(sp)
  8065c4:	dd000617 	ldw	r20,24(sp)
  8065c8:	dcc00517 	ldw	r19,20(sp)
  8065cc:	dc800417 	ldw	r18,16(sp)
  8065d0:	dc400317 	ldw	r17,12(sp)
  8065d4:	dc000217 	ldw	r16,8(sp)
  8065d8:	dec00c04 	addi	sp,sp,48
  8065dc:	f800283a 	ret
  8065e0:	98800117 	ldw	r2,4(r19)
  8065e4:	80c00017 	ldw	r3,0(r16)
  8065e8:	10bfffc4 	addi	r2,r2,-1
  8065ec:	17001526 	beq	r2,fp,806644 <__call_exitprocs+0x164>
  8065f0:	80000015 	stw	zero,0(r16)
  8065f4:	183fde26 	beq	r3,zero,806570 <__reset+0xff805570>
  8065f8:	00800044 	movi	r2,1
  8065fc:	1708983a 	sll	r4,r2,fp
  806600:	98806217 	ldw	r2,392(r19)
  806604:	9dc00117 	ldw	r23,4(r19)
  806608:	2084703a 	and	r2,r4,r2
  80660c:	1000061e 	bne	r2,zero,806628 <__call_exitprocs+0x148>
  806610:	183ee83a 	callr	r3
  806614:	98800117 	ldw	r2,4(r19)
  806618:	15ffc51e 	bne	r2,r23,806530 <__reset+0xff805530>
  80661c:	a8800017 	ldw	r2,0(r21)
  806620:	14ffd326 	beq	r2,r19,806570 <__reset+0xff805570>
  806624:	003fc206 	br	806530 <__reset+0xff805530>
  806628:	98806317 	ldw	r2,396(r19)
  80662c:	2084703a 	and	r2,r4,r2
  806630:	1000061e 	bne	r2,zero,80664c <__call_exitprocs+0x16c>
  806634:	89400017 	ldw	r5,0(r17)
  806638:	9009883a 	mov	r4,r18
  80663c:	183ee83a 	callr	r3
  806640:	003ff406 	br	806614 <__reset+0xff805614>
  806644:	9f000115 	stw	fp,4(r19)
  806648:	003fea06 	br	8065f4 <__reset+0xff8055f4>
  80664c:	89000017 	ldw	r4,0(r17)
  806650:	183ee83a 	callr	r3
  806654:	003fef06 	br	806614 <__reset+0xff805614>
  806658:	98800017 	ldw	r2,0(r19)
  80665c:	982b883a 	mov	r21,r19
  806660:	1027883a 	mov	r19,r2
  806664:	983fb61e 	bne	r19,zero,806540 <__reset+0xff805540>
  806668:	003fd106 	br	8065b0 <__reset+0xff8055b0>
  80666c:	0005883a 	mov	r2,zero
  806670:	003ffa06 	br	80665c <__reset+0xff80565c>

00806674 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806674:	defffd04 	addi	sp,sp,-12
  806678:	df000215 	stw	fp,8(sp)
  80667c:	df000204 	addi	fp,sp,8
  806680:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  806684:	0001883a 	nop
  806688:	e0bfff17 	ldw	r2,-4(fp)
  80668c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  806690:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806694:	10000226 	beq	r2,zero,8066a0 <_exit+0x2c>
    ALT_SIM_FAIL();
  806698:	002af070 	cmpltui	zero,zero,43969
  80669c:	00000106 	br	8066a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8066a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8066a4:	003fff06 	br	8066a4 <__reset+0xff8056a4>
