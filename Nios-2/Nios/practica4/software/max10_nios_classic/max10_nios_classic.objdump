
max10_nios_classic.elf:     file format elf32-littlenios2
max10_nios_classic.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001bc

Program Header:
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000081e4 memsz 0x00008334 flags rwx
    LOAD off    0x0000a000 vaddr 0x01001000 paddr 0x01001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01001000  01001000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000064c0  008001bc  008001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0080667c  0080667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  008066c8  008066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00808204  00808204  00009204  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00808354  00808354  0000a000  2**0
                  CONTENTS
  7 .flash        00000000  01001020  01001020  0000a000  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  0000a000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000968  00000000  00000000  0000a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017190  00000000  00000000  0000a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000615b  00000000  00000000  00021b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006d4a  00000000  00000000  00027c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001844  00000000  00000000  0002e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000026f0  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004748  00000000  00000000  00032914  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0003705c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002d0  00000000  00000000  00037070  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00039abc  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00039abf  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00039ac2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00039ac3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00039ac4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00039ac8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00039acc  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  00039ad0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  00039ad4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  00039ad8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  00039adc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000012  00000000  00000000  00039ae3  2**0
                  CONTENTS, READONLY
 30 .jdi          000035c3  00000000  00000000  00039af5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054897  00000000  00000000  0003d0b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01001000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001bc l    d  .text	00000000 .text
0080667c l    d  .rodata	00000000 .rodata
008066c8 l    d  .rwdata	00000000 .rwdata
00808204 l    d  .bss	00000000 .bss
00808354 l    d  .sdram	00000000 .sdram
01001020 l    d  .flash	00000000 .flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../max10_nios_classic_bsp//obj/HAL/src/crt0.o
008001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
008066c8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00801c94 l     F .text	00000008 __fp_lock
00801c9c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00802d80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00802ea0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00802ecc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00802fd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
008030c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008032a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008081ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803520 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803664 l     F .text	00000038 alt_dev_reg
0080709c l     O .rwdata	00001060 jtag
008080fc l     O .rwdata	000000c8 flash
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0080373c l     F .text	00000038 alt_flash_device_register
008037c8 l     F .text	00000290 alt_epcs_flash_query
00803a58 l     F .text	000000e8 alt_epcs_flash_memcmp
00803e2c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008042f4 l     F .text	000001fc altera_avalon_jtag_uart_irq
008044f0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00804b08 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
00804c60 l     F .text	00000038 epcs_test_wip
00804c98 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00805370 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00805898 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008059f0 l     F .text	00000050 alt_get_errno
00805a40 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00803da0 g     F .text	0000008c alt_epcs_flash_get_info
00802c1c g     F .text	00000064 _isatty_r
008031f0 g     F .text	00000078 alt_main
00800228 g     F .text	000000b8 _puts_r
00808254 g     O .bss	00000100 alt_irq
00802c80 g     F .text	0000006c _lseek_r
00808354 g       *ABS*	00000000 __alt_heap_start
00802944 g     F .text	0000005c __sseek
00801d40 g     F .text	0000019c __sinit
00801cb0 g     F .text	00000078 __sfmoreglue
01001000 g       *ABS*	00000000 __alt_mem_flash
00803288 g     F .text	00000020 __malloc_unlock
008011e4 g     F .text	0000013c memmove
00801d28 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00804cd0 g     F .text	000000f8 epcs_sector_erase
01001000 g     F .entry	00000000 __reset
00802bb4 g     F .text	00000068 _fstat_r
00808210 g     O .bss	00000004 errno
008028c0 g     F .text	00000008 __seofread
00808218 g     O .bss	00000004 alt_argv
008101c4 g       *ABS*	00000000 _gp
00806f1c g     O .rwdata	00000180 alt_fd_list
00804f0c g     F .text	00000068 epcs_write_status_register
00806048 g     F .text	00000090 alt_find_dev
008010d8 g     F .text	0000010c memcpy
00801ca4 g     F .text	0000000c _cleanup_r
00805978 g     F .text	00000078 alt_io_redirect
0080667c g       *ABS*	00000000 __DTOR_END__
008002e0 g     F .text	00000014 puts
00803f34 g     F .text	00000104 alt_epcs_flash_write_block
008046e8 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803020 g     F .text	000000a8 isatty
0080820c g     O .bss	00000004 __malloc_top_pad
00800380 g     F .text	000004ac __sfvwrite_r
00801884 g     F .text	00000064 _sbrk_r
00802cec g     F .text	0000006c _read_r
008081e4 g     O .rwdata	00000004 alt_max_fd
00802a78 g     F .text	00000128 _fclose_r
00801c64 g     F .text	00000030 fflush
00808208 g     O .bss	00000004 __malloc_max_sbrked_mem
00803ec0 g     F .text	00000074 alt_epcs_flash_erase_block
00803118 g     F .text	000000d8 lseek
008081c4 g     O .rwdata	00000004 _global_impure_ptr
008051d4 g     F .text	0000005c epcs_exit_4_bytes_mode
00801320 g     F .text	00000564 _realloc_r
00808354 g       *ABS*	00000000 __bss_end
008057a8 g     F .text	000000f0 alt_iic_isr_register
00805d28 g     F .text	00000104 alt_tick
00802008 g     F .text	00000018 __fp_lock_all
0080575c g     F .text	0000004c alt_ic_irq_enabled
00805c90 g     F .text	00000098 alt_alarm_stop
00808220 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000d0 alt_irq_handler
00806ef4 g     O .rwdata	00000028 alt_dev_null
008081dc g     O .rwdata	00000008 alt_dev_list
00803570 g     F .text	000000f4 write
00802f1c g     F .text	000000b4 fstat
00805090 g     F .text	00000068 epcs_read_electronic_signature
00808354 g       *ABS*	00000000 end
00804234 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080667c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804b7c g     F .text	00000088 alt_avalon_timer_sc_init
008048f0 g     F .text	00000218 altera_avalon_jtag_uart_write
00801ff8 g     F .text	00000004 __sfp_lock_acquire
00800ff0 g     F .text	000000e8 memchr
00802174 g     F .text	000002d0 _free_r
008064a4 g     F .text	000001a4 __call_exitprocs
008081cc g     O .rwdata	00000004 __malloc_sbrk_base
008001bc g     F .text	00000038 _start
00808224 g     O .bss	00000004 _alt_tick_rate
00805e4c g     F .text	000001fc alt_avalon_spi_command
00808228 g     O .bss	00000004 _alt_nticks
008032f8 g     F .text	000000f8 read
008036d0 g     F .text	0000006c alt_sys_init
00806388 g     F .text	0000011c __register_exitproc
00804594 g     F .text	00000068 altera_avalon_jtag_uart_close
00802d58 g     F .text	00000028 .hidden __mulsi3
0080822c g     O .bss	00000028 __malloc_current_mallinfo
00804c04 g     F .text	0000005c epcs_read_status_register
008040d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008061ec g     F .text	000000d4 alt_get_fd
00802a14 g     F .text	00000064 _close_r
008050f8 g     F .text	00000080 epcs_read_device_id
0080630c g     F .text	0000007c memcmp
00804190 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00808354 g       *ABS*	00000000 __alt_stack_base
008041e0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008018e8 g     F .text	00000138 __swsetup_r
00801edc g     F .text	0000011c __sfp
00806aec g     O .rwdata	00000408 __malloc_av_
00802004 g     F .text	00000004 __sinit_lock_release
0080286c g     F .text	00000054 __sread
008060d8 g     F .text	00000114 alt_find_file
008053c0 g     F .text	000000a0 alt_dev_llist_insert
00803268 g     F .text	00000020 __malloc_lock
00803470 g     F .text	000000b0 sbrk
00801a20 g     F .text	00000244 _fflush_r
008081f0 g     O .rwdata	00000008 alt_flash_dev_list
00808204 g       *ABS*	00000000 __bss_start
00802758 g     F .text	00000114 memset
008001f4 g     F .text	00000034 main
0080821c g     O .bss	00000004 alt_envp
00808204 g     O .bss	00000004 __malloc_max_total_mem
00804130 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008029a0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802ba0 g     F .text	00000014 fclose
0080082c g     F .text	000007c4 _malloc_r
008081e8 g     O .rwdata	00000004 alt_errno
00802444 g     F .text	000000a8 _fwalk
00802038 g     F .text	0000013c _malloc_trim_r
0080667c g       *ABS*	00000000 __CTOR_END__
00803b40 g     F .text	00000260 alt_epcs_flash_write
0080667c g       *ABS*	00000000 __DTOR_LIST__
0080369c g     F .text	00000034 alt_irq_init
008033f0 g     F .text	00000080 alt_release_fd
008062c0 g     F .text	00000014 atexit
008029a8 g     F .text	0000006c _write_r
008081c8 g     O .rwdata	00000004 _impure_ptr
00808214 g     O .bss	00000004 alt_argc
008054bc g     F .text	0000005c _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00802020 g     F .text	00000018 __fp_unlock_all
008081d4 g     O .rwdata	00000008 alt_fs_list
00804dc8 g     F .text	000000f4 epcs_read_buffer
00803774 g     F .text	00000054 alt_epcs_flash_init
008055d0 g     F .text	00000050 alt_ic_isr_register
00808204 g       *ABS*	00000000 _edata
00808354 g       *ABS*	00000000 _end
00805518 g     F .text	00000068 alt_flash_open_dev
008045fc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
008056bc g     F .text	000000a0 alt_ic_irq_disable
00805178 g     F .text	0000005c epcs_enter_4_bytes_mode
008028c8 g     F .text	0000007c __swrite
008081d0 g     O .rwdata	00000004 __malloc_trim_threshold
00805e2c g     F .text	00000020 altera_nios2_qsys_irq_init
008062d4 g     F .text	00000038 exit
008024ec g     F .text	000000b8 _fwalk_reent
00805580 g     F .text	00000050 alt_flash_close_dev
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801ffc g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00806648 g     F .text	00000034 _exit
00805230 g     F .text	00000140 alt_alarm_start
008025a4 g     F .text	000001b4 __smakebuf_r
008002f4 g     F .text	0000008c strlen
00804ebc g     F .text	00000050 epcs_write_enable
00805b34 g     F .text	0000015c open
008081f8 g     O .rwdata	00000004 alt_priority_mask
00805620 g     F .text	0000009c alt_ic_irq_enable
00804038 g     F .text	00000098 alt_epcs_flash_read
008081fc g     O .rwdata	00000008 alt_alarm_list
00805460 g     F .text	0000005c _do_ctors
00802dd0 g     F .text	000000d0 close
00000000  w      *UND*	00000000 free
00802000 g     F .text	00000004 __sinit_lock_acquire
00804f74 g     F .text	0000011c epcs_write_buffer



Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

00800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0fffb17 	ldw	r3,-20(fp)
  800120:	e0bffc17 	ldw	r2,-16(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	10001726 	beq	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	00c02074 	movhi	r3,129
  800130:	18e09504 	addi	r3,r3,-32172
  800134:	e0bffd17 	ldw	r2,-12(fp)
  800138:	100490fa 	slli	r2,r2,3
  80013c:	1885883a 	add	r2,r3,r2
  800140:	10800017 	ldw	r2,0(r2)
  800144:	01002074 	movhi	r4,129
  800148:	21209504 	addi	r4,r4,-32172
  80014c:	e0fffd17 	ldw	r3,-12(fp)
  800150:	180690fa 	slli	r3,r3,3
  800154:	20c7883a 	add	r3,r4,r3
  800158:	18c00104 	addi	r3,r3,4
  80015c:	18c00017 	ldw	r3,0(r3)
  800160:	1809883a 	mov	r4,r3
  800164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  80017c:	e0bffb17 	ldw	r2,-20(fp)
  800180:	103fe31e 	bne	r2,zero,800110 <__reset+0xff7ff110>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffc17 	ldw	r2,-16(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fde06 	br	80011c <__reset+0xff7ff11c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a4:	0001883a 	nop
}
  8001a8:	e037883a 	mov	sp,fp
  8001ac:	dfc00117 	ldw	ra,4(sp)
  8001b0:	df000017 	ldw	fp,0(sp)
  8001b4:	dec00204 	addi	sp,sp,8
  8001b8:	f800283a 	ret

Disassembly of section .text:

008001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001bc:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  8001c4:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c8:	d6807114 	ori	gp,gp,452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001cc:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d0:	10a08114 	ori	r2,r2,33284

    movhi r3, %hi(__bss_end)
  8001d4:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001d8:	18e0d514 	ori	r3,r3,33620

    beq r2, r3, 1f
  8001dc:	10c00326 	beq	r2,r3,8001ec <_start+0x30>

0:
    stw zero, (r2)
  8001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e8:	10fffd36 	bltu	r2,r3,8001e0 <__reset+0xff7ff1e0>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001ec:	08031f00 	call	8031f0 <alt_main>

008001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f0:	003fff06 	br	8001f0 <__reset+0xff7ff1f0>

008001f4 <main>:
 */

#include <stdio.h>

int main()
{
  8001f4:	defffe04 	addi	sp,sp,-8
  8001f8:	dfc00115 	stw	ra,4(sp)
  8001fc:	df000015 	stw	fp,0(sp)
  800200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  800204:	01002034 	movhi	r4,128
  800208:	21199f04 	addi	r4,r4,26236
  80020c:	08002e00 	call	8002e0 <puts>

  return 0;
  800210:	0005883a 	mov	r2,zero
}
  800214:	e037883a 	mov	sp,fp
  800218:	dfc00117 	ldw	ra,4(sp)
  80021c:	df000017 	ldw	fp,0(sp)
  800220:	dec00204 	addi	sp,sp,8
  800224:	f800283a 	ret

00800228 <_puts_r>:
  800228:	defff604 	addi	sp,sp,-40
  80022c:	dc400815 	stw	r17,32(sp)
  800230:	2023883a 	mov	r17,r4
  800234:	2809883a 	mov	r4,r5
  800238:	dc000715 	stw	r16,28(sp)
  80023c:	dfc00915 	stw	ra,36(sp)
  800240:	2821883a 	mov	r16,r5
  800244:	08002f40 	call	8002f4 <strlen>
  800248:	00c02074 	movhi	r3,129
  80024c:	18e07204 	addi	r3,r3,-32312
  800250:	18c00017 	ldw	r3,0(r3)
  800254:	11000044 	addi	r4,r2,1
  800258:	d8800115 	stw	r2,4(sp)
  80025c:	18c00217 	ldw	r3,8(r3)
  800260:	00802034 	movhi	r2,128
  800264:	1099a404 	addi	r2,r2,26256
  800268:	d8800215 	stw	r2,8(sp)
  80026c:	1940030b 	ldhu	r5,12(r3)
  800270:	00800044 	movi	r2,1
  800274:	d8800315 	stw	r2,12(sp)
  800278:	00800084 	movi	r2,2
  80027c:	d8800515 	stw	r2,20(sp)
  800280:	dc000015 	stw	r16,0(sp)
  800284:	d9000615 	stw	r4,24(sp)
  800288:	dec00415 	stw	sp,16(sp)
  80028c:	2888000c 	andi	r2,r5,8192
  800290:	1000061e 	bne	r2,zero,8002ac <_puts_r+0x84>
  800294:	19001917 	ldw	r4,100(r3)
  800298:	00b7ffc4 	movi	r2,-8193
  80029c:	29480014 	ori	r5,r5,8192
  8002a0:	2084703a 	and	r2,r4,r2
  8002a4:	1940030d 	sth	r5,12(r3)
  8002a8:	18801915 	stw	r2,100(r3)
  8002ac:	89400217 	ldw	r5,8(r17)
  8002b0:	8809883a 	mov	r4,r17
  8002b4:	d9800404 	addi	r6,sp,16
  8002b8:	08003800 	call	800380 <__sfvwrite_r>
  8002bc:	1000061e 	bne	r2,zero,8002d8 <_puts_r+0xb0>
  8002c0:	00800284 	movi	r2,10
  8002c4:	dfc00917 	ldw	ra,36(sp)
  8002c8:	dc400817 	ldw	r17,32(sp)
  8002cc:	dc000717 	ldw	r16,28(sp)
  8002d0:	dec00a04 	addi	sp,sp,40
  8002d4:	f800283a 	ret
  8002d8:	00bfffc4 	movi	r2,-1
  8002dc:	003ff906 	br	8002c4 <__reset+0xff7ff2c4>

008002e0 <puts>:
  8002e0:	00802074 	movhi	r2,129
  8002e4:	10a07204 	addi	r2,r2,-32312
  8002e8:	200b883a 	mov	r5,r4
  8002ec:	11000017 	ldw	r4,0(r2)
  8002f0:	08002281 	jmpi	800228 <_puts_r>

008002f4 <strlen>:
  8002f4:	208000cc 	andi	r2,r4,3
  8002f8:	10001d26 	beq	r2,zero,800370 <strlen+0x7c>
  8002fc:	20800007 	ldb	r2,0(r4)
  800300:	10001d26 	beq	r2,zero,800378 <strlen+0x84>
  800304:	2005883a 	mov	r2,r4
  800308:	00000206 	br	800314 <strlen+0x20>
  80030c:	10c00007 	ldb	r3,0(r2)
  800310:	18001526 	beq	r3,zero,800368 <strlen+0x74>
  800314:	10800044 	addi	r2,r2,1
  800318:	10c000cc 	andi	r3,r2,3
  80031c:	183ffb1e 	bne	r3,zero,80030c <__reset+0xff7ff30c>
  800320:	10c00017 	ldw	r3,0(r2)
  800324:	01ffbff4 	movhi	r7,65279
  800328:	39ffbfc4 	addi	r7,r7,-257
  80032c:	01a02074 	movhi	r6,32897
  800330:	31a02004 	addi	r6,r6,-32640
  800334:	00000206 	br	800340 <strlen+0x4c>
  800338:	10800104 	addi	r2,r2,4
  80033c:	10c00017 	ldw	r3,0(r2)
  800340:	19cb883a 	add	r5,r3,r7
  800344:	00c6303a 	nor	r3,zero,r3
  800348:	28c6703a 	and	r3,r5,r3
  80034c:	1986703a 	and	r3,r3,r6
  800350:	183ff926 	beq	r3,zero,800338 <__reset+0xff7ff338>
  800354:	10c00007 	ldb	r3,0(r2)
  800358:	18000326 	beq	r3,zero,800368 <strlen+0x74>
  80035c:	10800044 	addi	r2,r2,1
  800360:	10c00007 	ldb	r3,0(r2)
  800364:	183ffd1e 	bne	r3,zero,80035c <__reset+0xff7ff35c>
  800368:	1105c83a 	sub	r2,r2,r4
  80036c:	f800283a 	ret
  800370:	2005883a 	mov	r2,r4
  800374:	003fea06 	br	800320 <__reset+0xff7ff320>
  800378:	0005883a 	mov	r2,zero
  80037c:	f800283a 	ret

00800380 <__sfvwrite_r>:
  800380:	30800217 	ldw	r2,8(r6)
  800384:	defff404 	addi	sp,sp,-48
  800388:	dcc00515 	stw	r19,20(sp)
  80038c:	dfc00b15 	stw	ra,44(sp)
  800390:	df000a15 	stw	fp,40(sp)
  800394:	ddc00915 	stw	r23,36(sp)
  800398:	dd800815 	stw	r22,32(sp)
  80039c:	dd400715 	stw	r21,28(sp)
  8003a0:	dd000615 	stw	r20,24(sp)
  8003a4:	dc800415 	stw	r18,16(sp)
  8003a8:	dc400315 	stw	r17,12(sp)
  8003ac:	dc000215 	stw	r16,8(sp)
  8003b0:	3027883a 	mov	r19,r6
  8003b4:	10001d26 	beq	r2,zero,80042c <__sfvwrite_r+0xac>
  8003b8:	2880030b 	ldhu	r2,12(r5)
  8003bc:	202b883a 	mov	r21,r4
  8003c0:	2821883a 	mov	r16,r5
  8003c4:	10c0020c 	andi	r3,r2,8
  8003c8:	18002526 	beq	r3,zero,800460 <__sfvwrite_r+0xe0>
  8003cc:	28c00417 	ldw	r3,16(r5)
  8003d0:	18002326 	beq	r3,zero,800460 <__sfvwrite_r+0xe0>
  8003d4:	10c0008c 	andi	r3,r2,2
  8003d8:	9c400017 	ldw	r17,0(r19)
  8003dc:	18002826 	beq	r3,zero,800480 <__sfvwrite_r+0x100>
  8003e0:	0029883a 	mov	r20,zero
  8003e4:	0025883a 	mov	r18,zero
  8003e8:	05810004 	movi	r22,1024
  8003ec:	a00d883a 	mov	r6,r20
  8003f0:	a809883a 	mov	r4,r21
  8003f4:	90004726 	beq	r18,zero,800514 <__sfvwrite_r+0x194>
  8003f8:	900f883a 	mov	r7,r18
  8003fc:	81400717 	ldw	r5,28(r16)
  800400:	b480012e 	bgeu	r22,r18,800408 <__sfvwrite_r+0x88>
  800404:	01c10004 	movi	r7,1024
  800408:	80800917 	ldw	r2,36(r16)
  80040c:	103ee83a 	callr	r2
  800410:	00804c0e 	bge	zero,r2,800544 <__sfvwrite_r+0x1c4>
  800414:	98c00217 	ldw	r3,8(r19)
  800418:	a0a9883a 	add	r20,r20,r2
  80041c:	90a5c83a 	sub	r18,r18,r2
  800420:	1885c83a 	sub	r2,r3,r2
  800424:	98800215 	stw	r2,8(r19)
  800428:	103ff01e 	bne	r2,zero,8003ec <__reset+0xff7ff3ec>
  80042c:	0005883a 	mov	r2,zero
  800430:	dfc00b17 	ldw	ra,44(sp)
  800434:	df000a17 	ldw	fp,40(sp)
  800438:	ddc00917 	ldw	r23,36(sp)
  80043c:	dd800817 	ldw	r22,32(sp)
  800440:	dd400717 	ldw	r21,28(sp)
  800444:	dd000617 	ldw	r20,24(sp)
  800448:	dcc00517 	ldw	r19,20(sp)
  80044c:	dc800417 	ldw	r18,16(sp)
  800450:	dc400317 	ldw	r17,12(sp)
  800454:	dc000217 	ldw	r16,8(sp)
  800458:	dec00c04 	addi	sp,sp,48
  80045c:	f800283a 	ret
  800460:	a809883a 	mov	r4,r21
  800464:	800b883a 	mov	r5,r16
  800468:	08018e80 	call	8018e8 <__swsetup_r>
  80046c:	1000e81e 	bne	r2,zero,800810 <__sfvwrite_r+0x490>
  800470:	8080030b 	ldhu	r2,12(r16)
  800474:	9c400017 	ldw	r17,0(r19)
  800478:	10c0008c 	andi	r3,r2,2
  80047c:	183fd81e 	bne	r3,zero,8003e0 <__reset+0xff7ff3e0>
  800480:	10c0004c 	andi	r3,r2,1
  800484:	002d883a 	mov	r22,zero
  800488:	1800331e 	bne	r3,zero,800558 <__sfvwrite_r+0x1d8>
  80048c:	0025883a 	mov	r18,zero
  800490:	90001c26 	beq	r18,zero,800504 <__sfvwrite_r+0x184>
  800494:	10c0800c 	andi	r3,r2,512
  800498:	85000217 	ldw	r20,8(r16)
  80049c:	18006f26 	beq	r3,zero,80065c <__sfvwrite_r+0x2dc>
  8004a0:	95008936 	bltu	r18,r20,8006c8 <__sfvwrite_r+0x348>
  8004a4:	10c1200c 	andi	r3,r2,1152
  8004a8:	1800a11e 	bne	r3,zero,800730 <__sfvwrite_r+0x3b0>
  8004ac:	81000017 	ldw	r4,0(r16)
  8004b0:	a02f883a 	mov	r23,r20
  8004b4:	a039883a 	mov	fp,r20
  8004b8:	9029883a 	mov	r20,r18
  8004bc:	b00b883a 	mov	r5,r22
  8004c0:	b80d883a 	mov	r6,r23
  8004c4:	08011e40 	call	8011e4 <memmove>
  8004c8:	81400217 	ldw	r5,8(r16)
  8004cc:	81000017 	ldw	r4,0(r16)
  8004d0:	9005883a 	mov	r2,r18
  8004d4:	2f39c83a 	sub	fp,r5,fp
  8004d8:	25c7883a 	add	r3,r4,r23
  8004dc:	87000215 	stw	fp,8(r16)
  8004e0:	80c00015 	stw	r3,0(r16)
  8004e4:	98c00217 	ldw	r3,8(r19)
  8004e8:	b0ad883a 	add	r22,r22,r2
  8004ec:	90a5c83a 	sub	r18,r18,r2
  8004f0:	1d29c83a 	sub	r20,r3,r20
  8004f4:	9d000215 	stw	r20,8(r19)
  8004f8:	a03fcc26 	beq	r20,zero,80042c <__reset+0xff7ff42c>
  8004fc:	8080030b 	ldhu	r2,12(r16)
  800500:	903fe41e 	bne	r18,zero,800494 <__reset+0xff7ff494>
  800504:	8d800017 	ldw	r22,0(r17)
  800508:	8c800117 	ldw	r18,4(r17)
  80050c:	8c400204 	addi	r17,r17,8
  800510:	003fdf06 	br	800490 <__reset+0xff7ff490>
  800514:	8d000017 	ldw	r20,0(r17)
  800518:	8c800117 	ldw	r18,4(r17)
  80051c:	8c400204 	addi	r17,r17,8
  800520:	003fb206 	br	8003ec <__reset+0xff7ff3ec>
  800524:	08013200 	call	801320 <_realloc_r>
  800528:	1039883a 	mov	fp,r2
  80052c:	10009d1e 	bne	r2,zero,8007a4 <__sfvwrite_r+0x424>
  800530:	81400417 	ldw	r5,16(r16)
  800534:	a809883a 	mov	r4,r21
  800538:	08021740 	call	802174 <_free_r>
  80053c:	00800304 	movi	r2,12
  800540:	a8800015 	stw	r2,0(r21)
  800544:	80c0030b 	ldhu	r3,12(r16)
  800548:	00bfffc4 	movi	r2,-1
  80054c:	18c01014 	ori	r3,r3,64
  800550:	80c0030d 	sth	r3,12(r16)
  800554:	003fb606 	br	800430 <__reset+0xff7ff430>
  800558:	0007883a 	mov	r3,zero
  80055c:	0039883a 	mov	fp,zero
  800560:	0025883a 	mov	r18,zero
  800564:	90001f26 	beq	r18,zero,8005e4 <__sfvwrite_r+0x264>
  800568:	18006826 	beq	r3,zero,80070c <__sfvwrite_r+0x38c>
  80056c:	b02f883a 	mov	r23,r22
  800570:	9580012e 	bgeu	r18,r22,800578 <__sfvwrite_r+0x1f8>
  800574:	902f883a 	mov	r23,r18
  800578:	81000017 	ldw	r4,0(r16)
  80057c:	80800417 	ldw	r2,16(r16)
  800580:	b829883a 	mov	r20,r23
  800584:	81800217 	ldw	r6,8(r16)
  800588:	81c00517 	ldw	r7,20(r16)
  80058c:	1100022e 	bgeu	r2,r4,800598 <__sfvwrite_r+0x218>
  800590:	31d1883a 	add	r8,r6,r7
  800594:	45c01816 	blt	r8,r23,8005f8 <__sfvwrite_r+0x278>
  800598:	b9c03f16 	blt	r23,r7,800698 <__sfvwrite_r+0x318>
  80059c:	80800917 	ldw	r2,36(r16)
  8005a0:	81400717 	ldw	r5,28(r16)
  8005a4:	a809883a 	mov	r4,r21
  8005a8:	d8c00115 	stw	r3,4(sp)
  8005ac:	e00d883a 	mov	r6,fp
  8005b0:	103ee83a 	callr	r2
  8005b4:	1029883a 	mov	r20,r2
  8005b8:	d8c00117 	ldw	r3,4(sp)
  8005bc:	00bfe10e 	bge	zero,r2,800544 <__reset+0xff7ff544>
  8005c0:	b52dc83a 	sub	r22,r22,r20
  8005c4:	b0001f26 	beq	r22,zero,800644 <__sfvwrite_r+0x2c4>
  8005c8:	98800217 	ldw	r2,8(r19)
  8005cc:	e539883a 	add	fp,fp,r20
  8005d0:	9525c83a 	sub	r18,r18,r20
  8005d4:	1529c83a 	sub	r20,r2,r20
  8005d8:	9d000215 	stw	r20,8(r19)
  8005dc:	a03f9326 	beq	r20,zero,80042c <__reset+0xff7ff42c>
  8005e0:	903fe11e 	bne	r18,zero,800568 <__reset+0xff7ff568>
  8005e4:	8f000017 	ldw	fp,0(r17)
  8005e8:	8c800117 	ldw	r18,4(r17)
  8005ec:	0007883a 	mov	r3,zero
  8005f0:	8c400204 	addi	r17,r17,8
  8005f4:	003fdb06 	br	800564 <__reset+0xff7ff564>
  8005f8:	400d883a 	mov	r6,r8
  8005fc:	e00b883a 	mov	r5,fp
  800600:	d8c00115 	stw	r3,4(sp)
  800604:	da000015 	stw	r8,0(sp)
  800608:	08011e40 	call	8011e4 <memmove>
  80060c:	da000017 	ldw	r8,0(sp)
  800610:	80800017 	ldw	r2,0(r16)
  800614:	a809883a 	mov	r4,r21
  800618:	800b883a 	mov	r5,r16
  80061c:	1205883a 	add	r2,r2,r8
  800620:	80800015 	stw	r2,0(r16)
  800624:	da000015 	stw	r8,0(sp)
  800628:	0801a200 	call	801a20 <_fflush_r>
  80062c:	d8c00117 	ldw	r3,4(sp)
  800630:	da000017 	ldw	r8,0(sp)
  800634:	103fc31e 	bne	r2,zero,800544 <__reset+0xff7ff544>
  800638:	4029883a 	mov	r20,r8
  80063c:	b52dc83a 	sub	r22,r22,r20
  800640:	b03fe11e 	bne	r22,zero,8005c8 <__reset+0xff7ff5c8>
  800644:	a809883a 	mov	r4,r21
  800648:	800b883a 	mov	r5,r16
  80064c:	0801a200 	call	801a20 <_fflush_r>
  800650:	103fbc1e 	bne	r2,zero,800544 <__reset+0xff7ff544>
  800654:	0007883a 	mov	r3,zero
  800658:	003fdb06 	br	8005c8 <__reset+0xff7ff5c8>
  80065c:	81000017 	ldw	r4,0(r16)
  800660:	80800417 	ldw	r2,16(r16)
  800664:	1100012e 	bgeu	r2,r4,80066c <__sfvwrite_r+0x2ec>
  800668:	a4805836 	bltu	r20,r18,8007cc <__sfvwrite_r+0x44c>
  80066c:	81c00517 	ldw	r7,20(r16)
  800670:	91c01a36 	bltu	r18,r7,8006dc <__sfvwrite_r+0x35c>
  800674:	80800917 	ldw	r2,36(r16)
  800678:	81400717 	ldw	r5,28(r16)
  80067c:	a809883a 	mov	r4,r21
  800680:	b00d883a 	mov	r6,r22
  800684:	103ee83a 	callr	r2
  800688:	1029883a 	mov	r20,r2
  80068c:	00bfad0e 	bge	zero,r2,800544 <__reset+0xff7ff544>
  800690:	a005883a 	mov	r2,r20
  800694:	003f9306 	br	8004e4 <__reset+0xff7ff4e4>
  800698:	b80d883a 	mov	r6,r23
  80069c:	e00b883a 	mov	r5,fp
  8006a0:	d8c00115 	stw	r3,4(sp)
  8006a4:	08011e40 	call	8011e4 <memmove>
  8006a8:	80800217 	ldw	r2,8(r16)
  8006ac:	81000017 	ldw	r4,0(r16)
  8006b0:	d8c00117 	ldw	r3,4(sp)
  8006b4:	15c5c83a 	sub	r2,r2,r23
  8006b8:	25ef883a 	add	r23,r4,r23
  8006bc:	80800215 	stw	r2,8(r16)
  8006c0:	85c00015 	stw	r23,0(r16)
  8006c4:	003fbe06 	br	8005c0 <__reset+0xff7ff5c0>
  8006c8:	81000017 	ldw	r4,0(r16)
  8006cc:	9039883a 	mov	fp,r18
  8006d0:	9029883a 	mov	r20,r18
  8006d4:	902f883a 	mov	r23,r18
  8006d8:	003f7806 	br	8004bc <__reset+0xff7ff4bc>
  8006dc:	b00b883a 	mov	r5,r22
  8006e0:	900d883a 	mov	r6,r18
  8006e4:	08011e40 	call	8011e4 <memmove>
  8006e8:	80c00217 	ldw	r3,8(r16)
  8006ec:	80800017 	ldw	r2,0(r16)
  8006f0:	9029883a 	mov	r20,r18
  8006f4:	1c87c83a 	sub	r3,r3,r18
  8006f8:	1485883a 	add	r2,r2,r18
  8006fc:	80800015 	stw	r2,0(r16)
  800700:	80c00215 	stw	r3,8(r16)
  800704:	9005883a 	mov	r2,r18
  800708:	003f7606 	br	8004e4 <__reset+0xff7ff4e4>
  80070c:	e009883a 	mov	r4,fp
  800710:	01400284 	movi	r5,10
  800714:	900d883a 	mov	r6,r18
  800718:	0800ff00 	call	800ff0 <memchr>
  80071c:	10003926 	beq	r2,zero,800804 <__sfvwrite_r+0x484>
  800720:	15800044 	addi	r22,r2,1
  800724:	b72dc83a 	sub	r22,r22,fp
  800728:	00c00044 	movi	r3,1
  80072c:	003f8f06 	br	80056c <__reset+0xff7ff56c>
  800730:	81000517 	ldw	r4,20(r16)
  800734:	81400417 	ldw	r5,16(r16)
  800738:	80c00017 	ldw	r3,0(r16)
  80073c:	210d883a 	add	r6,r4,r4
  800740:	3109883a 	add	r4,r6,r4
  800744:	2028d7fa 	srli	r20,r4,31
  800748:	196fc83a 	sub	r23,r3,r5
  80074c:	b9800044 	addi	r6,r23,1
  800750:	a109883a 	add	r4,r20,r4
  800754:	2029d07a 	srai	r20,r4,1
  800758:	348d883a 	add	r6,r6,r18
  80075c:	a180272e 	bgeu	r20,r6,8007fc <__sfvwrite_r+0x47c>
  800760:	3029883a 	mov	r20,r6
  800764:	1081000c 	andi	r2,r2,1024
  800768:	a809883a 	mov	r4,r21
  80076c:	103f6d26 	beq	r2,zero,800524 <__reset+0xff7ff524>
  800770:	300b883a 	mov	r5,r6
  800774:	080082c0 	call	80082c <_malloc_r>
  800778:	1039883a 	mov	fp,r2
  80077c:	103f6f26 	beq	r2,zero,80053c <__reset+0xff7ff53c>
  800780:	81400417 	ldw	r5,16(r16)
  800784:	1009883a 	mov	r4,r2
  800788:	b80d883a 	mov	r6,r23
  80078c:	08010d80 	call	8010d8 <memcpy>
  800790:	8080030b 	ldhu	r2,12(r16)
  800794:	00fedfc4 	movi	r3,-1153
  800798:	10c4703a 	and	r2,r2,r3
  80079c:	10802014 	ori	r2,r2,128
  8007a0:	8080030d 	sth	r2,12(r16)
  8007a4:	e5c9883a 	add	r4,fp,r23
  8007a8:	a5c7c83a 	sub	r3,r20,r23
  8007ac:	87000415 	stw	fp,16(r16)
  8007b0:	85000515 	stw	r20,20(r16)
  8007b4:	81000015 	stw	r4,0(r16)
  8007b8:	9039883a 	mov	fp,r18
  8007bc:	80c00215 	stw	r3,8(r16)
  8007c0:	9029883a 	mov	r20,r18
  8007c4:	902f883a 	mov	r23,r18
  8007c8:	003f3c06 	br	8004bc <__reset+0xff7ff4bc>
  8007cc:	b00b883a 	mov	r5,r22
  8007d0:	a00d883a 	mov	r6,r20
  8007d4:	08011e40 	call	8011e4 <memmove>
  8007d8:	80800017 	ldw	r2,0(r16)
  8007dc:	a809883a 	mov	r4,r21
  8007e0:	800b883a 	mov	r5,r16
  8007e4:	1505883a 	add	r2,r2,r20
  8007e8:	80800015 	stw	r2,0(r16)
  8007ec:	0801a200 	call	801a20 <_fflush_r>
  8007f0:	103f541e 	bne	r2,zero,800544 <__reset+0xff7ff544>
  8007f4:	a005883a 	mov	r2,r20
  8007f8:	003f3a06 	br	8004e4 <__reset+0xff7ff4e4>
  8007fc:	a00d883a 	mov	r6,r20
  800800:	003fd806 	br	800764 <__reset+0xff7ff764>
  800804:	95800044 	addi	r22,r18,1
  800808:	00c00044 	movi	r3,1
  80080c:	003f5706 	br	80056c <__reset+0xff7ff56c>
  800810:	80c0030b 	ldhu	r3,12(r16)
  800814:	00bfffc4 	movi	r2,-1
  800818:	18c01014 	ori	r3,r3,64
  80081c:	80c0030d 	sth	r3,12(r16)
  800820:	00c00244 	movi	r3,9
  800824:	a8c00015 	stw	r3,0(r21)
  800828:	003f0106 	br	800430 <__reset+0xff7ff430>

0080082c <_malloc_r>:
  80082c:	defff504 	addi	sp,sp,-44
  800830:	dc800315 	stw	r18,12(sp)
  800834:	dfc00a15 	stw	ra,40(sp)
  800838:	df000915 	stw	fp,36(sp)
  80083c:	ddc00815 	stw	r23,32(sp)
  800840:	dd800715 	stw	r22,28(sp)
  800844:	dd400615 	stw	r21,24(sp)
  800848:	dd000515 	stw	r20,20(sp)
  80084c:	dcc00415 	stw	r19,16(sp)
  800850:	dc400215 	stw	r17,8(sp)
  800854:	dc000115 	stw	r16,4(sp)
  800858:	288002c4 	addi	r2,r5,11
  80085c:	00c00584 	movi	r3,22
  800860:	2025883a 	mov	r18,r4
  800864:	18802b2e 	bgeu	r3,r2,800914 <_malloc_r+0xe8>
  800868:	047ffe04 	movi	r17,-8
  80086c:	1462703a 	and	r17,r2,r17
  800870:	88002a16 	blt	r17,zero,80091c <_malloc_r+0xf0>
  800874:	89402936 	bltu	r17,r5,80091c <_malloc_r+0xf0>
  800878:	9009883a 	mov	r4,r18
  80087c:	08032680 	call	803268 <__malloc_lock>
  800880:	00807dc4 	movi	r2,503
  800884:	14402936 	bltu	r2,r17,80092c <_malloc_r+0x100>
  800888:	8808d0fa 	srli	r4,r17,3
  80088c:	04c02034 	movhi	r19,128
  800890:	9cdabb04 	addi	r19,r19,27372
  800894:	2105883a 	add	r2,r4,r4
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	9885883a 	add	r2,r19,r2
  8008a4:	14000317 	ldw	r16,12(r2)
  8008a8:	80815226 	beq	r16,r2,800df4 <_malloc_r+0x5c8>
  8008ac:	81000117 	ldw	r4,4(r16)
  8008b0:	00bfff04 	movi	r2,-4
  8008b4:	80c00317 	ldw	r3,12(r16)
  8008b8:	2084703a 	and	r2,r4,r2
  8008bc:	8085883a 	add	r2,r16,r2
  8008c0:	81000217 	ldw	r4,8(r16)
  8008c4:	11400117 	ldw	r5,4(r2)
  8008c8:	20c00315 	stw	r3,12(r4)
  8008cc:	19000215 	stw	r4,8(r3)
  8008d0:	28c00054 	ori	r3,r5,1
  8008d4:	10c00115 	stw	r3,4(r2)
  8008d8:	9009883a 	mov	r4,r18
  8008dc:	08032880 	call	803288 <__malloc_unlock>
  8008e0:	80800204 	addi	r2,r16,8
  8008e4:	dfc00a17 	ldw	ra,40(sp)
  8008e8:	df000917 	ldw	fp,36(sp)
  8008ec:	ddc00817 	ldw	r23,32(sp)
  8008f0:	dd800717 	ldw	r22,28(sp)
  8008f4:	dd400617 	ldw	r21,24(sp)
  8008f8:	dd000517 	ldw	r20,20(sp)
  8008fc:	dcc00417 	ldw	r19,16(sp)
  800900:	dc800317 	ldw	r18,12(sp)
  800904:	dc400217 	ldw	r17,8(sp)
  800908:	dc000117 	ldw	r16,4(sp)
  80090c:	dec00b04 	addi	sp,sp,44
  800910:	f800283a 	ret
  800914:	04400404 	movi	r17,16
  800918:	897fd72e 	bgeu	r17,r5,800878 <__reset+0xff7ff878>
  80091c:	00800304 	movi	r2,12
  800920:	90800015 	stw	r2,0(r18)
  800924:	0005883a 	mov	r2,zero
  800928:	003fee06 	br	8008e4 <__reset+0xff7ff8e4>
  80092c:	8808d27a 	srli	r4,r17,9
  800930:	20007126 	beq	r4,zero,800af8 <_malloc_r+0x2cc>
  800934:	00800104 	movi	r2,4
  800938:	1100f536 	bltu	r2,r4,800d10 <_malloc_r+0x4e4>
  80093c:	8808d1ba 	srli	r4,r17,6
  800940:	21000e04 	addi	r4,r4,56
  800944:	210b883a 	add	r5,r4,r4
  800948:	294b883a 	add	r5,r5,r5
  80094c:	294b883a 	add	r5,r5,r5
  800950:	04c02034 	movhi	r19,128
  800954:	9cdabb04 	addi	r19,r19,27372
  800958:	994b883a 	add	r5,r19,r5
  80095c:	2c000317 	ldw	r16,12(r5)
  800960:	2c000e26 	beq	r5,r16,80099c <_malloc_r+0x170>
  800964:	80c00117 	ldw	r3,4(r16)
  800968:	01ffff04 	movi	r7,-4
  80096c:	018003c4 	movi	r6,15
  800970:	19c6703a 	and	r3,r3,r7
  800974:	1c45c83a 	sub	r2,r3,r17
  800978:	30800716 	blt	r6,r2,800998 <_malloc_r+0x16c>
  80097c:	1000610e 	bge	r2,zero,800b04 <_malloc_r+0x2d8>
  800980:	84000317 	ldw	r16,12(r16)
  800984:	2c000526 	beq	r5,r16,80099c <_malloc_r+0x170>
  800988:	80c00117 	ldw	r3,4(r16)
  80098c:	19c6703a 	and	r3,r3,r7
  800990:	1c45c83a 	sub	r2,r3,r17
  800994:	30bff90e 	bge	r6,r2,80097c <__reset+0xff7ff97c>
  800998:	213fffc4 	addi	r4,r4,-1
  80099c:	21000044 	addi	r4,r4,1
  8009a0:	9c000417 	ldw	r16,16(r19)
  8009a4:	00c02034 	movhi	r3,128
  8009a8:	18dabb04 	addi	r3,r3,27372
  8009ac:	1a400204 	addi	r9,r3,8
  8009b0:	82410926 	beq	r16,r9,800dd8 <_malloc_r+0x5ac>
  8009b4:	81400117 	ldw	r5,4(r16)
  8009b8:	00bfff04 	movi	r2,-4
  8009bc:	018003c4 	movi	r6,15
  8009c0:	2884703a 	and	r2,r5,r2
  8009c4:	144bc83a 	sub	r5,r2,r17
  8009c8:	3140f416 	blt	r6,r5,800d9c <_malloc_r+0x570>
  8009cc:	1a400515 	stw	r9,20(r3)
  8009d0:	1a400415 	stw	r9,16(r3)
  8009d4:	2800570e 	bge	r5,zero,800b34 <_malloc_r+0x308>
  8009d8:	01407fc4 	movi	r5,511
  8009dc:	2880d436 	bltu	r5,r2,800d30 <_malloc_r+0x504>
  8009e0:	1004d0fa 	srli	r2,r2,3
  8009e4:	02000044 	movi	r8,1
  8009e8:	19c00117 	ldw	r7,4(r3)
  8009ec:	108b883a 	add	r5,r2,r2
  8009f0:	294b883a 	add	r5,r5,r5
  8009f4:	1005d0ba 	srai	r2,r2,2
  8009f8:	294b883a 	add	r5,r5,r5
  8009fc:	28cb883a 	add	r5,r5,r3
  800a00:	29800217 	ldw	r6,8(r5)
  800a04:	4084983a 	sll	r2,r8,r2
  800a08:	81400315 	stw	r5,12(r16)
  800a0c:	81800215 	stw	r6,8(r16)
  800a10:	11c4b03a 	or	r2,r2,r7
  800a14:	2c000215 	stw	r16,8(r5)
  800a18:	18800115 	stw	r2,4(r3)
  800a1c:	34000315 	stw	r16,12(r6)
  800a20:	2007d0ba 	srai	r3,r4,2
  800a24:	01400044 	movi	r5,1
  800a28:	28ca983a 	sll	r5,r5,r3
  800a2c:	11404936 	bltu	r2,r5,800b54 <_malloc_r+0x328>
  800a30:	1146703a 	and	r3,r2,r5
  800a34:	18000a1e 	bne	r3,zero,800a60 <_malloc_r+0x234>
  800a38:	00ffff04 	movi	r3,-4
  800a3c:	294b883a 	add	r5,r5,r5
  800a40:	20c8703a 	and	r4,r4,r3
  800a44:	1146703a 	and	r3,r2,r5
  800a48:	21000104 	addi	r4,r4,4
  800a4c:	1800041e 	bne	r3,zero,800a60 <_malloc_r+0x234>
  800a50:	294b883a 	add	r5,r5,r5
  800a54:	1146703a 	and	r3,r2,r5
  800a58:	21000104 	addi	r4,r4,4
  800a5c:	183ffc26 	beq	r3,zero,800a50 <__reset+0xff7ffa50>
  800a60:	023fff04 	movi	r8,-4
  800a64:	01c003c4 	movi	r7,15
  800a68:	2105883a 	add	r2,r4,r4
  800a6c:	1085883a 	add	r2,r2,r2
  800a70:	1085883a 	add	r2,r2,r2
  800a74:	9897883a 	add	r11,r19,r2
  800a78:	5a800304 	addi	r10,r11,12
  800a7c:	2019883a 	mov	r12,r4
  800a80:	54000017 	ldw	r16,0(r10)
  800a84:	51bffd04 	addi	r6,r10,-12
  800a88:	8180041e 	bne	r16,r6,800a9c <_malloc_r+0x270>
  800a8c:	0000d406 	br	800de0 <_malloc_r+0x5b4>
  800a90:	1000dd0e 	bge	r2,zero,800e08 <_malloc_r+0x5dc>
  800a94:	84000317 	ldw	r16,12(r16)
  800a98:	8180d126 	beq	r16,r6,800de0 <_malloc_r+0x5b4>
  800a9c:	80c00117 	ldw	r3,4(r16)
  800aa0:	1a06703a 	and	r3,r3,r8
  800aa4:	1c45c83a 	sub	r2,r3,r17
  800aa8:	38bff90e 	bge	r7,r2,800a90 <__reset+0xff7ffa90>
  800aac:	80c00317 	ldw	r3,12(r16)
  800ab0:	81000217 	ldw	r4,8(r16)
  800ab4:	89400054 	ori	r5,r17,1
  800ab8:	81400115 	stw	r5,4(r16)
  800abc:	20c00315 	stw	r3,12(r4)
  800ac0:	19000215 	stw	r4,8(r3)
  800ac4:	8463883a 	add	r17,r16,r17
  800ac8:	9c400515 	stw	r17,20(r19)
  800acc:	9c400415 	stw	r17,16(r19)
  800ad0:	10c00054 	ori	r3,r2,1
  800ad4:	8a400315 	stw	r9,12(r17)
  800ad8:	8a400215 	stw	r9,8(r17)
  800adc:	88c00115 	stw	r3,4(r17)
  800ae0:	88a3883a 	add	r17,r17,r2
  800ae4:	88800015 	stw	r2,0(r17)
  800ae8:	9009883a 	mov	r4,r18
  800aec:	08032880 	call	803288 <__malloc_unlock>
  800af0:	80800204 	addi	r2,r16,8
  800af4:	003f7b06 	br	8008e4 <__reset+0xff7ff8e4>
  800af8:	01401f84 	movi	r5,126
  800afc:	01000fc4 	movi	r4,63
  800b00:	003f9106 	br	800948 <__reset+0xff7ff948>
  800b04:	80800317 	ldw	r2,12(r16)
  800b08:	81000217 	ldw	r4,8(r16)
  800b0c:	80c7883a 	add	r3,r16,r3
  800b10:	19400117 	ldw	r5,4(r3)
  800b14:	20800315 	stw	r2,12(r4)
  800b18:	11000215 	stw	r4,8(r2)
  800b1c:	28800054 	ori	r2,r5,1
  800b20:	18800115 	stw	r2,4(r3)
  800b24:	9009883a 	mov	r4,r18
  800b28:	08032880 	call	803288 <__malloc_unlock>
  800b2c:	80800204 	addi	r2,r16,8
  800b30:	003f6c06 	br	8008e4 <__reset+0xff7ff8e4>
  800b34:	8085883a 	add	r2,r16,r2
  800b38:	10c00117 	ldw	r3,4(r2)
  800b3c:	9009883a 	mov	r4,r18
  800b40:	18c00054 	ori	r3,r3,1
  800b44:	10c00115 	stw	r3,4(r2)
  800b48:	08032880 	call	803288 <__malloc_unlock>
  800b4c:	80800204 	addi	r2,r16,8
  800b50:	003f6406 	br	8008e4 <__reset+0xff7ff8e4>
  800b54:	9c000217 	ldw	r16,8(r19)
  800b58:	00bfff04 	movi	r2,-4
  800b5c:	85400117 	ldw	r21,4(r16)
  800b60:	a8aa703a 	and	r21,r21,r2
  800b64:	ac400336 	bltu	r21,r17,800b74 <_malloc_r+0x348>
  800b68:	ac45c83a 	sub	r2,r21,r17
  800b6c:	00c003c4 	movi	r3,15
  800b70:	18805d16 	blt	r3,r2,800ce8 <_malloc_r+0x4bc>
  800b74:	00802074 	movhi	r2,129
  800b78:	10a08304 	addi	r2,r2,-32244
  800b7c:	00c02074 	movhi	r3,129
  800b80:	18e07304 	addi	r3,r3,-32308
  800b84:	15c00017 	ldw	r23,0(r2)
  800b88:	19000017 	ldw	r4,0(r3)
  800b8c:	00bfffc4 	movi	r2,-1
  800b90:	8579883a 	add	fp,r16,r21
  800b94:	8def883a 	add	r23,r17,r23
  800b98:	2080e426 	beq	r4,r2,800f2c <_malloc_r+0x700>
  800b9c:	bdc403c4 	addi	r23,r23,4111
  800ba0:	00bc0004 	movi	r2,-4096
  800ba4:	b8ae703a 	and	r23,r23,r2
  800ba8:	9009883a 	mov	r4,r18
  800bac:	b80b883a 	mov	r5,r23
  800bb0:	d8c00015 	stw	r3,0(sp)
  800bb4:	08018840 	call	801884 <_sbrk_r>
  800bb8:	1029883a 	mov	r20,r2
  800bbc:	00bfffc4 	movi	r2,-1
  800bc0:	d8c00017 	ldw	r3,0(sp)
  800bc4:	a080a426 	beq	r20,r2,800e58 <_malloc_r+0x62c>
  800bc8:	a700a236 	bltu	r20,fp,800e54 <_malloc_r+0x628>
  800bcc:	05802074 	movhi	r22,129
  800bd0:	b5a08b04 	addi	r22,r22,-32212
  800bd4:	b0800017 	ldw	r2,0(r22)
  800bd8:	b885883a 	add	r2,r23,r2
  800bdc:	b0800015 	stw	r2,0(r22)
  800be0:	e500da26 	beq	fp,r20,800f4c <_malloc_r+0x720>
  800be4:	19000017 	ldw	r4,0(r3)
  800be8:	00ffffc4 	movi	r3,-1
  800bec:	20c0e426 	beq	r4,r3,800f80 <_malloc_r+0x754>
  800bf0:	a739c83a 	sub	fp,r20,fp
  800bf4:	1705883a 	add	r2,r2,fp
  800bf8:	b0800015 	stw	r2,0(r22)
  800bfc:	a08001cc 	andi	r2,r20,7
  800c00:	1000b526 	beq	r2,zero,800ed8 <_malloc_r+0x6ac>
  800c04:	a0a9c83a 	sub	r20,r20,r2
  800c08:	00c40204 	movi	r3,4104
  800c0c:	a5000204 	addi	r20,r20,8
  800c10:	1885c83a 	sub	r2,r3,r2
  800c14:	a5c7883a 	add	r3,r20,r23
  800c18:	18c3ffcc 	andi	r3,r3,4095
  800c1c:	10efc83a 	sub	r23,r2,r3
  800c20:	9009883a 	mov	r4,r18
  800c24:	b80b883a 	mov	r5,r23
  800c28:	08018840 	call	801884 <_sbrk_r>
  800c2c:	00ffffc4 	movi	r3,-1
  800c30:	10c0d026 	beq	r2,r3,800f74 <_malloc_r+0x748>
  800c34:	1505c83a 	sub	r2,r2,r20
  800c38:	b887883a 	add	r3,r23,r2
  800c3c:	18c00054 	ori	r3,r3,1
  800c40:	b0800017 	ldw	r2,0(r22)
  800c44:	9d000215 	stw	r20,8(r19)
  800c48:	a0c00115 	stw	r3,4(r20)
  800c4c:	b885883a 	add	r2,r23,r2
  800c50:	b0800015 	stw	r2,0(r22)
  800c54:	84c00e26 	beq	r16,r19,800c90 <_malloc_r+0x464>
  800c58:	00c003c4 	movi	r3,15
  800c5c:	1d40a02e 	bgeu	r3,r21,800ee0 <_malloc_r+0x6b4>
  800c60:	81400117 	ldw	r5,4(r16)
  800c64:	ad7ffd04 	addi	r21,r21,-12
  800c68:	013ffe04 	movi	r4,-8
  800c6c:	a908703a 	and	r4,r21,r4
  800c70:	2940004c 	andi	r5,r5,1
  800c74:	214ab03a 	or	r5,r4,r5
  800c78:	81400115 	stw	r5,4(r16)
  800c7c:	01800144 	movi	r6,5
  800c80:	810b883a 	add	r5,r16,r4
  800c84:	29800115 	stw	r6,4(r5)
  800c88:	29800215 	stw	r6,8(r5)
  800c8c:	1900c036 	bltu	r3,r4,800f90 <_malloc_r+0x764>
  800c90:	00c02074 	movhi	r3,129
  800c94:	18e08204 	addi	r3,r3,-32248
  800c98:	19000017 	ldw	r4,0(r3)
  800c9c:	2080012e 	bgeu	r4,r2,800ca4 <_malloc_r+0x478>
  800ca0:	18800015 	stw	r2,0(r3)
  800ca4:	00c02074 	movhi	r3,129
  800ca8:	18e08104 	addi	r3,r3,-32252
  800cac:	19000017 	ldw	r4,0(r3)
  800cb0:	9c000217 	ldw	r16,8(r19)
  800cb4:	2080012e 	bgeu	r4,r2,800cbc <_malloc_r+0x490>
  800cb8:	18800015 	stw	r2,0(r3)
  800cbc:	80c00117 	ldw	r3,4(r16)
  800cc0:	00bfff04 	movi	r2,-4
  800cc4:	1886703a 	and	r3,r3,r2
  800cc8:	1c45c83a 	sub	r2,r3,r17
  800ccc:	1c400236 	bltu	r3,r17,800cd8 <_malloc_r+0x4ac>
  800cd0:	00c003c4 	movi	r3,15
  800cd4:	18800416 	blt	r3,r2,800ce8 <_malloc_r+0x4bc>
  800cd8:	9009883a 	mov	r4,r18
  800cdc:	08032880 	call	803288 <__malloc_unlock>
  800ce0:	0005883a 	mov	r2,zero
  800ce4:	003eff06 	br	8008e4 <__reset+0xff7ff8e4>
  800ce8:	88c00054 	ori	r3,r17,1
  800cec:	80c00115 	stw	r3,4(r16)
  800cf0:	8463883a 	add	r17,r16,r17
  800cf4:	10800054 	ori	r2,r2,1
  800cf8:	9c400215 	stw	r17,8(r19)
  800cfc:	88800115 	stw	r2,4(r17)
  800d00:	9009883a 	mov	r4,r18
  800d04:	08032880 	call	803288 <__malloc_unlock>
  800d08:	80800204 	addi	r2,r16,8
  800d0c:	003ef506 	br	8008e4 <__reset+0xff7ff8e4>
  800d10:	00800504 	movi	r2,20
  800d14:	1100482e 	bgeu	r2,r4,800e38 <_malloc_r+0x60c>
  800d18:	00801504 	movi	r2,84
  800d1c:	11006836 	bltu	r2,r4,800ec0 <_malloc_r+0x694>
  800d20:	8808d33a 	srli	r4,r17,12
  800d24:	21001b84 	addi	r4,r4,110
  800d28:	210b883a 	add	r5,r4,r4
  800d2c:	003f0606 	br	800948 <__reset+0xff7ff948>
  800d30:	1006d27a 	srli	r3,r2,9
  800d34:	01400104 	movi	r5,4
  800d38:	28c0422e 	bgeu	r5,r3,800e44 <_malloc_r+0x618>
  800d3c:	01400504 	movi	r5,20
  800d40:	28c07c36 	bltu	r5,r3,800f34 <_malloc_r+0x708>
  800d44:	194016c4 	addi	r5,r3,91
  800d48:	294d883a 	add	r6,r5,r5
  800d4c:	318d883a 	add	r6,r6,r6
  800d50:	318d883a 	add	r6,r6,r6
  800d54:	998d883a 	add	r6,r19,r6
  800d58:	30c00217 	ldw	r3,8(r6)
  800d5c:	01c02034 	movhi	r7,128
  800d60:	39dabb04 	addi	r7,r7,27372
  800d64:	19806326 	beq	r3,r6,800ef4 <_malloc_r+0x6c8>
  800d68:	01ffff04 	movi	r7,-4
  800d6c:	19400117 	ldw	r5,4(r3)
  800d70:	29ca703a 	and	r5,r5,r7
  800d74:	1140022e 	bgeu	r2,r5,800d80 <_malloc_r+0x554>
  800d78:	18c00217 	ldw	r3,8(r3)
  800d7c:	30fffb1e 	bne	r6,r3,800d6c <__reset+0xff7ffd6c>
  800d80:	19400317 	ldw	r5,12(r3)
  800d84:	98800117 	ldw	r2,4(r19)
  800d88:	81400315 	stw	r5,12(r16)
  800d8c:	80c00215 	stw	r3,8(r16)
  800d90:	2c000215 	stw	r16,8(r5)
  800d94:	1c000315 	stw	r16,12(r3)
  800d98:	003f2106 	br	800a20 <__reset+0xff7ffa20>
  800d9c:	88800054 	ori	r2,r17,1
  800da0:	80800115 	stw	r2,4(r16)
  800da4:	8463883a 	add	r17,r16,r17
  800da8:	1c400515 	stw	r17,20(r3)
  800dac:	1c400415 	stw	r17,16(r3)
  800db0:	28800054 	ori	r2,r5,1
  800db4:	88800115 	stw	r2,4(r17)
  800db8:	8a400315 	stw	r9,12(r17)
  800dbc:	8a400215 	stw	r9,8(r17)
  800dc0:	8963883a 	add	r17,r17,r5
  800dc4:	89400015 	stw	r5,0(r17)
  800dc8:	9009883a 	mov	r4,r18
  800dcc:	08032880 	call	803288 <__malloc_unlock>
  800dd0:	80800204 	addi	r2,r16,8
  800dd4:	003ec306 	br	8008e4 <__reset+0xff7ff8e4>
  800dd8:	18800117 	ldw	r2,4(r3)
  800ddc:	003f1006 	br	800a20 <__reset+0xff7ffa20>
  800de0:	63000044 	addi	r12,r12,1
  800de4:	608000cc 	andi	r2,r12,3
  800de8:	52800204 	addi	r10,r10,8
  800dec:	103f241e 	bne	r2,zero,800a80 <__reset+0xff7ffa80>
  800df0:	00002106 	br	800e78 <_malloc_r+0x64c>
  800df4:	80800204 	addi	r2,r16,8
  800df8:	84000517 	ldw	r16,20(r16)
  800dfc:	143eab1e 	bne	r2,r16,8008ac <__reset+0xff7ff8ac>
  800e00:	21000084 	addi	r4,r4,2
  800e04:	003ee606 	br	8009a0 <__reset+0xff7ff9a0>
  800e08:	80c7883a 	add	r3,r16,r3
  800e0c:	19400117 	ldw	r5,4(r3)
  800e10:	80800317 	ldw	r2,12(r16)
  800e14:	81000217 	ldw	r4,8(r16)
  800e18:	29400054 	ori	r5,r5,1
  800e1c:	19400115 	stw	r5,4(r3)
  800e20:	20800315 	stw	r2,12(r4)
  800e24:	11000215 	stw	r4,8(r2)
  800e28:	9009883a 	mov	r4,r18
  800e2c:	08032880 	call	803288 <__malloc_unlock>
  800e30:	80800204 	addi	r2,r16,8
  800e34:	003eab06 	br	8008e4 <__reset+0xff7ff8e4>
  800e38:	210016c4 	addi	r4,r4,91
  800e3c:	210b883a 	add	r5,r4,r4
  800e40:	003ec106 	br	800948 <__reset+0xff7ff948>
  800e44:	100ad1ba 	srli	r5,r2,6
  800e48:	29400e04 	addi	r5,r5,56
  800e4c:	294d883a 	add	r6,r5,r5
  800e50:	003fbe06 	br	800d4c <__reset+0xff7ffd4c>
  800e54:	84ff5d26 	beq	r16,r19,800bcc <__reset+0xff7ffbcc>
  800e58:	9c000217 	ldw	r16,8(r19)
  800e5c:	00bfff04 	movi	r2,-4
  800e60:	80c00117 	ldw	r3,4(r16)
  800e64:	1886703a 	and	r3,r3,r2
  800e68:	003f9706 	br	800cc8 <__reset+0xff7ffcc8>
  800e6c:	5ac00017 	ldw	r11,0(r11)
  800e70:	213fffc4 	addi	r4,r4,-1
  800e74:	58805c1e 	bne	r11,r2,800fe8 <_malloc_r+0x7bc>
  800e78:	20c000cc 	andi	r3,r4,3
  800e7c:	58bffe04 	addi	r2,r11,-8
  800e80:	183ffa1e 	bne	r3,zero,800e6c <__reset+0xff7ffe6c>
  800e84:	98800117 	ldw	r2,4(r19)
  800e88:	0146303a 	nor	r3,zero,r5
  800e8c:	1884703a 	and	r2,r3,r2
  800e90:	98800115 	stw	r2,4(r19)
  800e94:	294b883a 	add	r5,r5,r5
  800e98:	117f2e36 	bltu	r2,r5,800b54 <__reset+0xff7ffb54>
  800e9c:	283f2d26 	beq	r5,zero,800b54 <__reset+0xff7ffb54>
  800ea0:	1146703a 	and	r3,r2,r5
  800ea4:	6009883a 	mov	r4,r12
  800ea8:	183eef1e 	bne	r3,zero,800a68 <__reset+0xff7ffa68>
  800eac:	294b883a 	add	r5,r5,r5
  800eb0:	1146703a 	and	r3,r2,r5
  800eb4:	21000104 	addi	r4,r4,4
  800eb8:	183ffc26 	beq	r3,zero,800eac <__reset+0xff7ffeac>
  800ebc:	003eea06 	br	800a68 <__reset+0xff7ffa68>
  800ec0:	00805504 	movi	r2,340
  800ec4:	11001336 	bltu	r2,r4,800f14 <_malloc_r+0x6e8>
  800ec8:	8808d3fa 	srli	r4,r17,15
  800ecc:	21001dc4 	addi	r4,r4,119
  800ed0:	210b883a 	add	r5,r4,r4
  800ed4:	003e9c06 	br	800948 <__reset+0xff7ff948>
  800ed8:	00840004 	movi	r2,4096
  800edc:	003f4d06 	br	800c14 <__reset+0xff7ffc14>
  800ee0:	00800044 	movi	r2,1
  800ee4:	a0800115 	stw	r2,4(r20)
  800ee8:	a021883a 	mov	r16,r20
  800eec:	0007883a 	mov	r3,zero
  800ef0:	003f7506 	br	800cc8 <__reset+0xff7ffcc8>
  800ef4:	280bd0ba 	srai	r5,r5,2
  800ef8:	01800044 	movi	r6,1
  800efc:	38800117 	ldw	r2,4(r7)
  800f00:	314c983a 	sll	r6,r6,r5
  800f04:	180b883a 	mov	r5,r3
  800f08:	3084b03a 	or	r2,r6,r2
  800f0c:	38800115 	stw	r2,4(r7)
  800f10:	003f9d06 	br	800d88 <__reset+0xff7ffd88>
  800f14:	00815504 	movi	r2,1364
  800f18:	11001336 	bltu	r2,r4,800f68 <_malloc_r+0x73c>
  800f1c:	8808d4ba 	srli	r4,r17,18
  800f20:	21001f04 	addi	r4,r4,124
  800f24:	210b883a 	add	r5,r4,r4
  800f28:	003e8706 	br	800948 <__reset+0xff7ff948>
  800f2c:	bdc00404 	addi	r23,r23,16
  800f30:	003f1d06 	br	800ba8 <__reset+0xff7ffba8>
  800f34:	01401504 	movi	r5,84
  800f38:	28c01c36 	bltu	r5,r3,800fac <_malloc_r+0x780>
  800f3c:	100ad33a 	srli	r5,r2,12
  800f40:	29401b84 	addi	r5,r5,110
  800f44:	294d883a 	add	r6,r5,r5
  800f48:	003f8006 	br	800d4c <__reset+0xff7ffd4c>
  800f4c:	e103ffcc 	andi	r4,fp,4095
  800f50:	203f241e 	bne	r4,zero,800be4 <__reset+0xff7ffbe4>
  800f54:	98c00217 	ldw	r3,8(r19)
  800f58:	bd49883a 	add	r4,r23,r21
  800f5c:	21000054 	ori	r4,r4,1
  800f60:	19000115 	stw	r4,4(r3)
  800f64:	003f4a06 	br	800c90 <__reset+0xff7ffc90>
  800f68:	01403f04 	movi	r5,252
  800f6c:	01001f84 	movi	r4,126
  800f70:	003e7506 	br	800948 <__reset+0xff7ff948>
  800f74:	00c00044 	movi	r3,1
  800f78:	002f883a 	mov	r23,zero
  800f7c:	003f3006 	br	800c40 <__reset+0xff7ffc40>
  800f80:	00802074 	movhi	r2,129
  800f84:	10a07304 	addi	r2,r2,-32308
  800f88:	15000015 	stw	r20,0(r2)
  800f8c:	003f1b06 	br	800bfc <__reset+0xff7ffbfc>
  800f90:	9009883a 	mov	r4,r18
  800f94:	81400204 	addi	r5,r16,8
  800f98:	08021740 	call	802174 <_free_r>
  800f9c:	00802074 	movhi	r2,129
  800fa0:	10a08b04 	addi	r2,r2,-32212
  800fa4:	10800017 	ldw	r2,0(r2)
  800fa8:	003f3906 	br	800c90 <__reset+0xff7ffc90>
  800fac:	01405504 	movi	r5,340
  800fb0:	28c00436 	bltu	r5,r3,800fc4 <_malloc_r+0x798>
  800fb4:	100ad3fa 	srli	r5,r2,15
  800fb8:	29401dc4 	addi	r5,r5,119
  800fbc:	294d883a 	add	r6,r5,r5
  800fc0:	003f6206 	br	800d4c <__reset+0xff7ffd4c>
  800fc4:	01415504 	movi	r5,1364
  800fc8:	28c00436 	bltu	r5,r3,800fdc <_malloc_r+0x7b0>
  800fcc:	100ad4ba 	srli	r5,r2,18
  800fd0:	29401f04 	addi	r5,r5,124
  800fd4:	294d883a 	add	r6,r5,r5
  800fd8:	003f5c06 	br	800d4c <__reset+0xff7ffd4c>
  800fdc:	01803f04 	movi	r6,252
  800fe0:	01401f84 	movi	r5,126
  800fe4:	003f5906 	br	800d4c <__reset+0xff7ffd4c>
  800fe8:	98800117 	ldw	r2,4(r19)
  800fec:	003fa906 	br	800e94 <__reset+0xff7ffe94>

00800ff0 <memchr>:
  800ff0:	208000cc 	andi	r2,r4,3
  800ff4:	2811883a 	mov	r8,r5
  800ff8:	10003526 	beq	r2,zero,8010d0 <memchr+0xe0>
  800ffc:	30bfffc4 	addi	r2,r6,-1
  801000:	30001b26 	beq	r6,zero,801070 <memchr+0x80>
  801004:	21800003 	ldbu	r6,0(r4)
  801008:	28c03fcc 	andi	r3,r5,255
  80100c:	30c01a26 	beq	r6,r3,801078 <memchr+0x88>
  801010:	180d883a 	mov	r6,r3
  801014:	00000406 	br	801028 <memchr+0x38>
  801018:	10001526 	beq	r2,zero,801070 <memchr+0x80>
  80101c:	20c00003 	ldbu	r3,0(r4)
  801020:	10bfffc4 	addi	r2,r2,-1
  801024:	19801426 	beq	r3,r6,801078 <memchr+0x88>
  801028:	21000044 	addi	r4,r4,1
  80102c:	20c000cc 	andi	r3,r4,3
  801030:	183ff91e 	bne	r3,zero,801018 <__reset+0xff800018>
  801034:	02c000c4 	movi	r11,3
  801038:	58801136 	bltu	r11,r2,801080 <memchr+0x90>
  80103c:	10000c26 	beq	r2,zero,801070 <memchr+0x80>
  801040:	20c00003 	ldbu	r3,0(r4)
  801044:	29403fcc 	andi	r5,r5,255
  801048:	19400b26 	beq	r3,r5,801078 <memchr+0x88>
  80104c:	20c00044 	addi	r3,r4,1
  801050:	2085883a 	add	r2,r4,r2
  801054:	41803fcc 	andi	r6,r8,255
  801058:	00000306 	br	801068 <memchr+0x78>
  80105c:	18c00044 	addi	r3,r3,1
  801060:	197fffc3 	ldbu	r5,-1(r3)
  801064:	29800426 	beq	r5,r6,801078 <memchr+0x88>
  801068:	1809883a 	mov	r4,r3
  80106c:	18bffb1e 	bne	r3,r2,80105c <__reset+0xff80005c>
  801070:	0005883a 	mov	r2,zero
  801074:	f800283a 	ret
  801078:	2005883a 	mov	r2,r4
  80107c:	f800283a 	ret
  801080:	28c03fcc 	andi	r3,r5,255
  801084:	180c923a 	slli	r6,r3,8
  801088:	02bfbff4 	movhi	r10,65279
  80108c:	52bfbfc4 	addi	r10,r10,-257
  801090:	02602074 	movhi	r9,32897
  801094:	4a602004 	addi	r9,r9,-32640
  801098:	30c6b03a 	or	r3,r6,r3
  80109c:	180c943a 	slli	r6,r3,16
  8010a0:	30ccb03a 	or	r6,r6,r3
  8010a4:	20c00017 	ldw	r3,0(r4)
  8010a8:	30c6f03a 	xor	r3,r6,r3
  8010ac:	1a8f883a 	add	r7,r3,r10
  8010b0:	00c6303a 	nor	r3,zero,r3
  8010b4:	38c6703a 	and	r3,r7,r3
  8010b8:	1a46703a 	and	r3,r3,r9
  8010bc:	183fdf1e 	bne	r3,zero,80103c <__reset+0xff80003c>
  8010c0:	10bfff04 	addi	r2,r2,-4
  8010c4:	21000104 	addi	r4,r4,4
  8010c8:	58bff636 	bltu	r11,r2,8010a4 <__reset+0xff8000a4>
  8010cc:	003fdb06 	br	80103c <__reset+0xff80003c>
  8010d0:	3005883a 	mov	r2,r6
  8010d4:	003fd706 	br	801034 <__reset+0xff800034>

008010d8 <memcpy>:
  8010d8:	00c003c4 	movi	r3,15
  8010dc:	2005883a 	mov	r2,r4
  8010e0:	1980372e 	bgeu	r3,r6,8011c0 <memcpy+0xe8>
  8010e4:	2146b03a 	or	r3,r4,r5
  8010e8:	18c000cc 	andi	r3,r3,3
  8010ec:	1800371e 	bne	r3,zero,8011cc <memcpy+0xf4>
  8010f0:	327ffc04 	addi	r9,r6,-16
  8010f4:	4812d13a 	srli	r9,r9,4
  8010f8:	2007883a 	mov	r3,r4
  8010fc:	280f883a 	mov	r7,r5
  801100:	4808913a 	slli	r4,r9,4
  801104:	1109883a 	add	r4,r2,r4
  801108:	21000404 	addi	r4,r4,16
  80110c:	3a000017 	ldw	r8,0(r7)
  801110:	18c00404 	addi	r3,r3,16
  801114:	39c00404 	addi	r7,r7,16
  801118:	1a3ffc15 	stw	r8,-16(r3)
  80111c:	3a3ffd17 	ldw	r8,-12(r7)
  801120:	1a3ffd15 	stw	r8,-12(r3)
  801124:	3a3ffe17 	ldw	r8,-8(r7)
  801128:	1a3ffe15 	stw	r8,-8(r3)
  80112c:	3a3fff17 	ldw	r8,-4(r7)
  801130:	1a3fff15 	stw	r8,-4(r3)
  801134:	193ff51e 	bne	r3,r4,80110c <__reset+0xff80010c>
  801138:	49000044 	addi	r4,r9,1
  80113c:	2008913a 	slli	r4,r4,4
  801140:	328003cc 	andi	r10,r6,15
  801144:	1107883a 	add	r3,r2,r4
  801148:	290b883a 	add	r5,r5,r4
  80114c:	010000c4 	movi	r4,3
  801150:	2280212e 	bgeu	r4,r10,8011d8 <memcpy+0x100>
  801154:	52bfff04 	addi	r10,r10,-4
  801158:	5014d0ba 	srli	r10,r10,2
  80115c:	180f883a 	mov	r7,r3
  801160:	2811883a 	mov	r8,r5
  801164:	5289883a 	add	r4,r10,r10
  801168:	2109883a 	add	r4,r4,r4
  80116c:	21000104 	addi	r4,r4,4
  801170:	1909883a 	add	r4,r3,r4
  801174:	42400017 	ldw	r9,0(r8)
  801178:	39c00104 	addi	r7,r7,4
  80117c:	42000104 	addi	r8,r8,4
  801180:	3a7fff15 	stw	r9,-4(r7)
  801184:	393ffb1e 	bne	r7,r4,801174 <__reset+0xff800174>
  801188:	51000044 	addi	r4,r10,1
  80118c:	2109883a 	add	r4,r4,r4
  801190:	2109883a 	add	r4,r4,r4
  801194:	318000cc 	andi	r6,r6,3
  801198:	1907883a 	add	r3,r3,r4
  80119c:	290b883a 	add	r5,r5,r4
  8011a0:	30000c26 	beq	r6,zero,8011d4 <memcpy+0xfc>
  8011a4:	298d883a 	add	r6,r5,r6
  8011a8:	29c00003 	ldbu	r7,0(r5)
  8011ac:	18c00044 	addi	r3,r3,1
  8011b0:	29400044 	addi	r5,r5,1
  8011b4:	19ffffc5 	stb	r7,-1(r3)
  8011b8:	29bffb1e 	bne	r5,r6,8011a8 <__reset+0xff8001a8>
  8011bc:	f800283a 	ret
  8011c0:	2007883a 	mov	r3,r4
  8011c4:	303ff71e 	bne	r6,zero,8011a4 <__reset+0xff8001a4>
  8011c8:	00000206 	br	8011d4 <memcpy+0xfc>
  8011cc:	2007883a 	mov	r3,r4
  8011d0:	003ff406 	br	8011a4 <__reset+0xff8001a4>
  8011d4:	f800283a 	ret
  8011d8:	500d883a 	mov	r6,r10
  8011dc:	303ff11e 	bne	r6,zero,8011a4 <__reset+0xff8001a4>
  8011e0:	003ffc06 	br	8011d4 <__reset+0xff8001d4>

008011e4 <memmove>:
  8011e4:	2005883a 	mov	r2,r4
  8011e8:	29000b2e 	bgeu	r5,r4,801218 <memmove+0x34>
  8011ec:	298f883a 	add	r7,r5,r6
  8011f0:	21c0092e 	bgeu	r4,r7,801218 <memmove+0x34>
  8011f4:	2187883a 	add	r3,r4,r6
  8011f8:	198bc83a 	sub	r5,r3,r6
  8011fc:	30003e26 	beq	r6,zero,8012f8 <memmove+0x114>
  801200:	39ffffc4 	addi	r7,r7,-1
  801204:	39000003 	ldbu	r4,0(r7)
  801208:	18ffffc4 	addi	r3,r3,-1
  80120c:	19000005 	stb	r4,0(r3)
  801210:	197ffb1e 	bne	r3,r5,801200 <__reset+0xff800200>
  801214:	f800283a 	ret
  801218:	00c003c4 	movi	r3,15
  80121c:	1980372e 	bgeu	r3,r6,8012fc <memmove+0x118>
  801220:	1146b03a 	or	r3,r2,r5
  801224:	18c000cc 	andi	r3,r3,3
  801228:	1800371e 	bne	r3,zero,801308 <memmove+0x124>
  80122c:	327ffc04 	addi	r9,r6,-16
  801230:	4812d13a 	srli	r9,r9,4
  801234:	280f883a 	mov	r7,r5
  801238:	1007883a 	mov	r3,r2
  80123c:	4810913a 	slli	r8,r9,4
  801240:	1211883a 	add	r8,r2,r8
  801244:	42000404 	addi	r8,r8,16
  801248:	39000017 	ldw	r4,0(r7)
  80124c:	18c00404 	addi	r3,r3,16
  801250:	39c00404 	addi	r7,r7,16
  801254:	193ffc15 	stw	r4,-16(r3)
  801258:	393ffd17 	ldw	r4,-12(r7)
  80125c:	193ffd15 	stw	r4,-12(r3)
  801260:	393ffe17 	ldw	r4,-8(r7)
  801264:	193ffe15 	stw	r4,-8(r3)
  801268:	393fff17 	ldw	r4,-4(r7)
  80126c:	193fff15 	stw	r4,-4(r3)
  801270:	1a3ff51e 	bne	r3,r8,801248 <__reset+0xff800248>
  801274:	49000044 	addi	r4,r9,1
  801278:	2008913a 	slli	r4,r4,4
  80127c:	328003cc 	andi	r10,r6,15
  801280:	1107883a 	add	r3,r2,r4
  801284:	290b883a 	add	r5,r5,r4
  801288:	010000c4 	movi	r4,3
  80128c:	2280212e 	bgeu	r4,r10,801314 <memmove+0x130>
  801290:	52bfff04 	addi	r10,r10,-4
  801294:	5014d0ba 	srli	r10,r10,2
  801298:	180f883a 	mov	r7,r3
  80129c:	2809883a 	mov	r4,r5
  8012a0:	5291883a 	add	r8,r10,r10
  8012a4:	4211883a 	add	r8,r8,r8
  8012a8:	42400104 	addi	r9,r8,4
  8012ac:	1a53883a 	add	r9,r3,r9
  8012b0:	22000017 	ldw	r8,0(r4)
  8012b4:	39c00104 	addi	r7,r7,4
  8012b8:	21000104 	addi	r4,r4,4
  8012bc:	3a3fff15 	stw	r8,-4(r7)
  8012c0:	3a7ffb1e 	bne	r7,r9,8012b0 <__reset+0xff8002b0>
  8012c4:	51000044 	addi	r4,r10,1
  8012c8:	2109883a 	add	r4,r4,r4
  8012cc:	2109883a 	add	r4,r4,r4
  8012d0:	318000cc 	andi	r6,r6,3
  8012d4:	1907883a 	add	r3,r3,r4
  8012d8:	290b883a 	add	r5,r5,r4
  8012dc:	30000c26 	beq	r6,zero,801310 <memmove+0x12c>
  8012e0:	198d883a 	add	r6,r3,r6
  8012e4:	29c00003 	ldbu	r7,0(r5)
  8012e8:	18c00044 	addi	r3,r3,1
  8012ec:	29400044 	addi	r5,r5,1
  8012f0:	19ffffc5 	stb	r7,-1(r3)
  8012f4:	19bffb1e 	bne	r3,r6,8012e4 <__reset+0xff8002e4>
  8012f8:	f800283a 	ret
  8012fc:	1007883a 	mov	r3,r2
  801300:	303ff71e 	bne	r6,zero,8012e0 <__reset+0xff8002e0>
  801304:	00000206 	br	801310 <memmove+0x12c>
  801308:	1007883a 	mov	r3,r2
  80130c:	003ff406 	br	8012e0 <__reset+0xff8002e0>
  801310:	f800283a 	ret
  801314:	500d883a 	mov	r6,r10
  801318:	303ff11e 	bne	r6,zero,8012e0 <__reset+0xff8002e0>
  80131c:	003ffc06 	br	801310 <__reset+0xff800310>

00801320 <_realloc_r>:
  801320:	defff604 	addi	sp,sp,-40
  801324:	dd000415 	stw	r20,16(sp)
  801328:	dc000015 	stw	r16,0(sp)
  80132c:	dfc00915 	stw	ra,36(sp)
  801330:	df000815 	stw	fp,32(sp)
  801334:	ddc00715 	stw	r23,28(sp)
  801338:	dd800615 	stw	r22,24(sp)
  80133c:	dd400515 	stw	r21,20(sp)
  801340:	dcc00315 	stw	r19,12(sp)
  801344:	dc800215 	stw	r18,8(sp)
  801348:	dc400115 	stw	r17,4(sp)
  80134c:	2821883a 	mov	r16,r5
  801350:	3029883a 	mov	r20,r6
  801354:	28009a26 	beq	r5,zero,8015c0 <_realloc_r+0x2a0>
  801358:	202b883a 	mov	r21,r4
  80135c:	08032680 	call	803268 <__malloc_lock>
  801360:	80ffff17 	ldw	r3,-4(r16)
  801364:	047fff04 	movi	r17,-4
  801368:	a08002c4 	addi	r2,r20,11
  80136c:	01000584 	movi	r4,22
  801370:	84fffe04 	addi	r19,r16,-8
  801374:	1c62703a 	and	r17,r3,r17
  801378:	2080372e 	bgeu	r4,r2,801458 <_realloc_r+0x138>
  80137c:	04bffe04 	movi	r18,-8
  801380:	14a4703a 	and	r18,r2,r18
  801384:	9005883a 	mov	r2,r18
  801388:	90005b16 	blt	r18,zero,8014f8 <_realloc_r+0x1d8>
  80138c:	95005a36 	bltu	r18,r20,8014f8 <_realloc_r+0x1d8>
  801390:	8880340e 	bge	r17,r2,801464 <_realloc_r+0x144>
  801394:	05c02034 	movhi	r23,128
  801398:	bddabb04 	addi	r23,r23,27372
  80139c:	b9000217 	ldw	r4,8(r23)
  8013a0:	9c4b883a 	add	r5,r19,r17
  8013a4:	21409626 	beq	r4,r5,801600 <_realloc_r+0x2e0>
  8013a8:	29800117 	ldw	r6,4(r5)
  8013ac:	01ffff84 	movi	r7,-2
  8013b0:	31ce703a 	and	r7,r6,r7
  8013b4:	29cf883a 	add	r7,r5,r7
  8013b8:	39c00117 	ldw	r7,4(r7)
  8013bc:	39c0004c 	andi	r7,r7,1
  8013c0:	38004226 	beq	r7,zero,8014cc <_realloc_r+0x1ac>
  8013c4:	000d883a 	mov	r6,zero
  8013c8:	000b883a 	mov	r5,zero
  8013cc:	18c0004c 	andi	r3,r3,1
  8013d0:	18005c1e 	bne	r3,zero,801544 <_realloc_r+0x224>
  8013d4:	85bffe17 	ldw	r22,-8(r16)
  8013d8:	00ffff04 	movi	r3,-4
  8013dc:	9dadc83a 	sub	r22,r19,r22
  8013e0:	b1c00117 	ldw	r7,4(r22)
  8013e4:	38c6703a 	and	r3,r7,r3
  8013e8:	28005426 	beq	r5,zero,80153c <_realloc_r+0x21c>
  8013ec:	1c47883a 	add	r3,r3,r17
  8013f0:	2900bf26 	beq	r5,r4,8016f0 <_realloc_r+0x3d0>
  8013f4:	30ef883a 	add	r23,r6,r3
  8013f8:	b8807e16 	blt	r23,r2,8015f4 <_realloc_r+0x2d4>
  8013fc:	28800317 	ldw	r2,12(r5)
  801400:	28c00217 	ldw	r3,8(r5)
  801404:	89bfff04 	addi	r6,r17,-4
  801408:	01000904 	movi	r4,36
  80140c:	18800315 	stw	r2,12(r3)
  801410:	10c00215 	stw	r3,8(r2)
  801414:	b1400217 	ldw	r5,8(r22)
  801418:	b0c00317 	ldw	r3,12(r22)
  80141c:	b5000204 	addi	r20,r22,8
  801420:	28c00315 	stw	r3,12(r5)
  801424:	19400215 	stw	r5,8(r3)
  801428:	21808536 	bltu	r4,r6,801640 <_realloc_r+0x320>
  80142c:	008004c4 	movi	r2,19
  801430:	1180932e 	bgeu	r2,r6,801680 <_realloc_r+0x360>
  801434:	80800017 	ldw	r2,0(r16)
  801438:	b0800215 	stw	r2,8(r22)
  80143c:	80800117 	ldw	r2,4(r16)
  801440:	b0800315 	stw	r2,12(r22)
  801444:	008006c4 	movi	r2,27
  801448:	1180df36 	bltu	r2,r6,8017c8 <_realloc_r+0x4a8>
  80144c:	b0c00404 	addi	r3,r22,16
  801450:	84000204 	addi	r16,r16,8
  801454:	00008b06 	br	801684 <_realloc_r+0x364>
  801458:	00800404 	movi	r2,16
  80145c:	1025883a 	mov	r18,r2
  801460:	003fca06 	br	80138c <__reset+0xff80038c>
  801464:	8029883a 	mov	r20,r16
  801468:	8c8dc83a 	sub	r6,r17,r18
  80146c:	008003c4 	movi	r2,15
  801470:	18c0004c 	andi	r3,r3,1
  801474:	11802436 	bltu	r2,r6,801508 <_realloc_r+0x1e8>
  801478:	1c46b03a 	or	r3,r3,r17
  80147c:	98c00115 	stw	r3,4(r19)
  801480:	9c63883a 	add	r17,r19,r17
  801484:	88800117 	ldw	r2,4(r17)
  801488:	10800054 	ori	r2,r2,1
  80148c:	88800115 	stw	r2,4(r17)
  801490:	a809883a 	mov	r4,r21
  801494:	08032880 	call	803288 <__malloc_unlock>
  801498:	a005883a 	mov	r2,r20
  80149c:	dfc00917 	ldw	ra,36(sp)
  8014a0:	df000817 	ldw	fp,32(sp)
  8014a4:	ddc00717 	ldw	r23,28(sp)
  8014a8:	dd800617 	ldw	r22,24(sp)
  8014ac:	dd400517 	ldw	r21,20(sp)
  8014b0:	dd000417 	ldw	r20,16(sp)
  8014b4:	dcc00317 	ldw	r19,12(sp)
  8014b8:	dc800217 	ldw	r18,8(sp)
  8014bc:	dc400117 	ldw	r17,4(sp)
  8014c0:	dc000017 	ldw	r16,0(sp)
  8014c4:	dec00a04 	addi	sp,sp,40
  8014c8:	f800283a 	ret
  8014cc:	01ffff04 	movi	r7,-4
  8014d0:	31cc703a 	and	r6,r6,r7
  8014d4:	344f883a 	add	r7,r6,r17
  8014d8:	38bfbc16 	blt	r7,r2,8013cc <__reset+0xff8003cc>
  8014dc:	28800317 	ldw	r2,12(r5)
  8014e0:	29000217 	ldw	r4,8(r5)
  8014e4:	8029883a 	mov	r20,r16
  8014e8:	3823883a 	mov	r17,r7
  8014ec:	20800315 	stw	r2,12(r4)
  8014f0:	11000215 	stw	r4,8(r2)
  8014f4:	003fdc06 	br	801468 <__reset+0xff800468>
  8014f8:	00800304 	movi	r2,12
  8014fc:	a8800015 	stw	r2,0(r21)
  801500:	0005883a 	mov	r2,zero
  801504:	003fe506 	br	80149c <__reset+0xff80049c>
  801508:	1c86b03a 	or	r3,r3,r18
  80150c:	9c8b883a 	add	r5,r19,r18
  801510:	98c00115 	stw	r3,4(r19)
  801514:	30800054 	ori	r2,r6,1
  801518:	28800115 	stw	r2,4(r5)
  80151c:	298d883a 	add	r6,r5,r6
  801520:	30800117 	ldw	r2,4(r6)
  801524:	a809883a 	mov	r4,r21
  801528:	29400204 	addi	r5,r5,8
  80152c:	10800054 	ori	r2,r2,1
  801530:	30800115 	stw	r2,4(r6)
  801534:	08021740 	call	802174 <_free_r>
  801538:	003fd506 	br	801490 <__reset+0xff800490>
  80153c:	1c6f883a 	add	r23,r3,r17
  801540:	b880370e 	bge	r23,r2,801620 <_realloc_r+0x300>
  801544:	a00b883a 	mov	r5,r20
  801548:	a809883a 	mov	r4,r21
  80154c:	080082c0 	call	80082c <_malloc_r>
  801550:	1029883a 	mov	r20,r2
  801554:	1000c026 	beq	r2,zero,801858 <_realloc_r+0x538>
  801558:	80ffff17 	ldw	r3,-4(r16)
  80155c:	113ffe04 	addi	r4,r2,-8
  801560:	00bfff84 	movi	r2,-2
  801564:	1884703a 	and	r2,r3,r2
  801568:	9885883a 	add	r2,r19,r2
  80156c:	20809026 	beq	r4,r2,8017b0 <_realloc_r+0x490>
  801570:	89bfff04 	addi	r6,r17,-4
  801574:	00800904 	movi	r2,36
  801578:	11805936 	bltu	r2,r6,8016e0 <_realloc_r+0x3c0>
  80157c:	00c004c4 	movi	r3,19
  801580:	19803636 	bltu	r3,r6,80165c <_realloc_r+0x33c>
  801584:	a005883a 	mov	r2,r20
  801588:	8007883a 	mov	r3,r16
  80158c:	19000017 	ldw	r4,0(r3)
  801590:	11000015 	stw	r4,0(r2)
  801594:	19000117 	ldw	r4,4(r3)
  801598:	11000115 	stw	r4,4(r2)
  80159c:	18c00217 	ldw	r3,8(r3)
  8015a0:	10c00215 	stw	r3,8(r2)
  8015a4:	800b883a 	mov	r5,r16
  8015a8:	a809883a 	mov	r4,r21
  8015ac:	08021740 	call	802174 <_free_r>
  8015b0:	a809883a 	mov	r4,r21
  8015b4:	08032880 	call	803288 <__malloc_unlock>
  8015b8:	a005883a 	mov	r2,r20
  8015bc:	003fb706 	br	80149c <__reset+0xff80049c>
  8015c0:	300b883a 	mov	r5,r6
  8015c4:	dfc00917 	ldw	ra,36(sp)
  8015c8:	df000817 	ldw	fp,32(sp)
  8015cc:	ddc00717 	ldw	r23,28(sp)
  8015d0:	dd800617 	ldw	r22,24(sp)
  8015d4:	dd400517 	ldw	r21,20(sp)
  8015d8:	dd000417 	ldw	r20,16(sp)
  8015dc:	dcc00317 	ldw	r19,12(sp)
  8015e0:	dc800217 	ldw	r18,8(sp)
  8015e4:	dc400117 	ldw	r17,4(sp)
  8015e8:	dc000017 	ldw	r16,0(sp)
  8015ec:	dec00a04 	addi	sp,sp,40
  8015f0:	080082c1 	jmpi	80082c <_malloc_r>
  8015f4:	182f883a 	mov	r23,r3
  8015f8:	b8bfd216 	blt	r23,r2,801544 <__reset+0xff800544>
  8015fc:	00000806 	br	801620 <_realloc_r+0x300>
  801600:	21800117 	ldw	r6,4(r4)
  801604:	017fff04 	movi	r5,-4
  801608:	91c00404 	addi	r7,r18,16
  80160c:	314c703a 	and	r6,r6,r5
  801610:	344b883a 	add	r5,r6,r17
  801614:	29c0250e 	bge	r5,r7,8016ac <_realloc_r+0x38c>
  801618:	200b883a 	mov	r5,r4
  80161c:	003f6b06 	br	8013cc <__reset+0xff8003cc>
  801620:	b0800317 	ldw	r2,12(r22)
  801624:	b0c00217 	ldw	r3,8(r22)
  801628:	89bfff04 	addi	r6,r17,-4
  80162c:	01000904 	movi	r4,36
  801630:	18800315 	stw	r2,12(r3)
  801634:	10c00215 	stw	r3,8(r2)
  801638:	b5000204 	addi	r20,r22,8
  80163c:	21bf7b2e 	bgeu	r4,r6,80142c <__reset+0xff80042c>
  801640:	a009883a 	mov	r4,r20
  801644:	800b883a 	mov	r5,r16
  801648:	08011e40 	call	8011e4 <memmove>
  80164c:	b0c00117 	ldw	r3,4(r22)
  801650:	b823883a 	mov	r17,r23
  801654:	b027883a 	mov	r19,r22
  801658:	003f8306 	br	801468 <__reset+0xff800468>
  80165c:	80c00017 	ldw	r3,0(r16)
  801660:	a0c00015 	stw	r3,0(r20)
  801664:	80c00117 	ldw	r3,4(r16)
  801668:	a0c00115 	stw	r3,4(r20)
  80166c:	00c006c4 	movi	r3,27
  801670:	19804736 	bltu	r3,r6,801790 <_realloc_r+0x470>
  801674:	a0800204 	addi	r2,r20,8
  801678:	80c00204 	addi	r3,r16,8
  80167c:	003fc306 	br	80158c <__reset+0xff80058c>
  801680:	a007883a 	mov	r3,r20
  801684:	80800017 	ldw	r2,0(r16)
  801688:	b823883a 	mov	r17,r23
  80168c:	b027883a 	mov	r19,r22
  801690:	18800015 	stw	r2,0(r3)
  801694:	80800117 	ldw	r2,4(r16)
  801698:	18800115 	stw	r2,4(r3)
  80169c:	80800217 	ldw	r2,8(r16)
  8016a0:	18800215 	stw	r2,8(r3)
  8016a4:	b0c00117 	ldw	r3,4(r22)
  8016a8:	003f6f06 	br	801468 <__reset+0xff800468>
  8016ac:	9ca7883a 	add	r19,r19,r18
  8016b0:	2c85c83a 	sub	r2,r5,r18
  8016b4:	bcc00215 	stw	r19,8(r23)
  8016b8:	10800054 	ori	r2,r2,1
  8016bc:	98800115 	stw	r2,4(r19)
  8016c0:	80bfff17 	ldw	r2,-4(r16)
  8016c4:	a809883a 	mov	r4,r21
  8016c8:	1080004c 	andi	r2,r2,1
  8016cc:	90a4b03a 	or	r18,r18,r2
  8016d0:	84bfff15 	stw	r18,-4(r16)
  8016d4:	08032880 	call	803288 <__malloc_unlock>
  8016d8:	8005883a 	mov	r2,r16
  8016dc:	003f6f06 	br	80149c <__reset+0xff80049c>
  8016e0:	a009883a 	mov	r4,r20
  8016e4:	800b883a 	mov	r5,r16
  8016e8:	08011e40 	call	8011e4 <memmove>
  8016ec:	003fad06 	br	8015a4 <__reset+0xff8005a4>
  8016f0:	30f9883a 	add	fp,r6,r3
  8016f4:	91000404 	addi	r4,r18,16
  8016f8:	e13fbe16 	blt	fp,r4,8015f4 <__reset+0xff8005f4>
  8016fc:	b0800317 	ldw	r2,12(r22)
  801700:	b0c00217 	ldw	r3,8(r22)
  801704:	89bfff04 	addi	r6,r17,-4
  801708:	01000904 	movi	r4,36
  80170c:	18800315 	stw	r2,12(r3)
  801710:	10c00215 	stw	r3,8(r2)
  801714:	b4400204 	addi	r17,r22,8
  801718:	21804336 	bltu	r4,r6,801828 <_realloc_r+0x508>
  80171c:	008004c4 	movi	r2,19
  801720:	11803f2e 	bgeu	r2,r6,801820 <_realloc_r+0x500>
  801724:	80800017 	ldw	r2,0(r16)
  801728:	b0800215 	stw	r2,8(r22)
  80172c:	80800117 	ldw	r2,4(r16)
  801730:	b0800315 	stw	r2,12(r22)
  801734:	008006c4 	movi	r2,27
  801738:	11803f36 	bltu	r2,r6,801838 <_realloc_r+0x518>
  80173c:	b0c00404 	addi	r3,r22,16
  801740:	84000204 	addi	r16,r16,8
  801744:	80800017 	ldw	r2,0(r16)
  801748:	18800015 	stw	r2,0(r3)
  80174c:	80800117 	ldw	r2,4(r16)
  801750:	18800115 	stw	r2,4(r3)
  801754:	80800217 	ldw	r2,8(r16)
  801758:	18800215 	stw	r2,8(r3)
  80175c:	b487883a 	add	r3,r22,r18
  801760:	e485c83a 	sub	r2,fp,r18
  801764:	b8c00215 	stw	r3,8(r23)
  801768:	10800054 	ori	r2,r2,1
  80176c:	18800115 	stw	r2,4(r3)
  801770:	b0800117 	ldw	r2,4(r22)
  801774:	a809883a 	mov	r4,r21
  801778:	1080004c 	andi	r2,r2,1
  80177c:	90a4b03a 	or	r18,r18,r2
  801780:	b4800115 	stw	r18,4(r22)
  801784:	08032880 	call	803288 <__malloc_unlock>
  801788:	8805883a 	mov	r2,r17
  80178c:	003f4306 	br	80149c <__reset+0xff80049c>
  801790:	80c00217 	ldw	r3,8(r16)
  801794:	a0c00215 	stw	r3,8(r20)
  801798:	80c00317 	ldw	r3,12(r16)
  80179c:	a0c00315 	stw	r3,12(r20)
  8017a0:	30801126 	beq	r6,r2,8017e8 <_realloc_r+0x4c8>
  8017a4:	a0800404 	addi	r2,r20,16
  8017a8:	80c00404 	addi	r3,r16,16
  8017ac:	003f7706 	br	80158c <__reset+0xff80058c>
  8017b0:	a13fff17 	ldw	r4,-4(r20)
  8017b4:	00bfff04 	movi	r2,-4
  8017b8:	8029883a 	mov	r20,r16
  8017bc:	2084703a 	and	r2,r4,r2
  8017c0:	88a3883a 	add	r17,r17,r2
  8017c4:	003f2806 	br	801468 <__reset+0xff800468>
  8017c8:	80800217 	ldw	r2,8(r16)
  8017cc:	b0800415 	stw	r2,16(r22)
  8017d0:	80800317 	ldw	r2,12(r16)
  8017d4:	b0800515 	stw	r2,20(r22)
  8017d8:	31000a26 	beq	r6,r4,801804 <_realloc_r+0x4e4>
  8017dc:	b0c00604 	addi	r3,r22,24
  8017e0:	84000404 	addi	r16,r16,16
  8017e4:	003fa706 	br	801684 <__reset+0xff800684>
  8017e8:	81000417 	ldw	r4,16(r16)
  8017ec:	a0800604 	addi	r2,r20,24
  8017f0:	80c00604 	addi	r3,r16,24
  8017f4:	a1000415 	stw	r4,16(r20)
  8017f8:	81000517 	ldw	r4,20(r16)
  8017fc:	a1000515 	stw	r4,20(r20)
  801800:	003f6206 	br	80158c <__reset+0xff80058c>
  801804:	80800417 	ldw	r2,16(r16)
  801808:	84000604 	addi	r16,r16,24
  80180c:	b0c00804 	addi	r3,r22,32
  801810:	b0800615 	stw	r2,24(r22)
  801814:	80bfff17 	ldw	r2,-4(r16)
  801818:	b0800715 	stw	r2,28(r22)
  80181c:	003f9906 	br	801684 <__reset+0xff800684>
  801820:	8807883a 	mov	r3,r17
  801824:	003fc706 	br	801744 <__reset+0xff800744>
  801828:	8809883a 	mov	r4,r17
  80182c:	800b883a 	mov	r5,r16
  801830:	08011e40 	call	8011e4 <memmove>
  801834:	003fc906 	br	80175c <__reset+0xff80075c>
  801838:	80800217 	ldw	r2,8(r16)
  80183c:	b0800415 	stw	r2,16(r22)
  801840:	80800317 	ldw	r2,12(r16)
  801844:	b0800515 	stw	r2,20(r22)
  801848:	31000726 	beq	r6,r4,801868 <_realloc_r+0x548>
  80184c:	b0c00604 	addi	r3,r22,24
  801850:	84000404 	addi	r16,r16,16
  801854:	003fbb06 	br	801744 <__reset+0xff800744>
  801858:	a809883a 	mov	r4,r21
  80185c:	08032880 	call	803288 <__malloc_unlock>
  801860:	0005883a 	mov	r2,zero
  801864:	003f0d06 	br	80149c <__reset+0xff80049c>
  801868:	80800417 	ldw	r2,16(r16)
  80186c:	84000604 	addi	r16,r16,24
  801870:	b0c00804 	addi	r3,r22,32
  801874:	b0800615 	stw	r2,24(r22)
  801878:	80bfff17 	ldw	r2,-4(r16)
  80187c:	b0800715 	stw	r2,28(r22)
  801880:	003fb006 	br	801744 <__reset+0xff800744>

00801884 <_sbrk_r>:
  801884:	defffd04 	addi	sp,sp,-12
  801888:	dc400115 	stw	r17,4(sp)
  80188c:	dc000015 	stw	r16,0(sp)
  801890:	2023883a 	mov	r17,r4
  801894:	04002074 	movhi	r16,129
  801898:	84208404 	addi	r16,r16,-32240
  80189c:	2809883a 	mov	r4,r5
  8018a0:	dfc00215 	stw	ra,8(sp)
  8018a4:	80000015 	stw	zero,0(r16)
  8018a8:	08034700 	call	803470 <sbrk>
  8018ac:	00ffffc4 	movi	r3,-1
  8018b0:	10c00526 	beq	r2,r3,8018c8 <_sbrk_r+0x44>
  8018b4:	dfc00217 	ldw	ra,8(sp)
  8018b8:	dc400117 	ldw	r17,4(sp)
  8018bc:	dc000017 	ldw	r16,0(sp)
  8018c0:	dec00304 	addi	sp,sp,12
  8018c4:	f800283a 	ret
  8018c8:	80c00017 	ldw	r3,0(r16)
  8018cc:	183ff926 	beq	r3,zero,8018b4 <__reset+0xff8008b4>
  8018d0:	88c00015 	stw	r3,0(r17)
  8018d4:	dfc00217 	ldw	ra,8(sp)
  8018d8:	dc400117 	ldw	r17,4(sp)
  8018dc:	dc000017 	ldw	r16,0(sp)
  8018e0:	dec00304 	addi	sp,sp,12
  8018e4:	f800283a 	ret

008018e8 <__swsetup_r>:
  8018e8:	00802074 	movhi	r2,129
  8018ec:	10a07204 	addi	r2,r2,-32312
  8018f0:	10800017 	ldw	r2,0(r2)
  8018f4:	defffd04 	addi	sp,sp,-12
  8018f8:	dc400115 	stw	r17,4(sp)
  8018fc:	dc000015 	stw	r16,0(sp)
  801900:	dfc00215 	stw	ra,8(sp)
  801904:	2023883a 	mov	r17,r4
  801908:	2821883a 	mov	r16,r5
  80190c:	10000226 	beq	r2,zero,801918 <__swsetup_r+0x30>
  801910:	10c00e17 	ldw	r3,56(r2)
  801914:	18002e26 	beq	r3,zero,8019d0 <__swsetup_r+0xe8>
  801918:	8080030b 	ldhu	r2,12(r16)
  80191c:	10c0020c 	andi	r3,r2,8
  801920:	100d883a 	mov	r6,r2
  801924:	18000f26 	beq	r3,zero,801964 <__swsetup_r+0x7c>
  801928:	80c00417 	ldw	r3,16(r16)
  80192c:	18001526 	beq	r3,zero,801984 <__swsetup_r+0x9c>
  801930:	1100004c 	andi	r4,r2,1
  801934:	20001c1e 	bne	r4,zero,8019a8 <__swsetup_r+0xc0>
  801938:	1080008c 	andi	r2,r2,2
  80193c:	1000271e 	bne	r2,zero,8019dc <__swsetup_r+0xf4>
  801940:	80800517 	ldw	r2,20(r16)
  801944:	80800215 	stw	r2,8(r16)
  801948:	18001c26 	beq	r3,zero,8019bc <__swsetup_r+0xd4>
  80194c:	0005883a 	mov	r2,zero
  801950:	dfc00217 	ldw	ra,8(sp)
  801954:	dc400117 	ldw	r17,4(sp)
  801958:	dc000017 	ldw	r16,0(sp)
  80195c:	dec00304 	addi	sp,sp,12
  801960:	f800283a 	ret
  801964:	3080040c 	andi	r2,r6,16
  801968:	10001726 	beq	r2,zero,8019c8 <__swsetup_r+0xe0>
  80196c:	3080010c 	andi	r2,r6,4
  801970:	10001d1e 	bne	r2,zero,8019e8 <__swsetup_r+0x100>
  801974:	80c00417 	ldw	r3,16(r16)
  801978:	30800214 	ori	r2,r6,8
  80197c:	8080030d 	sth	r2,12(r16)
  801980:	183feb1e 	bne	r3,zero,801930 <__reset+0xff800930>
  801984:	1140a00c 	andi	r5,r2,640
  801988:	01008004 	movi	r4,512
  80198c:	293fe826 	beq	r5,r4,801930 <__reset+0xff800930>
  801990:	8809883a 	mov	r4,r17
  801994:	800b883a 	mov	r5,r16
  801998:	08025a40 	call	8025a4 <__smakebuf_r>
  80199c:	8080030b 	ldhu	r2,12(r16)
  8019a0:	80c00417 	ldw	r3,16(r16)
  8019a4:	003fe206 	br	801930 <__reset+0xff800930>
  8019a8:	80800517 	ldw	r2,20(r16)
  8019ac:	80000215 	stw	zero,8(r16)
  8019b0:	0085c83a 	sub	r2,zero,r2
  8019b4:	80800615 	stw	r2,24(r16)
  8019b8:	183fe41e 	bne	r3,zero,80194c <__reset+0xff80094c>
  8019bc:	8080030b 	ldhu	r2,12(r16)
  8019c0:	1080200c 	andi	r2,r2,128
  8019c4:	103fe226 	beq	r2,zero,801950 <__reset+0xff800950>
  8019c8:	00bfffc4 	movi	r2,-1
  8019cc:	003fe006 	br	801950 <__reset+0xff800950>
  8019d0:	1009883a 	mov	r4,r2
  8019d4:	0801d400 	call	801d40 <__sinit>
  8019d8:	003fcf06 	br	801918 <__reset+0xff800918>
  8019dc:	0005883a 	mov	r2,zero
  8019e0:	80800215 	stw	r2,8(r16)
  8019e4:	003fd806 	br	801948 <__reset+0xff800948>
  8019e8:	81400c17 	ldw	r5,48(r16)
  8019ec:	28000626 	beq	r5,zero,801a08 <__swsetup_r+0x120>
  8019f0:	80801004 	addi	r2,r16,64
  8019f4:	28800326 	beq	r5,r2,801a04 <__swsetup_r+0x11c>
  8019f8:	8809883a 	mov	r4,r17
  8019fc:	08021740 	call	802174 <_free_r>
  801a00:	8180030b 	ldhu	r6,12(r16)
  801a04:	80000c15 	stw	zero,48(r16)
  801a08:	80c00417 	ldw	r3,16(r16)
  801a0c:	00bff6c4 	movi	r2,-37
  801a10:	118c703a 	and	r6,r2,r6
  801a14:	80000115 	stw	zero,4(r16)
  801a18:	80c00015 	stw	r3,0(r16)
  801a1c:	003fd606 	br	801978 <__reset+0xff800978>

00801a20 <_fflush_r>:
  801a20:	defffb04 	addi	sp,sp,-20
  801a24:	dcc00315 	stw	r19,12(sp)
  801a28:	dc400115 	stw	r17,4(sp)
  801a2c:	dfc00415 	stw	ra,16(sp)
  801a30:	dc800215 	stw	r18,8(sp)
  801a34:	dc000015 	stw	r16,0(sp)
  801a38:	2027883a 	mov	r19,r4
  801a3c:	2823883a 	mov	r17,r5
  801a40:	20000226 	beq	r4,zero,801a4c <_fflush_r+0x2c>
  801a44:	20800e17 	ldw	r2,56(r4)
  801a48:	10005826 	beq	r2,zero,801bac <_fflush_r+0x18c>
  801a4c:	8880030b 	ldhu	r2,12(r17)
  801a50:	10ffffcc 	andi	r3,r2,65535
  801a54:	18e0001c 	xori	r3,r3,32768
  801a58:	18e00004 	addi	r3,r3,-32768
  801a5c:	18002b26 	beq	r3,zero,801b0c <_fflush_r+0xec>
  801a60:	10c0020c 	andi	r3,r2,8
  801a64:	1800311e 	bne	r3,zero,801b2c <_fflush_r+0x10c>
  801a68:	88c00117 	ldw	r3,4(r17)
  801a6c:	10820014 	ori	r2,r2,2048
  801a70:	8880030d 	sth	r2,12(r17)
  801a74:	00c05c0e 	bge	zero,r3,801be8 <_fflush_r+0x1c8>
  801a78:	88c00a17 	ldw	r3,40(r17)
  801a7c:	18002326 	beq	r3,zero,801b0c <_fflush_r+0xec>
  801a80:	9c000017 	ldw	r16,0(r19)
  801a84:	1104000c 	andi	r4,r2,4096
  801a88:	98000015 	stw	zero,0(r19)
  801a8c:	20004b26 	beq	r4,zero,801bbc <_fflush_r+0x19c>
  801a90:	89801417 	ldw	r6,80(r17)
  801a94:	1080010c 	andi	r2,r2,4
  801a98:	10000626 	beq	r2,zero,801ab4 <_fflush_r+0x94>
  801a9c:	89000117 	ldw	r4,4(r17)
  801aa0:	88800c17 	ldw	r2,48(r17)
  801aa4:	310dc83a 	sub	r6,r6,r4
  801aa8:	10000226 	beq	r2,zero,801ab4 <_fflush_r+0x94>
  801aac:	88800f17 	ldw	r2,60(r17)
  801ab0:	308dc83a 	sub	r6,r6,r2
  801ab4:	89400717 	ldw	r5,28(r17)
  801ab8:	9809883a 	mov	r4,r19
  801abc:	000f883a 	mov	r7,zero
  801ac0:	183ee83a 	callr	r3
  801ac4:	00ffffc4 	movi	r3,-1
  801ac8:	10c04a26 	beq	r2,r3,801bf4 <_fflush_r+0x1d4>
  801acc:	88c0030b 	ldhu	r3,12(r17)
  801ad0:	89000417 	ldw	r4,16(r17)
  801ad4:	88000115 	stw	zero,4(r17)
  801ad8:	197dffcc 	andi	r5,r3,63487
  801adc:	8940030d 	sth	r5,12(r17)
  801ae0:	89000015 	stw	r4,0(r17)
  801ae4:	18c4000c 	andi	r3,r3,4096
  801ae8:	1800581e 	bne	r3,zero,801c4c <_fflush_r+0x22c>
  801aec:	89400c17 	ldw	r5,48(r17)
  801af0:	9c000015 	stw	r16,0(r19)
  801af4:	28000526 	beq	r5,zero,801b0c <_fflush_r+0xec>
  801af8:	88801004 	addi	r2,r17,64
  801afc:	28800226 	beq	r5,r2,801b08 <_fflush_r+0xe8>
  801b00:	9809883a 	mov	r4,r19
  801b04:	08021740 	call	802174 <_free_r>
  801b08:	88000c15 	stw	zero,48(r17)
  801b0c:	0005883a 	mov	r2,zero
  801b10:	dfc00417 	ldw	ra,16(sp)
  801b14:	dcc00317 	ldw	r19,12(sp)
  801b18:	dc800217 	ldw	r18,8(sp)
  801b1c:	dc400117 	ldw	r17,4(sp)
  801b20:	dc000017 	ldw	r16,0(sp)
  801b24:	dec00504 	addi	sp,sp,20
  801b28:	f800283a 	ret
  801b2c:	8c800417 	ldw	r18,16(r17)
  801b30:	903ff626 	beq	r18,zero,801b0c <__reset+0xff800b0c>
  801b34:	8c000017 	ldw	r16,0(r17)
  801b38:	108000cc 	andi	r2,r2,3
  801b3c:	8c800015 	stw	r18,0(r17)
  801b40:	84a1c83a 	sub	r16,r16,r18
  801b44:	10001b26 	beq	r2,zero,801bb4 <_fflush_r+0x194>
  801b48:	0005883a 	mov	r2,zero
  801b4c:	88800215 	stw	r2,8(r17)
  801b50:	04000316 	blt	zero,r16,801b60 <_fflush_r+0x140>
  801b54:	003fed06 	br	801b0c <__reset+0xff800b0c>
  801b58:	90a5883a 	add	r18,r18,r2
  801b5c:	043feb0e 	bge	zero,r16,801b0c <__reset+0xff800b0c>
  801b60:	88800917 	ldw	r2,36(r17)
  801b64:	89400717 	ldw	r5,28(r17)
  801b68:	800f883a 	mov	r7,r16
  801b6c:	900d883a 	mov	r6,r18
  801b70:	9809883a 	mov	r4,r19
  801b74:	103ee83a 	callr	r2
  801b78:	80a1c83a 	sub	r16,r16,r2
  801b7c:	00bff616 	blt	zero,r2,801b58 <__reset+0xff800b58>
  801b80:	88c0030b 	ldhu	r3,12(r17)
  801b84:	00bfffc4 	movi	r2,-1
  801b88:	18c01014 	ori	r3,r3,64
  801b8c:	88c0030d 	sth	r3,12(r17)
  801b90:	dfc00417 	ldw	ra,16(sp)
  801b94:	dcc00317 	ldw	r19,12(sp)
  801b98:	dc800217 	ldw	r18,8(sp)
  801b9c:	dc400117 	ldw	r17,4(sp)
  801ba0:	dc000017 	ldw	r16,0(sp)
  801ba4:	dec00504 	addi	sp,sp,20
  801ba8:	f800283a 	ret
  801bac:	0801d400 	call	801d40 <__sinit>
  801bb0:	003fa606 	br	801a4c <__reset+0xff800a4c>
  801bb4:	88800517 	ldw	r2,20(r17)
  801bb8:	003fe406 	br	801b4c <__reset+0xff800b4c>
  801bbc:	89400717 	ldw	r5,28(r17)
  801bc0:	000d883a 	mov	r6,zero
  801bc4:	9809883a 	mov	r4,r19
  801bc8:	01c00044 	movi	r7,1
  801bcc:	183ee83a 	callr	r3
  801bd0:	100d883a 	mov	r6,r2
  801bd4:	00bfffc4 	movi	r2,-1
  801bd8:	30801326 	beq	r6,r2,801c28 <_fflush_r+0x208>
  801bdc:	8880030b 	ldhu	r2,12(r17)
  801be0:	88c00a17 	ldw	r3,40(r17)
  801be4:	003fab06 	br	801a94 <__reset+0xff800a94>
  801be8:	88c00f17 	ldw	r3,60(r17)
  801bec:	00ffa216 	blt	zero,r3,801a78 <__reset+0xff800a78>
  801bf0:	003fc606 	br	801b0c <__reset+0xff800b0c>
  801bf4:	98c00017 	ldw	r3,0(r19)
  801bf8:	183fb426 	beq	r3,zero,801acc <__reset+0xff800acc>
  801bfc:	01000744 	movi	r4,29
  801c00:	19000226 	beq	r3,r4,801c0c <_fflush_r+0x1ec>
  801c04:	01000584 	movi	r4,22
  801c08:	1900121e 	bne	r3,r4,801c54 <_fflush_r+0x234>
  801c0c:	88c0030b 	ldhu	r3,12(r17)
  801c10:	88800417 	ldw	r2,16(r17)
  801c14:	88000115 	stw	zero,4(r17)
  801c18:	18fdffcc 	andi	r3,r3,63487
  801c1c:	88c0030d 	sth	r3,12(r17)
  801c20:	88800015 	stw	r2,0(r17)
  801c24:	003fb106 	br	801aec <__reset+0xff800aec>
  801c28:	98800017 	ldw	r2,0(r19)
  801c2c:	103feb26 	beq	r2,zero,801bdc <__reset+0xff800bdc>
  801c30:	00c00744 	movi	r3,29
  801c34:	10c00226 	beq	r2,r3,801c40 <_fflush_r+0x220>
  801c38:	00c00584 	movi	r3,22
  801c3c:	10ffd01e 	bne	r2,r3,801b80 <__reset+0xff800b80>
  801c40:	9c000015 	stw	r16,0(r19)
  801c44:	0005883a 	mov	r2,zero
  801c48:	003fb106 	br	801b10 <__reset+0xff800b10>
  801c4c:	88801415 	stw	r2,80(r17)
  801c50:	003fa606 	br	801aec <__reset+0xff800aec>
  801c54:	88c0030b 	ldhu	r3,12(r17)
  801c58:	18c01014 	ori	r3,r3,64
  801c5c:	88c0030d 	sth	r3,12(r17)
  801c60:	003fab06 	br	801b10 <__reset+0xff800b10>

00801c64 <fflush>:
  801c64:	200b883a 	mov	r5,r4
  801c68:	20000426 	beq	r4,zero,801c7c <fflush+0x18>
  801c6c:	00802074 	movhi	r2,129
  801c70:	10a07204 	addi	r2,r2,-32312
  801c74:	11000017 	ldw	r4,0(r2)
  801c78:	0801a201 	jmpi	801a20 <_fflush_r>
  801c7c:	00802074 	movhi	r2,129
  801c80:	10a07104 	addi	r2,r2,-32316
  801c84:	11000017 	ldw	r4,0(r2)
  801c88:	01402034 	movhi	r5,128
  801c8c:	29468804 	addi	r5,r5,6688
  801c90:	08024ec1 	jmpi	8024ec <_fwalk_reent>

00801c94 <__fp_lock>:
  801c94:	0005883a 	mov	r2,zero
  801c98:	f800283a 	ret

00801c9c <__fp_unlock>:
  801c9c:	0005883a 	mov	r2,zero
  801ca0:	f800283a 	ret

00801ca4 <_cleanup_r>:
  801ca4:	01402034 	movhi	r5,128
  801ca8:	294ae804 	addi	r5,r5,11168
  801cac:	08024441 	jmpi	802444 <_fwalk>

00801cb0 <__sfmoreglue>:
  801cb0:	defffc04 	addi	sp,sp,-16
  801cb4:	dc800215 	stw	r18,8(sp)
  801cb8:	2825883a 	mov	r18,r5
  801cbc:	dc000015 	stw	r16,0(sp)
  801cc0:	01401a04 	movi	r5,104
  801cc4:	2021883a 	mov	r16,r4
  801cc8:	9009883a 	mov	r4,r18
  801ccc:	dfc00315 	stw	ra,12(sp)
  801cd0:	dc400115 	stw	r17,4(sp)
  801cd4:	0802d580 	call	802d58 <__mulsi3>
  801cd8:	8009883a 	mov	r4,r16
  801cdc:	11400304 	addi	r5,r2,12
  801ce0:	1023883a 	mov	r17,r2
  801ce4:	080082c0 	call	80082c <_malloc_r>
  801ce8:	1021883a 	mov	r16,r2
  801cec:	10000726 	beq	r2,zero,801d0c <__sfmoreglue+0x5c>
  801cf0:	11000304 	addi	r4,r2,12
  801cf4:	10000015 	stw	zero,0(r2)
  801cf8:	14800115 	stw	r18,4(r2)
  801cfc:	11000215 	stw	r4,8(r2)
  801d00:	000b883a 	mov	r5,zero
  801d04:	880d883a 	mov	r6,r17
  801d08:	08027580 	call	802758 <memset>
  801d0c:	8005883a 	mov	r2,r16
  801d10:	dfc00317 	ldw	ra,12(sp)
  801d14:	dc800217 	ldw	r18,8(sp)
  801d18:	dc400117 	ldw	r17,4(sp)
  801d1c:	dc000017 	ldw	r16,0(sp)
  801d20:	dec00404 	addi	sp,sp,16
  801d24:	f800283a 	ret

00801d28 <_cleanup>:
  801d28:	00802074 	movhi	r2,129
  801d2c:	10a07104 	addi	r2,r2,-32316
  801d30:	11000017 	ldw	r4,0(r2)
  801d34:	01402034 	movhi	r5,128
  801d38:	294ae804 	addi	r5,r5,11168
  801d3c:	08024441 	jmpi	802444 <_fwalk>

00801d40 <__sinit>:
  801d40:	20800e17 	ldw	r2,56(r4)
  801d44:	defff704 	addi	sp,sp,-36
  801d48:	dc800215 	stw	r18,8(sp)
  801d4c:	dfc00815 	stw	ra,32(sp)
  801d50:	ddc00715 	stw	r23,28(sp)
  801d54:	dd800615 	stw	r22,24(sp)
  801d58:	dd400515 	stw	r21,20(sp)
  801d5c:	dd000415 	stw	r20,16(sp)
  801d60:	dcc00315 	stw	r19,12(sp)
  801d64:	dc400115 	stw	r17,4(sp)
  801d68:	dc000015 	stw	r16,0(sp)
  801d6c:	2025883a 	mov	r18,r4
  801d70:	10004f1e 	bne	r2,zero,801eb0 <__sinit+0x170>
  801d74:	24000117 	ldw	r16,4(r4)
  801d78:	00c02034 	movhi	r3,128
  801d7c:	18c72904 	addi	r3,r3,7332
  801d80:	20c00f15 	stw	r3,60(r4)
  801d84:	2080bb04 	addi	r2,r4,748
  801d88:	00c000c4 	movi	r3,3
  801d8c:	05c00044 	movi	r23,1
  801d90:	20c0b915 	stw	r3,740(r4)
  801d94:	2080ba15 	stw	r2,744(r4)
  801d98:	25c00e15 	stw	r23,56(r4)
  801d9c:	2000b815 	stw	zero,736(r4)
  801da0:	00800104 	movi	r2,4
  801da4:	81001704 	addi	r4,r16,92
  801da8:	000b883a 	mov	r5,zero
  801dac:	01800204 	movi	r6,8
  801db0:	80000015 	stw	zero,0(r16)
  801db4:	80000115 	stw	zero,4(r16)
  801db8:	80000215 	stw	zero,8(r16)
  801dbc:	8080030d 	sth	r2,12(r16)
  801dc0:	80001915 	stw	zero,100(r16)
  801dc4:	8000038d 	sth	zero,14(r16)
  801dc8:	80000415 	stw	zero,16(r16)
  801dcc:	80000515 	stw	zero,20(r16)
  801dd0:	80000615 	stw	zero,24(r16)
  801dd4:	08027580 	call	802758 <memset>
  801dd8:	94400217 	ldw	r17,8(r18)
  801ddc:	05802034 	movhi	r22,128
  801de0:	b58a1b04 	addi	r22,r22,10348
  801de4:	05402034 	movhi	r21,128
  801de8:	ad4a3204 	addi	r21,r21,10440
  801dec:	05002034 	movhi	r20,128
  801df0:	a50a5104 	addi	r20,r20,10564
  801df4:	04c02034 	movhi	r19,128
  801df8:	9cca6804 	addi	r19,r19,10656
  801dfc:	84000715 	stw	r16,28(r16)
  801e00:	85800815 	stw	r22,32(r16)
  801e04:	85400915 	stw	r21,36(r16)
  801e08:	85000a15 	stw	r20,40(r16)
  801e0c:	84c00b15 	stw	r19,44(r16)
  801e10:	00800284 	movi	r2,10
  801e14:	89001704 	addi	r4,r17,92
  801e18:	000b883a 	mov	r5,zero
  801e1c:	01800204 	movi	r6,8
  801e20:	88000015 	stw	zero,0(r17)
  801e24:	88000115 	stw	zero,4(r17)
  801e28:	88000215 	stw	zero,8(r17)
  801e2c:	8880030d 	sth	r2,12(r17)
  801e30:	88001915 	stw	zero,100(r17)
  801e34:	8dc0038d 	sth	r23,14(r17)
  801e38:	88000415 	stw	zero,16(r17)
  801e3c:	88000515 	stw	zero,20(r17)
  801e40:	88000615 	stw	zero,24(r17)
  801e44:	08027580 	call	802758 <memset>
  801e48:	94000317 	ldw	r16,12(r18)
  801e4c:	00800484 	movi	r2,18
  801e50:	8c400715 	stw	r17,28(r17)
  801e54:	8d800815 	stw	r22,32(r17)
  801e58:	8d400915 	stw	r21,36(r17)
  801e5c:	8d000a15 	stw	r20,40(r17)
  801e60:	8cc00b15 	stw	r19,44(r17)
  801e64:	8080030d 	sth	r2,12(r16)
  801e68:	00800084 	movi	r2,2
  801e6c:	80000015 	stw	zero,0(r16)
  801e70:	80000115 	stw	zero,4(r16)
  801e74:	80000215 	stw	zero,8(r16)
  801e78:	80001915 	stw	zero,100(r16)
  801e7c:	8080038d 	sth	r2,14(r16)
  801e80:	80000415 	stw	zero,16(r16)
  801e84:	80000515 	stw	zero,20(r16)
  801e88:	80000615 	stw	zero,24(r16)
  801e8c:	81001704 	addi	r4,r16,92
  801e90:	000b883a 	mov	r5,zero
  801e94:	01800204 	movi	r6,8
  801e98:	08027580 	call	802758 <memset>
  801e9c:	84000715 	stw	r16,28(r16)
  801ea0:	85800815 	stw	r22,32(r16)
  801ea4:	85400915 	stw	r21,36(r16)
  801ea8:	85000a15 	stw	r20,40(r16)
  801eac:	84c00b15 	stw	r19,44(r16)
  801eb0:	dfc00817 	ldw	ra,32(sp)
  801eb4:	ddc00717 	ldw	r23,28(sp)
  801eb8:	dd800617 	ldw	r22,24(sp)
  801ebc:	dd400517 	ldw	r21,20(sp)
  801ec0:	dd000417 	ldw	r20,16(sp)
  801ec4:	dcc00317 	ldw	r19,12(sp)
  801ec8:	dc800217 	ldw	r18,8(sp)
  801ecc:	dc400117 	ldw	r17,4(sp)
  801ed0:	dc000017 	ldw	r16,0(sp)
  801ed4:	dec00904 	addi	sp,sp,36
  801ed8:	f800283a 	ret

00801edc <__sfp>:
  801edc:	defffb04 	addi	sp,sp,-20
  801ee0:	00802074 	movhi	r2,129
  801ee4:	10a07104 	addi	r2,r2,-32316
  801ee8:	dc800215 	stw	r18,8(sp)
  801eec:	14800017 	ldw	r18,0(r2)
  801ef0:	dcc00315 	stw	r19,12(sp)
  801ef4:	dfc00415 	stw	ra,16(sp)
  801ef8:	90800e17 	ldw	r2,56(r18)
  801efc:	dc400115 	stw	r17,4(sp)
  801f00:	dc000015 	stw	r16,0(sp)
  801f04:	2027883a 	mov	r19,r4
  801f08:	10002f26 	beq	r2,zero,801fc8 <__sfp+0xec>
  801f0c:	9480b804 	addi	r18,r18,736
  801f10:	047fffc4 	movi	r17,-1
  801f14:	91400117 	ldw	r5,4(r18)
  801f18:	94000217 	ldw	r16,8(r18)
  801f1c:	297fffc4 	addi	r5,r5,-1
  801f20:	28000a16 	blt	r5,zero,801f4c <__sfp+0x70>
  801f24:	8080030f 	ldh	r2,12(r16)
  801f28:	10000c26 	beq	r2,zero,801f5c <__sfp+0x80>
  801f2c:	80c01d04 	addi	r3,r16,116
  801f30:	00000206 	br	801f3c <__sfp+0x60>
  801f34:	18bfe60f 	ldh	r2,-104(r3)
  801f38:	10000826 	beq	r2,zero,801f5c <__sfp+0x80>
  801f3c:	297fffc4 	addi	r5,r5,-1
  801f40:	1c3ffd04 	addi	r16,r3,-12
  801f44:	18c01a04 	addi	r3,r3,104
  801f48:	2c7ffa1e 	bne	r5,r17,801f34 <__reset+0xff800f34>
  801f4c:	90800017 	ldw	r2,0(r18)
  801f50:	10002026 	beq	r2,zero,801fd4 <__sfp+0xf8>
  801f54:	1025883a 	mov	r18,r2
  801f58:	003fee06 	br	801f14 <__reset+0xff800f14>
  801f5c:	00bfffc4 	movi	r2,-1
  801f60:	8080038d 	sth	r2,14(r16)
  801f64:	00800044 	movi	r2,1
  801f68:	8080030d 	sth	r2,12(r16)
  801f6c:	80001915 	stw	zero,100(r16)
  801f70:	80000015 	stw	zero,0(r16)
  801f74:	80000215 	stw	zero,8(r16)
  801f78:	80000115 	stw	zero,4(r16)
  801f7c:	80000415 	stw	zero,16(r16)
  801f80:	80000515 	stw	zero,20(r16)
  801f84:	80000615 	stw	zero,24(r16)
  801f88:	81001704 	addi	r4,r16,92
  801f8c:	000b883a 	mov	r5,zero
  801f90:	01800204 	movi	r6,8
  801f94:	08027580 	call	802758 <memset>
  801f98:	8005883a 	mov	r2,r16
  801f9c:	80000c15 	stw	zero,48(r16)
  801fa0:	80000d15 	stw	zero,52(r16)
  801fa4:	80001115 	stw	zero,68(r16)
  801fa8:	80001215 	stw	zero,72(r16)
  801fac:	dfc00417 	ldw	ra,16(sp)
  801fb0:	dcc00317 	ldw	r19,12(sp)
  801fb4:	dc800217 	ldw	r18,8(sp)
  801fb8:	dc400117 	ldw	r17,4(sp)
  801fbc:	dc000017 	ldw	r16,0(sp)
  801fc0:	dec00504 	addi	sp,sp,20
  801fc4:	f800283a 	ret
  801fc8:	9009883a 	mov	r4,r18
  801fcc:	0801d400 	call	801d40 <__sinit>
  801fd0:	003fce06 	br	801f0c <__reset+0xff800f0c>
  801fd4:	9809883a 	mov	r4,r19
  801fd8:	01400104 	movi	r5,4
  801fdc:	0801cb00 	call	801cb0 <__sfmoreglue>
  801fe0:	90800015 	stw	r2,0(r18)
  801fe4:	103fdb1e 	bne	r2,zero,801f54 <__reset+0xff800f54>
  801fe8:	00800304 	movi	r2,12
  801fec:	98800015 	stw	r2,0(r19)
  801ff0:	0005883a 	mov	r2,zero
  801ff4:	003fed06 	br	801fac <__reset+0xff800fac>

00801ff8 <__sfp_lock_acquire>:
  801ff8:	f800283a 	ret

00801ffc <__sfp_lock_release>:
  801ffc:	f800283a 	ret

00802000 <__sinit_lock_acquire>:
  802000:	f800283a 	ret

00802004 <__sinit_lock_release>:
  802004:	f800283a 	ret

00802008 <__fp_lock_all>:
  802008:	00802074 	movhi	r2,129
  80200c:	10a07204 	addi	r2,r2,-32312
  802010:	11000017 	ldw	r4,0(r2)
  802014:	01402034 	movhi	r5,128
  802018:	29472504 	addi	r5,r5,7316
  80201c:	08024441 	jmpi	802444 <_fwalk>

00802020 <__fp_unlock_all>:
  802020:	00802074 	movhi	r2,129
  802024:	10a07204 	addi	r2,r2,-32312
  802028:	11000017 	ldw	r4,0(r2)
  80202c:	01402034 	movhi	r5,128
  802030:	29472704 	addi	r5,r5,7324
  802034:	08024441 	jmpi	802444 <_fwalk>

00802038 <_malloc_trim_r>:
  802038:	defffb04 	addi	sp,sp,-20
  80203c:	dcc00315 	stw	r19,12(sp)
  802040:	dc800215 	stw	r18,8(sp)
  802044:	dc400115 	stw	r17,4(sp)
  802048:	dc000015 	stw	r16,0(sp)
  80204c:	2827883a 	mov	r19,r5
  802050:	dfc00415 	stw	ra,16(sp)
  802054:	04402034 	movhi	r17,128
  802058:	8c5abb04 	addi	r17,r17,27372
  80205c:	2021883a 	mov	r16,r4
  802060:	08032680 	call	803268 <__malloc_lock>
  802064:	88800217 	ldw	r2,8(r17)
  802068:	14800117 	ldw	r18,4(r2)
  80206c:	00bfff04 	movi	r2,-4
  802070:	90a4703a 	and	r18,r18,r2
  802074:	94e7c83a 	sub	r19,r18,r19
  802078:	9cc3fbc4 	addi	r19,r19,4079
  80207c:	9826d33a 	srli	r19,r19,12
  802080:	0083ffc4 	movi	r2,4095
  802084:	9cffffc4 	addi	r19,r19,-1
  802088:	9826933a 	slli	r19,r19,12
  80208c:	14c0060e 	bge	r2,r19,8020a8 <_malloc_trim_r+0x70>
  802090:	8009883a 	mov	r4,r16
  802094:	000b883a 	mov	r5,zero
  802098:	08018840 	call	801884 <_sbrk_r>
  80209c:	88c00217 	ldw	r3,8(r17)
  8020a0:	1c87883a 	add	r3,r3,r18
  8020a4:	10c00a26 	beq	r2,r3,8020d0 <_malloc_trim_r+0x98>
  8020a8:	8009883a 	mov	r4,r16
  8020ac:	08032880 	call	803288 <__malloc_unlock>
  8020b0:	0005883a 	mov	r2,zero
  8020b4:	dfc00417 	ldw	ra,16(sp)
  8020b8:	dcc00317 	ldw	r19,12(sp)
  8020bc:	dc800217 	ldw	r18,8(sp)
  8020c0:	dc400117 	ldw	r17,4(sp)
  8020c4:	dc000017 	ldw	r16,0(sp)
  8020c8:	dec00504 	addi	sp,sp,20
  8020cc:	f800283a 	ret
  8020d0:	8009883a 	mov	r4,r16
  8020d4:	04cbc83a 	sub	r5,zero,r19
  8020d8:	08018840 	call	801884 <_sbrk_r>
  8020dc:	00ffffc4 	movi	r3,-1
  8020e0:	10c01326 	beq	r2,r3,802130 <_malloc_trim_r+0xf8>
  8020e4:	00802074 	movhi	r2,129
  8020e8:	10a08b04 	addi	r2,r2,-32212
  8020ec:	11000017 	ldw	r4,0(r2)
  8020f0:	88c00217 	ldw	r3,8(r17)
  8020f4:	94e5c83a 	sub	r18,r18,r19
  8020f8:	94800054 	ori	r18,r18,1
  8020fc:	24e7c83a 	sub	r19,r4,r19
  802100:	1c800115 	stw	r18,4(r3)
  802104:	8009883a 	mov	r4,r16
  802108:	14c00015 	stw	r19,0(r2)
  80210c:	08032880 	call	803288 <__malloc_unlock>
  802110:	00800044 	movi	r2,1
  802114:	dfc00417 	ldw	ra,16(sp)
  802118:	dcc00317 	ldw	r19,12(sp)
  80211c:	dc800217 	ldw	r18,8(sp)
  802120:	dc400117 	ldw	r17,4(sp)
  802124:	dc000017 	ldw	r16,0(sp)
  802128:	dec00504 	addi	sp,sp,20
  80212c:	f800283a 	ret
  802130:	8009883a 	mov	r4,r16
  802134:	000b883a 	mov	r5,zero
  802138:	08018840 	call	801884 <_sbrk_r>
  80213c:	88c00217 	ldw	r3,8(r17)
  802140:	014003c4 	movi	r5,15
  802144:	10c9c83a 	sub	r4,r2,r3
  802148:	293fd70e 	bge	r5,r4,8020a8 <__reset+0xff8010a8>
  80214c:	01402074 	movhi	r5,129
  802150:	29607304 	addi	r5,r5,-32308
  802154:	29400017 	ldw	r5,0(r5)
  802158:	21000054 	ori	r4,r4,1
  80215c:	19000115 	stw	r4,4(r3)
  802160:	1145c83a 	sub	r2,r2,r5
  802164:	01402074 	movhi	r5,129
  802168:	29608b04 	addi	r5,r5,-32212
  80216c:	28800015 	stw	r2,0(r5)
  802170:	003fcd06 	br	8020a8 <__reset+0xff8010a8>

00802174 <_free_r>:
  802174:	defffd04 	addi	sp,sp,-12
  802178:	dc000015 	stw	r16,0(sp)
  80217c:	dfc00215 	stw	ra,8(sp)
  802180:	dc400115 	stw	r17,4(sp)
  802184:	2821883a 	mov	r16,r5
  802188:	28004c26 	beq	r5,zero,8022bc <_free_r+0x148>
  80218c:	2023883a 	mov	r17,r4
  802190:	08032680 	call	803268 <__malloc_lock>
  802194:	823fff17 	ldw	r8,-4(r16)
  802198:	00bfff84 	movi	r2,-2
  80219c:	81bffe04 	addi	r6,r16,-8
  8021a0:	4084703a 	and	r2,r8,r2
  8021a4:	3087883a 	add	r3,r6,r2
  8021a8:	01402034 	movhi	r5,128
  8021ac:	295abb04 	addi	r5,r5,27372
  8021b0:	1a400117 	ldw	r9,4(r3)
  8021b4:	29000217 	ldw	r4,8(r5)
  8021b8:	01ffff04 	movi	r7,-4
  8021bc:	49ce703a 	and	r7,r9,r7
  8021c0:	20c06526 	beq	r4,r3,802358 <_free_r+0x1e4>
  8021c4:	19c00115 	stw	r7,4(r3)
  8021c8:	4200004c 	andi	r8,r8,1
  8021cc:	40003026 	beq	r8,zero,802290 <_free_r+0x11c>
  8021d0:	0009883a 	mov	r4,zero
  8021d4:	19d1883a 	add	r8,r3,r7
  8021d8:	42000117 	ldw	r8,4(r8)
  8021dc:	4200004c 	andi	r8,r8,1
  8021e0:	4000061e 	bne	r8,zero,8021fc <_free_r+0x88>
  8021e4:	11c5883a 	add	r2,r2,r7
  8021e8:	19c00217 	ldw	r7,8(r3)
  8021ec:	20004e26 	beq	r4,zero,802328 <_free_r+0x1b4>
  8021f0:	18c00317 	ldw	r3,12(r3)
  8021f4:	38c00315 	stw	r3,12(r7)
  8021f8:	19c00215 	stw	r7,8(r3)
  8021fc:	10c00054 	ori	r3,r2,1
  802200:	30c00115 	stw	r3,4(r6)
  802204:	3087883a 	add	r3,r6,r2
  802208:	18800015 	stw	r2,0(r3)
  80220c:	20001a1e 	bne	r4,zero,802278 <_free_r+0x104>
  802210:	00c07fc4 	movi	r3,511
  802214:	18802e2e 	bgeu	r3,r2,8022d0 <_free_r+0x15c>
  802218:	1006d27a 	srli	r3,r2,9
  80221c:	01000104 	movi	r4,4
  802220:	20c06636 	bltu	r4,r3,8023bc <_free_r+0x248>
  802224:	1008d1ba 	srli	r4,r2,6
  802228:	21000e04 	addi	r4,r4,56
  80222c:	210f883a 	add	r7,r4,r4
  802230:	39cf883a 	add	r7,r7,r7
  802234:	39cf883a 	add	r7,r7,r7
  802238:	29cf883a 	add	r7,r5,r7
  80223c:	38c00217 	ldw	r3,8(r7)
  802240:	01402034 	movhi	r5,128
  802244:	295abb04 	addi	r5,r5,27372
  802248:	19c06126 	beq	r3,r7,8023d0 <_free_r+0x25c>
  80224c:	013fff04 	movi	r4,-4
  802250:	19400117 	ldw	r5,4(r3)
  802254:	290a703a 	and	r5,r5,r4
  802258:	1140022e 	bgeu	r2,r5,802264 <_free_r+0xf0>
  80225c:	18c00217 	ldw	r3,8(r3)
  802260:	38fffb1e 	bne	r7,r3,802250 <__reset+0xff801250>
  802264:	18800317 	ldw	r2,12(r3)
  802268:	30800315 	stw	r2,12(r6)
  80226c:	30c00215 	stw	r3,8(r6)
  802270:	11800215 	stw	r6,8(r2)
  802274:	19800315 	stw	r6,12(r3)
  802278:	8809883a 	mov	r4,r17
  80227c:	dfc00217 	ldw	ra,8(sp)
  802280:	dc400117 	ldw	r17,4(sp)
  802284:	dc000017 	ldw	r16,0(sp)
  802288:	dec00304 	addi	sp,sp,12
  80228c:	08032881 	jmpi	803288 <__malloc_unlock>
  802290:	813ffe17 	ldw	r4,-8(r16)
  802294:	2a400204 	addi	r9,r5,8
  802298:	310dc83a 	sub	r6,r6,r4
  80229c:	32000217 	ldw	r8,8(r6)
  8022a0:	1105883a 	add	r2,r2,r4
  8022a4:	42404326 	beq	r8,r9,8023b4 <_free_r+0x240>
  8022a8:	32400317 	ldw	r9,12(r6)
  8022ac:	0009883a 	mov	r4,zero
  8022b0:	42400315 	stw	r9,12(r8)
  8022b4:	4a000215 	stw	r8,8(r9)
  8022b8:	003fc606 	br	8021d4 <__reset+0xff8011d4>
  8022bc:	dfc00217 	ldw	ra,8(sp)
  8022c0:	dc400117 	ldw	r17,4(sp)
  8022c4:	dc000017 	ldw	r16,0(sp)
  8022c8:	dec00304 	addi	sp,sp,12
  8022cc:	f800283a 	ret
  8022d0:	1004d0fa 	srli	r2,r2,3
  8022d4:	02000044 	movi	r8,1
  8022d8:	29c00117 	ldw	r7,4(r5)
  8022dc:	1087883a 	add	r3,r2,r2
  8022e0:	18c7883a 	add	r3,r3,r3
  8022e4:	18c7883a 	add	r3,r3,r3
  8022e8:	28c7883a 	add	r3,r5,r3
  8022ec:	1005d0ba 	srai	r2,r2,2
  8022f0:	19000217 	ldw	r4,8(r3)
  8022f4:	30c00315 	stw	r3,12(r6)
  8022f8:	4084983a 	sll	r2,r8,r2
  8022fc:	31000215 	stw	r4,8(r6)
  802300:	19800215 	stw	r6,8(r3)
  802304:	11c4b03a 	or	r2,r2,r7
  802308:	21800315 	stw	r6,12(r4)
  80230c:	8809883a 	mov	r4,r17
  802310:	28800115 	stw	r2,4(r5)
  802314:	dfc00217 	ldw	ra,8(sp)
  802318:	dc400117 	ldw	r17,4(sp)
  80231c:	dc000017 	ldw	r16,0(sp)
  802320:	dec00304 	addi	sp,sp,12
  802324:	08032881 	jmpi	803288 <__malloc_unlock>
  802328:	02002034 	movhi	r8,128
  80232c:	421abd04 	addi	r8,r8,27380
  802330:	3a3faf1e 	bne	r7,r8,8021f0 <__reset+0xff8011f0>
  802334:	29800515 	stw	r6,20(r5)
  802338:	29800415 	stw	r6,16(r5)
  80233c:	10c00054 	ori	r3,r2,1
  802340:	31c00315 	stw	r7,12(r6)
  802344:	31c00215 	stw	r7,8(r6)
  802348:	30c00115 	stw	r3,4(r6)
  80234c:	308d883a 	add	r6,r6,r2
  802350:	30800015 	stw	r2,0(r6)
  802354:	003fc806 	br	802278 <__reset+0xff801278>
  802358:	4200004c 	andi	r8,r8,1
  80235c:	3885883a 	add	r2,r7,r2
  802360:	4000071e 	bne	r8,zero,802380 <_free_r+0x20c>
  802364:	81fffe17 	ldw	r7,-8(r16)
  802368:	31cdc83a 	sub	r6,r6,r7
  80236c:	30c00317 	ldw	r3,12(r6)
  802370:	31000217 	ldw	r4,8(r6)
  802374:	11c5883a 	add	r2,r2,r7
  802378:	20c00315 	stw	r3,12(r4)
  80237c:	19000215 	stw	r4,8(r3)
  802380:	00c02074 	movhi	r3,129
  802384:	18e07404 	addi	r3,r3,-32304
  802388:	11000054 	ori	r4,r2,1
  80238c:	18c00017 	ldw	r3,0(r3)
  802390:	31000115 	stw	r4,4(r6)
  802394:	29800215 	stw	r6,8(r5)
  802398:	10ffb736 	bltu	r2,r3,802278 <__reset+0xff801278>
  80239c:	00802074 	movhi	r2,129
  8023a0:	10a08304 	addi	r2,r2,-32244
  8023a4:	11400017 	ldw	r5,0(r2)
  8023a8:	8809883a 	mov	r4,r17
  8023ac:	08020380 	call	802038 <_malloc_trim_r>
  8023b0:	003fb106 	br	802278 <__reset+0xff801278>
  8023b4:	01000044 	movi	r4,1
  8023b8:	003f8606 	br	8021d4 <__reset+0xff8011d4>
  8023bc:	01000504 	movi	r4,20
  8023c0:	20c00b36 	bltu	r4,r3,8023f0 <_free_r+0x27c>
  8023c4:	190016c4 	addi	r4,r3,91
  8023c8:	210f883a 	add	r7,r4,r4
  8023cc:	003f9806 	br	802230 <__reset+0xff801230>
  8023d0:	2009d0ba 	srai	r4,r4,2
  8023d4:	00800044 	movi	r2,1
  8023d8:	29c00117 	ldw	r7,4(r5)
  8023dc:	1108983a 	sll	r4,r2,r4
  8023e0:	1805883a 	mov	r2,r3
  8023e4:	21c8b03a 	or	r4,r4,r7
  8023e8:	29000115 	stw	r4,4(r5)
  8023ec:	003f9e06 	br	802268 <__reset+0xff801268>
  8023f0:	01001504 	movi	r4,84
  8023f4:	20c00436 	bltu	r4,r3,802408 <_free_r+0x294>
  8023f8:	1008d33a 	srli	r4,r2,12
  8023fc:	21001b84 	addi	r4,r4,110
  802400:	210f883a 	add	r7,r4,r4
  802404:	003f8a06 	br	802230 <__reset+0xff801230>
  802408:	01005504 	movi	r4,340
  80240c:	20c00436 	bltu	r4,r3,802420 <_free_r+0x2ac>
  802410:	1008d3fa 	srli	r4,r2,15
  802414:	21001dc4 	addi	r4,r4,119
  802418:	210f883a 	add	r7,r4,r4
  80241c:	003f8406 	br	802230 <__reset+0xff801230>
  802420:	01015504 	movi	r4,1364
  802424:	20c00436 	bltu	r4,r3,802438 <_free_r+0x2c4>
  802428:	1008d4ba 	srli	r4,r2,18
  80242c:	21001f04 	addi	r4,r4,124
  802430:	210f883a 	add	r7,r4,r4
  802434:	003f7e06 	br	802230 <__reset+0xff801230>
  802438:	01c03f04 	movi	r7,252
  80243c:	01001f84 	movi	r4,126
  802440:	003f7b06 	br	802230 <__reset+0xff801230>

00802444 <_fwalk>:
  802444:	defff904 	addi	sp,sp,-28
  802448:	dcc00315 	stw	r19,12(sp)
  80244c:	24c0b804 	addi	r19,r4,736
  802450:	dd400515 	stw	r21,20(sp)
  802454:	dd000415 	stw	r20,16(sp)
  802458:	dfc00615 	stw	ra,24(sp)
  80245c:	dc800215 	stw	r18,8(sp)
  802460:	dc400115 	stw	r17,4(sp)
  802464:	dc000015 	stw	r16,0(sp)
  802468:	282b883a 	mov	r21,r5
  80246c:	0029883a 	mov	r20,zero
  802470:	0801ff80 	call	801ff8 <__sfp_lock_acquire>
  802474:	98001226 	beq	r19,zero,8024c0 <_fwalk+0x7c>
  802478:	04bfffc4 	movi	r18,-1
  80247c:	9c400117 	ldw	r17,4(r19)
  802480:	9c000217 	ldw	r16,8(r19)
  802484:	8c7fffc4 	addi	r17,r17,-1
  802488:	88000b16 	blt	r17,zero,8024b8 <_fwalk+0x74>
  80248c:	84000304 	addi	r16,r16,12
  802490:	80c0000f 	ldh	r3,0(r16)
  802494:	8c7fffc4 	addi	r17,r17,-1
  802498:	813ffd04 	addi	r4,r16,-12
  80249c:	18000426 	beq	r3,zero,8024b0 <_fwalk+0x6c>
  8024a0:	80c0008f 	ldh	r3,2(r16)
  8024a4:	1c800226 	beq	r3,r18,8024b0 <_fwalk+0x6c>
  8024a8:	a83ee83a 	callr	r21
  8024ac:	a0a8b03a 	or	r20,r20,r2
  8024b0:	84001a04 	addi	r16,r16,104
  8024b4:	8cbff61e 	bne	r17,r18,802490 <__reset+0xff801490>
  8024b8:	9cc00017 	ldw	r19,0(r19)
  8024bc:	983fef1e 	bne	r19,zero,80247c <__reset+0xff80147c>
  8024c0:	0801ffc0 	call	801ffc <__sfp_lock_release>
  8024c4:	a005883a 	mov	r2,r20
  8024c8:	dfc00617 	ldw	ra,24(sp)
  8024cc:	dd400517 	ldw	r21,20(sp)
  8024d0:	dd000417 	ldw	r20,16(sp)
  8024d4:	dcc00317 	ldw	r19,12(sp)
  8024d8:	dc800217 	ldw	r18,8(sp)
  8024dc:	dc400117 	ldw	r17,4(sp)
  8024e0:	dc000017 	ldw	r16,0(sp)
  8024e4:	dec00704 	addi	sp,sp,28
  8024e8:	f800283a 	ret

008024ec <_fwalk_reent>:
  8024ec:	defff804 	addi	sp,sp,-32
  8024f0:	dcc00315 	stw	r19,12(sp)
  8024f4:	24c0b804 	addi	r19,r4,736
  8024f8:	dd800615 	stw	r22,24(sp)
  8024fc:	dd400515 	stw	r21,20(sp)
  802500:	dd000415 	stw	r20,16(sp)
  802504:	dfc00715 	stw	ra,28(sp)
  802508:	dc800215 	stw	r18,8(sp)
  80250c:	dc400115 	stw	r17,4(sp)
  802510:	dc000015 	stw	r16,0(sp)
  802514:	2029883a 	mov	r20,r4
  802518:	282b883a 	mov	r21,r5
  80251c:	002d883a 	mov	r22,zero
  802520:	0801ff80 	call	801ff8 <__sfp_lock_acquire>
  802524:	98001326 	beq	r19,zero,802574 <_fwalk_reent+0x88>
  802528:	04bfffc4 	movi	r18,-1
  80252c:	9c400117 	ldw	r17,4(r19)
  802530:	9c000217 	ldw	r16,8(r19)
  802534:	8c7fffc4 	addi	r17,r17,-1
  802538:	88000c16 	blt	r17,zero,80256c <_fwalk_reent+0x80>
  80253c:	84000304 	addi	r16,r16,12
  802540:	80c0000f 	ldh	r3,0(r16)
  802544:	8c7fffc4 	addi	r17,r17,-1
  802548:	817ffd04 	addi	r5,r16,-12
  80254c:	18000526 	beq	r3,zero,802564 <_fwalk_reent+0x78>
  802550:	80c0008f 	ldh	r3,2(r16)
  802554:	a009883a 	mov	r4,r20
  802558:	1c800226 	beq	r3,r18,802564 <_fwalk_reent+0x78>
  80255c:	a83ee83a 	callr	r21
  802560:	b0acb03a 	or	r22,r22,r2
  802564:	84001a04 	addi	r16,r16,104
  802568:	8cbff51e 	bne	r17,r18,802540 <__reset+0xff801540>
  80256c:	9cc00017 	ldw	r19,0(r19)
  802570:	983fee1e 	bne	r19,zero,80252c <__reset+0xff80152c>
  802574:	0801ffc0 	call	801ffc <__sfp_lock_release>
  802578:	b005883a 	mov	r2,r22
  80257c:	dfc00717 	ldw	ra,28(sp)
  802580:	dd800617 	ldw	r22,24(sp)
  802584:	dd400517 	ldw	r21,20(sp)
  802588:	dd000417 	ldw	r20,16(sp)
  80258c:	dcc00317 	ldw	r19,12(sp)
  802590:	dc800217 	ldw	r18,8(sp)
  802594:	dc400117 	ldw	r17,4(sp)
  802598:	dc000017 	ldw	r16,0(sp)
  80259c:	dec00804 	addi	sp,sp,32
  8025a0:	f800283a 	ret

008025a4 <__smakebuf_r>:
  8025a4:	2880030b 	ldhu	r2,12(r5)
  8025a8:	deffec04 	addi	sp,sp,-80
  8025ac:	dc000f15 	stw	r16,60(sp)
  8025b0:	dfc01315 	stw	ra,76(sp)
  8025b4:	dcc01215 	stw	r19,72(sp)
  8025b8:	dc801115 	stw	r18,68(sp)
  8025bc:	dc401015 	stw	r17,64(sp)
  8025c0:	10c0008c 	andi	r3,r2,2
  8025c4:	2821883a 	mov	r16,r5
  8025c8:	18003a1e 	bne	r3,zero,8026b4 <__smakebuf_r+0x110>
  8025cc:	2940038f 	ldh	r5,14(r5)
  8025d0:	2023883a 	mov	r17,r4
  8025d4:	28001b16 	blt	r5,zero,802644 <__smakebuf_r+0xa0>
  8025d8:	d80d883a 	mov	r6,sp
  8025dc:	0802bb40 	call	802bb4 <_fstat_r>
  8025e0:	10001716 	blt	r2,zero,802640 <__smakebuf_r+0x9c>
  8025e4:	d8800117 	ldw	r2,4(sp)
  8025e8:	00e00014 	movui	r3,32768
  8025ec:	10bc000c 	andi	r2,r2,61440
  8025f0:	10c03e26 	beq	r2,r3,8026ec <__smakebuf_r+0x148>
  8025f4:	80c0030b 	ldhu	r3,12(r16)
  8025f8:	18c20014 	ori	r3,r3,2048
  8025fc:	80c0030d 	sth	r3,12(r16)
  802600:	00c80004 	movi	r3,8192
  802604:	10c0431e 	bne	r2,r3,802714 <__smakebuf_r+0x170>
  802608:	8140038f 	ldh	r5,14(r16)
  80260c:	8809883a 	mov	r4,r17
  802610:	0802c1c0 	call	802c1c <_isatty_r>
  802614:	10004d26 	beq	r2,zero,80274c <__smakebuf_r+0x1a8>
  802618:	80c0030b 	ldhu	r3,12(r16)
  80261c:	04c00044 	movi	r19,1
  802620:	808010c4 	addi	r2,r16,67
  802624:	1cc6b03a 	or	r3,r3,r19
  802628:	80c0030d 	sth	r3,12(r16)
  80262c:	80800015 	stw	r2,0(r16)
  802630:	80800415 	stw	r2,16(r16)
  802634:	84c00515 	stw	r19,20(r16)
  802638:	04810004 	movi	r18,1024
  80263c:	00000706 	br	80265c <__smakebuf_r+0xb8>
  802640:	8080030b 	ldhu	r2,12(r16)
  802644:	10c0200c 	andi	r3,r2,128
  802648:	1800261e 	bne	r3,zero,8026e4 <__smakebuf_r+0x140>
  80264c:	04810004 	movi	r18,1024
  802650:	10820014 	ori	r2,r2,2048
  802654:	8080030d 	sth	r2,12(r16)
  802658:	0027883a 	mov	r19,zero
  80265c:	8809883a 	mov	r4,r17
  802660:	900b883a 	mov	r5,r18
  802664:	080082c0 	call	80082c <_malloc_r>
  802668:	10002d26 	beq	r2,zero,802720 <__smakebuf_r+0x17c>
  80266c:	80c0030b 	ldhu	r3,12(r16)
  802670:	01002034 	movhi	r4,128
  802674:	21072904 	addi	r4,r4,7332
  802678:	89000f15 	stw	r4,60(r17)
  80267c:	18c02014 	ori	r3,r3,128
  802680:	80c0030d 	sth	r3,12(r16)
  802684:	80800015 	stw	r2,0(r16)
  802688:	80800415 	stw	r2,16(r16)
  80268c:	84800515 	stw	r18,20(r16)
  802690:	98000d26 	beq	r19,zero,8026c8 <__smakebuf_r+0x124>
  802694:	8140038f 	ldh	r5,14(r16)
  802698:	8809883a 	mov	r4,r17
  80269c:	0802c1c0 	call	802c1c <_isatty_r>
  8026a0:	10000926 	beq	r2,zero,8026c8 <__smakebuf_r+0x124>
  8026a4:	8080030b 	ldhu	r2,12(r16)
  8026a8:	10800054 	ori	r2,r2,1
  8026ac:	8080030d 	sth	r2,12(r16)
  8026b0:	00000506 	br	8026c8 <__smakebuf_r+0x124>
  8026b4:	288010c4 	addi	r2,r5,67
  8026b8:	28800015 	stw	r2,0(r5)
  8026bc:	28800415 	stw	r2,16(r5)
  8026c0:	00800044 	movi	r2,1
  8026c4:	28800515 	stw	r2,20(r5)
  8026c8:	dfc01317 	ldw	ra,76(sp)
  8026cc:	dcc01217 	ldw	r19,72(sp)
  8026d0:	dc801117 	ldw	r18,68(sp)
  8026d4:	dc401017 	ldw	r17,64(sp)
  8026d8:	dc000f17 	ldw	r16,60(sp)
  8026dc:	dec01404 	addi	sp,sp,80
  8026e0:	f800283a 	ret
  8026e4:	04801004 	movi	r18,64
  8026e8:	003fd906 	br	802650 <__reset+0xff801650>
  8026ec:	81000a17 	ldw	r4,40(r16)
  8026f0:	00c02034 	movhi	r3,128
  8026f4:	18ca5104 	addi	r3,r3,10564
  8026f8:	20ffbe1e 	bne	r4,r3,8025f4 <__reset+0xff8015f4>
  8026fc:	80c0030b 	ldhu	r3,12(r16)
  802700:	01010004 	movi	r4,1024
  802704:	81001315 	stw	r4,76(r16)
  802708:	1906b03a 	or	r3,r3,r4
  80270c:	80c0030d 	sth	r3,12(r16)
  802710:	003fbb06 	br	802600 <__reset+0xff801600>
  802714:	0027883a 	mov	r19,zero
  802718:	04810004 	movi	r18,1024
  80271c:	003fcf06 	br	80265c <__reset+0xff80165c>
  802720:	8080030b 	ldhu	r2,12(r16)
  802724:	10c0800c 	andi	r3,r2,512
  802728:	183fe71e 	bne	r3,zero,8026c8 <__reset+0xff8016c8>
  80272c:	10800094 	ori	r2,r2,2
  802730:	80c010c4 	addi	r3,r16,67
  802734:	8080030d 	sth	r2,12(r16)
  802738:	00800044 	movi	r2,1
  80273c:	80c00015 	stw	r3,0(r16)
  802740:	80c00415 	stw	r3,16(r16)
  802744:	80800515 	stw	r2,20(r16)
  802748:	003fdf06 	br	8026c8 <__reset+0xff8016c8>
  80274c:	04c00044 	movi	r19,1
  802750:	04810004 	movi	r18,1024
  802754:	003fc106 	br	80265c <__reset+0xff80165c>

00802758 <memset>:
  802758:	20c000cc 	andi	r3,r4,3
  80275c:	2005883a 	mov	r2,r4
  802760:	18003f26 	beq	r3,zero,802860 <memset+0x108>
  802764:	31ffffc4 	addi	r7,r6,-1
  802768:	30003b26 	beq	r6,zero,802858 <memset+0x100>
  80276c:	2813883a 	mov	r9,r5
  802770:	200d883a 	mov	r6,r4
  802774:	2007883a 	mov	r3,r4
  802778:	00000406 	br	80278c <memset+0x34>
  80277c:	3a3fffc4 	addi	r8,r7,-1
  802780:	31800044 	addi	r6,r6,1
  802784:	38003426 	beq	r7,zero,802858 <memset+0x100>
  802788:	400f883a 	mov	r7,r8
  80278c:	18c00044 	addi	r3,r3,1
  802790:	32400005 	stb	r9,0(r6)
  802794:	1a0000cc 	andi	r8,r3,3
  802798:	403ff81e 	bne	r8,zero,80277c <__reset+0xff80177c>
  80279c:	010000c4 	movi	r4,3
  8027a0:	21c0282e 	bgeu	r4,r7,802844 <memset+0xec>
  8027a4:	29003fcc 	andi	r4,r5,255
  8027a8:	2010923a 	slli	r8,r4,8
  8027ac:	4108b03a 	or	r4,r8,r4
  8027b0:	2010943a 	slli	r8,r4,16
  8027b4:	4110b03a 	or	r8,r8,r4
  8027b8:	010003c4 	movi	r4,15
  8027bc:	21c0122e 	bgeu	r4,r7,802808 <memset+0xb0>
  8027c0:	3a7ffc04 	addi	r9,r7,-16
  8027c4:	4812d13a 	srli	r9,r9,4
  8027c8:	19000404 	addi	r4,r3,16
  8027cc:	180d883a 	mov	r6,r3
  8027d0:	4814913a 	slli	r10,r9,4
  8027d4:	2289883a 	add	r4,r4,r10
  8027d8:	32000015 	stw	r8,0(r6)
  8027dc:	32000115 	stw	r8,4(r6)
  8027e0:	32000215 	stw	r8,8(r6)
  8027e4:	32000315 	stw	r8,12(r6)
  8027e8:	31800404 	addi	r6,r6,16
  8027ec:	313ffa1e 	bne	r6,r4,8027d8 <__reset+0xff8017d8>
  8027f0:	4a400044 	addi	r9,r9,1
  8027f4:	4812913a 	slli	r9,r9,4
  8027f8:	39c003cc 	andi	r7,r7,15
  8027fc:	010000c4 	movi	r4,3
  802800:	1a47883a 	add	r3,r3,r9
  802804:	21c00f2e 	bgeu	r4,r7,802844 <memset+0xec>
  802808:	3a7fff04 	addi	r9,r7,-4
  80280c:	4812d0ba 	srli	r9,r9,2
  802810:	19000104 	addi	r4,r3,4
  802814:	180d883a 	mov	r6,r3
  802818:	4a55883a 	add	r10,r9,r9
  80281c:	5295883a 	add	r10,r10,r10
  802820:	2289883a 	add	r4,r4,r10
  802824:	32000015 	stw	r8,0(r6)
  802828:	31800104 	addi	r6,r6,4
  80282c:	313ffd1e 	bne	r6,r4,802824 <__reset+0xff801824>
  802830:	4a400044 	addi	r9,r9,1
  802834:	4a53883a 	add	r9,r9,r9
  802838:	4a53883a 	add	r9,r9,r9
  80283c:	1a47883a 	add	r3,r3,r9
  802840:	39c000cc 	andi	r7,r7,3
  802844:	38000526 	beq	r7,zero,80285c <memset+0x104>
  802848:	19cf883a 	add	r7,r3,r7
  80284c:	19400005 	stb	r5,0(r3)
  802850:	18c00044 	addi	r3,r3,1
  802854:	19fffd1e 	bne	r3,r7,80284c <__reset+0xff80184c>
  802858:	f800283a 	ret
  80285c:	f800283a 	ret
  802860:	2007883a 	mov	r3,r4
  802864:	300f883a 	mov	r7,r6
  802868:	003fcc06 	br	80279c <__reset+0xff80179c>

0080286c <__sread>:
  80286c:	defffe04 	addi	sp,sp,-8
  802870:	dc000015 	stw	r16,0(sp)
  802874:	2821883a 	mov	r16,r5
  802878:	2940038f 	ldh	r5,14(r5)
  80287c:	dfc00115 	stw	ra,4(sp)
  802880:	0802cec0 	call	802cec <_read_r>
  802884:	10000716 	blt	r2,zero,8028a4 <__sread+0x38>
  802888:	80c01417 	ldw	r3,80(r16)
  80288c:	1887883a 	add	r3,r3,r2
  802890:	80c01415 	stw	r3,80(r16)
  802894:	dfc00117 	ldw	ra,4(sp)
  802898:	dc000017 	ldw	r16,0(sp)
  80289c:	dec00204 	addi	sp,sp,8
  8028a0:	f800283a 	ret
  8028a4:	80c0030b 	ldhu	r3,12(r16)
  8028a8:	18fbffcc 	andi	r3,r3,61439
  8028ac:	80c0030d 	sth	r3,12(r16)
  8028b0:	dfc00117 	ldw	ra,4(sp)
  8028b4:	dc000017 	ldw	r16,0(sp)
  8028b8:	dec00204 	addi	sp,sp,8
  8028bc:	f800283a 	ret

008028c0 <__seofread>:
  8028c0:	0005883a 	mov	r2,zero
  8028c4:	f800283a 	ret

008028c8 <__swrite>:
  8028c8:	2880030b 	ldhu	r2,12(r5)
  8028cc:	defffb04 	addi	sp,sp,-20
  8028d0:	dcc00315 	stw	r19,12(sp)
  8028d4:	dc800215 	stw	r18,8(sp)
  8028d8:	dc400115 	stw	r17,4(sp)
  8028dc:	dc000015 	stw	r16,0(sp)
  8028e0:	dfc00415 	stw	ra,16(sp)
  8028e4:	10c0400c 	andi	r3,r2,256
  8028e8:	2821883a 	mov	r16,r5
  8028ec:	2027883a 	mov	r19,r4
  8028f0:	3025883a 	mov	r18,r6
  8028f4:	3823883a 	mov	r17,r7
  8028f8:	18000526 	beq	r3,zero,802910 <__swrite+0x48>
  8028fc:	2940038f 	ldh	r5,14(r5)
  802900:	000d883a 	mov	r6,zero
  802904:	01c00084 	movi	r7,2
  802908:	0802c800 	call	802c80 <_lseek_r>
  80290c:	8080030b 	ldhu	r2,12(r16)
  802910:	8140038f 	ldh	r5,14(r16)
  802914:	10bbffcc 	andi	r2,r2,61439
  802918:	9809883a 	mov	r4,r19
  80291c:	900d883a 	mov	r6,r18
  802920:	880f883a 	mov	r7,r17
  802924:	8080030d 	sth	r2,12(r16)
  802928:	dfc00417 	ldw	ra,16(sp)
  80292c:	dcc00317 	ldw	r19,12(sp)
  802930:	dc800217 	ldw	r18,8(sp)
  802934:	dc400117 	ldw	r17,4(sp)
  802938:	dc000017 	ldw	r16,0(sp)
  80293c:	dec00504 	addi	sp,sp,20
  802940:	08029a81 	jmpi	8029a8 <_write_r>

00802944 <__sseek>:
  802944:	defffe04 	addi	sp,sp,-8
  802948:	dc000015 	stw	r16,0(sp)
  80294c:	2821883a 	mov	r16,r5
  802950:	2940038f 	ldh	r5,14(r5)
  802954:	dfc00115 	stw	ra,4(sp)
  802958:	0802c800 	call	802c80 <_lseek_r>
  80295c:	00ffffc4 	movi	r3,-1
  802960:	10c00826 	beq	r2,r3,802984 <__sseek+0x40>
  802964:	80c0030b 	ldhu	r3,12(r16)
  802968:	80801415 	stw	r2,80(r16)
  80296c:	18c40014 	ori	r3,r3,4096
  802970:	80c0030d 	sth	r3,12(r16)
  802974:	dfc00117 	ldw	ra,4(sp)
  802978:	dc000017 	ldw	r16,0(sp)
  80297c:	dec00204 	addi	sp,sp,8
  802980:	f800283a 	ret
  802984:	80c0030b 	ldhu	r3,12(r16)
  802988:	18fbffcc 	andi	r3,r3,61439
  80298c:	80c0030d 	sth	r3,12(r16)
  802990:	dfc00117 	ldw	ra,4(sp)
  802994:	dc000017 	ldw	r16,0(sp)
  802998:	dec00204 	addi	sp,sp,8
  80299c:	f800283a 	ret

008029a0 <__sclose>:
  8029a0:	2940038f 	ldh	r5,14(r5)
  8029a4:	0802a141 	jmpi	802a14 <_close_r>

008029a8 <_write_r>:
  8029a8:	defffd04 	addi	sp,sp,-12
  8029ac:	dc400115 	stw	r17,4(sp)
  8029b0:	dc000015 	stw	r16,0(sp)
  8029b4:	2023883a 	mov	r17,r4
  8029b8:	04002074 	movhi	r16,129
  8029bc:	84208404 	addi	r16,r16,-32240
  8029c0:	2809883a 	mov	r4,r5
  8029c4:	300b883a 	mov	r5,r6
  8029c8:	380d883a 	mov	r6,r7
  8029cc:	dfc00215 	stw	ra,8(sp)
  8029d0:	80000015 	stw	zero,0(r16)
  8029d4:	08035700 	call	803570 <write>
  8029d8:	00ffffc4 	movi	r3,-1
  8029dc:	10c00526 	beq	r2,r3,8029f4 <_write_r+0x4c>
  8029e0:	dfc00217 	ldw	ra,8(sp)
  8029e4:	dc400117 	ldw	r17,4(sp)
  8029e8:	dc000017 	ldw	r16,0(sp)
  8029ec:	dec00304 	addi	sp,sp,12
  8029f0:	f800283a 	ret
  8029f4:	80c00017 	ldw	r3,0(r16)
  8029f8:	183ff926 	beq	r3,zero,8029e0 <__reset+0xff8019e0>
  8029fc:	88c00015 	stw	r3,0(r17)
  802a00:	dfc00217 	ldw	ra,8(sp)
  802a04:	dc400117 	ldw	r17,4(sp)
  802a08:	dc000017 	ldw	r16,0(sp)
  802a0c:	dec00304 	addi	sp,sp,12
  802a10:	f800283a 	ret

00802a14 <_close_r>:
  802a14:	defffd04 	addi	sp,sp,-12
  802a18:	dc400115 	stw	r17,4(sp)
  802a1c:	dc000015 	stw	r16,0(sp)
  802a20:	2023883a 	mov	r17,r4
  802a24:	04002074 	movhi	r16,129
  802a28:	84208404 	addi	r16,r16,-32240
  802a2c:	2809883a 	mov	r4,r5
  802a30:	dfc00215 	stw	ra,8(sp)
  802a34:	80000015 	stw	zero,0(r16)
  802a38:	0802dd00 	call	802dd0 <close>
  802a3c:	00ffffc4 	movi	r3,-1
  802a40:	10c00526 	beq	r2,r3,802a58 <_close_r+0x44>
  802a44:	dfc00217 	ldw	ra,8(sp)
  802a48:	dc400117 	ldw	r17,4(sp)
  802a4c:	dc000017 	ldw	r16,0(sp)
  802a50:	dec00304 	addi	sp,sp,12
  802a54:	f800283a 	ret
  802a58:	80c00017 	ldw	r3,0(r16)
  802a5c:	183ff926 	beq	r3,zero,802a44 <__reset+0xff801a44>
  802a60:	88c00015 	stw	r3,0(r17)
  802a64:	dfc00217 	ldw	ra,8(sp)
  802a68:	dc400117 	ldw	r17,4(sp)
  802a6c:	dc000017 	ldw	r16,0(sp)
  802a70:	dec00304 	addi	sp,sp,12
  802a74:	f800283a 	ret

00802a78 <_fclose_r>:
  802a78:	defffc04 	addi	sp,sp,-16
  802a7c:	dc000015 	stw	r16,0(sp)
  802a80:	dfc00315 	stw	ra,12(sp)
  802a84:	dc800215 	stw	r18,8(sp)
  802a88:	dc400115 	stw	r17,4(sp)
  802a8c:	2821883a 	mov	r16,r5
  802a90:	28003126 	beq	r5,zero,802b58 <_fclose_r+0xe0>
  802a94:	2023883a 	mov	r17,r4
  802a98:	0801ff80 	call	801ff8 <__sfp_lock_acquire>
  802a9c:	88000226 	beq	r17,zero,802aa8 <_fclose_r+0x30>
  802aa0:	88800e17 	ldw	r2,56(r17)
  802aa4:	10003326 	beq	r2,zero,802b74 <_fclose_r+0xfc>
  802aa8:	8080030f 	ldh	r2,12(r16)
  802aac:	10002226 	beq	r2,zero,802b38 <_fclose_r+0xc0>
  802ab0:	8809883a 	mov	r4,r17
  802ab4:	800b883a 	mov	r5,r16
  802ab8:	0801a200 	call	801a20 <_fflush_r>
  802abc:	80c00b17 	ldw	r3,44(r16)
  802ac0:	1025883a 	mov	r18,r2
  802ac4:	18000426 	beq	r3,zero,802ad8 <_fclose_r+0x60>
  802ac8:	81400717 	ldw	r5,28(r16)
  802acc:	8809883a 	mov	r4,r17
  802ad0:	183ee83a 	callr	r3
  802ad4:	10003016 	blt	r2,zero,802b98 <_fclose_r+0x120>
  802ad8:	8080030b 	ldhu	r2,12(r16)
  802adc:	1080200c 	andi	r2,r2,128
  802ae0:	1000291e 	bne	r2,zero,802b88 <_fclose_r+0x110>
  802ae4:	81400c17 	ldw	r5,48(r16)
  802ae8:	28000526 	beq	r5,zero,802b00 <_fclose_r+0x88>
  802aec:	80801004 	addi	r2,r16,64
  802af0:	28800226 	beq	r5,r2,802afc <_fclose_r+0x84>
  802af4:	8809883a 	mov	r4,r17
  802af8:	08021740 	call	802174 <_free_r>
  802afc:	80000c15 	stw	zero,48(r16)
  802b00:	81401117 	ldw	r5,68(r16)
  802b04:	28000326 	beq	r5,zero,802b14 <_fclose_r+0x9c>
  802b08:	8809883a 	mov	r4,r17
  802b0c:	08021740 	call	802174 <_free_r>
  802b10:	80001115 	stw	zero,68(r16)
  802b14:	8000030d 	sth	zero,12(r16)
  802b18:	0801ffc0 	call	801ffc <__sfp_lock_release>
  802b1c:	9005883a 	mov	r2,r18
  802b20:	dfc00317 	ldw	ra,12(sp)
  802b24:	dc800217 	ldw	r18,8(sp)
  802b28:	dc400117 	ldw	r17,4(sp)
  802b2c:	dc000017 	ldw	r16,0(sp)
  802b30:	dec00404 	addi	sp,sp,16
  802b34:	f800283a 	ret
  802b38:	0801ffc0 	call	801ffc <__sfp_lock_release>
  802b3c:	0005883a 	mov	r2,zero
  802b40:	dfc00317 	ldw	ra,12(sp)
  802b44:	dc800217 	ldw	r18,8(sp)
  802b48:	dc400117 	ldw	r17,4(sp)
  802b4c:	dc000017 	ldw	r16,0(sp)
  802b50:	dec00404 	addi	sp,sp,16
  802b54:	f800283a 	ret
  802b58:	0005883a 	mov	r2,zero
  802b5c:	dfc00317 	ldw	ra,12(sp)
  802b60:	dc800217 	ldw	r18,8(sp)
  802b64:	dc400117 	ldw	r17,4(sp)
  802b68:	dc000017 	ldw	r16,0(sp)
  802b6c:	dec00404 	addi	sp,sp,16
  802b70:	f800283a 	ret
  802b74:	8809883a 	mov	r4,r17
  802b78:	0801d400 	call	801d40 <__sinit>
  802b7c:	8080030f 	ldh	r2,12(r16)
  802b80:	103fcb1e 	bne	r2,zero,802ab0 <__reset+0xff801ab0>
  802b84:	003fec06 	br	802b38 <__reset+0xff801b38>
  802b88:	81400417 	ldw	r5,16(r16)
  802b8c:	8809883a 	mov	r4,r17
  802b90:	08021740 	call	802174 <_free_r>
  802b94:	003fd306 	br	802ae4 <__reset+0xff801ae4>
  802b98:	04bfffc4 	movi	r18,-1
  802b9c:	003fce06 	br	802ad8 <__reset+0xff801ad8>

00802ba0 <fclose>:
  802ba0:	00802074 	movhi	r2,129
  802ba4:	10a07204 	addi	r2,r2,-32312
  802ba8:	200b883a 	mov	r5,r4
  802bac:	11000017 	ldw	r4,0(r2)
  802bb0:	0802a781 	jmpi	802a78 <_fclose_r>

00802bb4 <_fstat_r>:
  802bb4:	defffd04 	addi	sp,sp,-12
  802bb8:	dc400115 	stw	r17,4(sp)
  802bbc:	dc000015 	stw	r16,0(sp)
  802bc0:	2023883a 	mov	r17,r4
  802bc4:	04002074 	movhi	r16,129
  802bc8:	84208404 	addi	r16,r16,-32240
  802bcc:	2809883a 	mov	r4,r5
  802bd0:	300b883a 	mov	r5,r6
  802bd4:	dfc00215 	stw	ra,8(sp)
  802bd8:	80000015 	stw	zero,0(r16)
  802bdc:	0802f1c0 	call	802f1c <fstat>
  802be0:	00ffffc4 	movi	r3,-1
  802be4:	10c00526 	beq	r2,r3,802bfc <_fstat_r+0x48>
  802be8:	dfc00217 	ldw	ra,8(sp)
  802bec:	dc400117 	ldw	r17,4(sp)
  802bf0:	dc000017 	ldw	r16,0(sp)
  802bf4:	dec00304 	addi	sp,sp,12
  802bf8:	f800283a 	ret
  802bfc:	80c00017 	ldw	r3,0(r16)
  802c00:	183ff926 	beq	r3,zero,802be8 <__reset+0xff801be8>
  802c04:	88c00015 	stw	r3,0(r17)
  802c08:	dfc00217 	ldw	ra,8(sp)
  802c0c:	dc400117 	ldw	r17,4(sp)
  802c10:	dc000017 	ldw	r16,0(sp)
  802c14:	dec00304 	addi	sp,sp,12
  802c18:	f800283a 	ret

00802c1c <_isatty_r>:
  802c1c:	defffd04 	addi	sp,sp,-12
  802c20:	dc400115 	stw	r17,4(sp)
  802c24:	dc000015 	stw	r16,0(sp)
  802c28:	2023883a 	mov	r17,r4
  802c2c:	04002074 	movhi	r16,129
  802c30:	84208404 	addi	r16,r16,-32240
  802c34:	2809883a 	mov	r4,r5
  802c38:	dfc00215 	stw	ra,8(sp)
  802c3c:	80000015 	stw	zero,0(r16)
  802c40:	08030200 	call	803020 <isatty>
  802c44:	00ffffc4 	movi	r3,-1
  802c48:	10c00526 	beq	r2,r3,802c60 <_isatty_r+0x44>
  802c4c:	dfc00217 	ldw	ra,8(sp)
  802c50:	dc400117 	ldw	r17,4(sp)
  802c54:	dc000017 	ldw	r16,0(sp)
  802c58:	dec00304 	addi	sp,sp,12
  802c5c:	f800283a 	ret
  802c60:	80c00017 	ldw	r3,0(r16)
  802c64:	183ff926 	beq	r3,zero,802c4c <__reset+0xff801c4c>
  802c68:	88c00015 	stw	r3,0(r17)
  802c6c:	dfc00217 	ldw	ra,8(sp)
  802c70:	dc400117 	ldw	r17,4(sp)
  802c74:	dc000017 	ldw	r16,0(sp)
  802c78:	dec00304 	addi	sp,sp,12
  802c7c:	f800283a 	ret

00802c80 <_lseek_r>:
  802c80:	defffd04 	addi	sp,sp,-12
  802c84:	dc400115 	stw	r17,4(sp)
  802c88:	dc000015 	stw	r16,0(sp)
  802c8c:	2023883a 	mov	r17,r4
  802c90:	04002074 	movhi	r16,129
  802c94:	84208404 	addi	r16,r16,-32240
  802c98:	2809883a 	mov	r4,r5
  802c9c:	300b883a 	mov	r5,r6
  802ca0:	380d883a 	mov	r6,r7
  802ca4:	dfc00215 	stw	ra,8(sp)
  802ca8:	80000015 	stw	zero,0(r16)
  802cac:	08031180 	call	803118 <lseek>
  802cb0:	00ffffc4 	movi	r3,-1
  802cb4:	10c00526 	beq	r2,r3,802ccc <_lseek_r+0x4c>
  802cb8:	dfc00217 	ldw	ra,8(sp)
  802cbc:	dc400117 	ldw	r17,4(sp)
  802cc0:	dc000017 	ldw	r16,0(sp)
  802cc4:	dec00304 	addi	sp,sp,12
  802cc8:	f800283a 	ret
  802ccc:	80c00017 	ldw	r3,0(r16)
  802cd0:	183ff926 	beq	r3,zero,802cb8 <__reset+0xff801cb8>
  802cd4:	88c00015 	stw	r3,0(r17)
  802cd8:	dfc00217 	ldw	ra,8(sp)
  802cdc:	dc400117 	ldw	r17,4(sp)
  802ce0:	dc000017 	ldw	r16,0(sp)
  802ce4:	dec00304 	addi	sp,sp,12
  802ce8:	f800283a 	ret

00802cec <_read_r>:
  802cec:	defffd04 	addi	sp,sp,-12
  802cf0:	dc400115 	stw	r17,4(sp)
  802cf4:	dc000015 	stw	r16,0(sp)
  802cf8:	2023883a 	mov	r17,r4
  802cfc:	04002074 	movhi	r16,129
  802d00:	84208404 	addi	r16,r16,-32240
  802d04:	2809883a 	mov	r4,r5
  802d08:	300b883a 	mov	r5,r6
  802d0c:	380d883a 	mov	r6,r7
  802d10:	dfc00215 	stw	ra,8(sp)
  802d14:	80000015 	stw	zero,0(r16)
  802d18:	08032f80 	call	8032f8 <read>
  802d1c:	00ffffc4 	movi	r3,-1
  802d20:	10c00526 	beq	r2,r3,802d38 <_read_r+0x4c>
  802d24:	dfc00217 	ldw	ra,8(sp)
  802d28:	dc400117 	ldw	r17,4(sp)
  802d2c:	dc000017 	ldw	r16,0(sp)
  802d30:	dec00304 	addi	sp,sp,12
  802d34:	f800283a 	ret
  802d38:	80c00017 	ldw	r3,0(r16)
  802d3c:	183ff926 	beq	r3,zero,802d24 <__reset+0xff801d24>
  802d40:	88c00015 	stw	r3,0(r17)
  802d44:	dfc00217 	ldw	ra,8(sp)
  802d48:	dc400117 	ldw	r17,4(sp)
  802d4c:	dc000017 	ldw	r16,0(sp)
  802d50:	dec00304 	addi	sp,sp,12
  802d54:	f800283a 	ret

00802d58 <__mulsi3>:
  802d58:	0005883a 	mov	r2,zero
  802d5c:	20000726 	beq	r4,zero,802d7c <__mulsi3+0x24>
  802d60:	20c0004c 	andi	r3,r4,1
  802d64:	2008d07a 	srli	r4,r4,1
  802d68:	18000126 	beq	r3,zero,802d70 <__mulsi3+0x18>
  802d6c:	1145883a 	add	r2,r2,r5
  802d70:	294b883a 	add	r5,r5,r5
  802d74:	203ffa1e 	bne	r4,zero,802d60 <__reset+0xff801d60>
  802d78:	f800283a 	ret
  802d7c:	f800283a 	ret

00802d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802d80:	defffe04 	addi	sp,sp,-8
  802d84:	dfc00115 	stw	ra,4(sp)
  802d88:	df000015 	stw	fp,0(sp)
  802d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802d90:	00802074 	movhi	r2,129
  802d94:	10a07a04 	addi	r2,r2,-32280
  802d98:	10800017 	ldw	r2,0(r2)
  802d9c:	10000526 	beq	r2,zero,802db4 <alt_get_errno+0x34>
  802da0:	00802074 	movhi	r2,129
  802da4:	10a07a04 	addi	r2,r2,-32280
  802da8:	10800017 	ldw	r2,0(r2)
  802dac:	103ee83a 	callr	r2
  802db0:	00000206 	br	802dbc <alt_get_errno+0x3c>
  802db4:	00802074 	movhi	r2,129
  802db8:	10a08404 	addi	r2,r2,-32240
}
  802dbc:	e037883a 	mov	sp,fp
  802dc0:	dfc00117 	ldw	ra,4(sp)
  802dc4:	df000017 	ldw	fp,0(sp)
  802dc8:	dec00204 	addi	sp,sp,8
  802dcc:	f800283a 	ret

00802dd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802dd0:	defffb04 	addi	sp,sp,-20
  802dd4:	dfc00415 	stw	ra,16(sp)
  802dd8:	df000315 	stw	fp,12(sp)
  802ddc:	df000304 	addi	fp,sp,12
  802de0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802de4:	e0bfff17 	ldw	r2,-4(fp)
  802de8:	10000816 	blt	r2,zero,802e0c <close+0x3c>
  802dec:	e13fff17 	ldw	r4,-4(fp)
  802df0:	01400304 	movi	r5,12
  802df4:	0802d580 	call	802d58 <__mulsi3>
  802df8:	1007883a 	mov	r3,r2
  802dfc:	00802034 	movhi	r2,128
  802e00:	109bc704 	addi	r2,r2,28444
  802e04:	1885883a 	add	r2,r3,r2
  802e08:	00000106 	br	802e10 <close+0x40>
  802e0c:	0005883a 	mov	r2,zero
  802e10:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802e14:	e0bffd17 	ldw	r2,-12(fp)
  802e18:	10001826 	beq	r2,zero,802e7c <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802e1c:	e0bffd17 	ldw	r2,-12(fp)
  802e20:	10800017 	ldw	r2,0(r2)
  802e24:	10800417 	ldw	r2,16(r2)
  802e28:	10000626 	beq	r2,zero,802e44 <close+0x74>
  802e2c:	e0bffd17 	ldw	r2,-12(fp)
  802e30:	10800017 	ldw	r2,0(r2)
  802e34:	10800417 	ldw	r2,16(r2)
  802e38:	e13ffd17 	ldw	r4,-12(fp)
  802e3c:	103ee83a 	callr	r2
  802e40:	00000106 	br	802e48 <close+0x78>
  802e44:	0005883a 	mov	r2,zero
  802e48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802e4c:	e13fff17 	ldw	r4,-4(fp)
  802e50:	08033f00 	call	8033f0 <alt_release_fd>
    if (rval < 0)
  802e54:	e0bffe17 	ldw	r2,-8(fp)
  802e58:	1000060e 	bge	r2,zero,802e74 <close+0xa4>
    {
      ALT_ERRNO = -rval;
  802e5c:	0802d800 	call	802d80 <alt_get_errno>
  802e60:	e0fffe17 	ldw	r3,-8(fp)
  802e64:	00c7c83a 	sub	r3,zero,r3
  802e68:	10c00015 	stw	r3,0(r2)
      return -1;
  802e6c:	00bfffc4 	movi	r2,-1
  802e70:	00000606 	br	802e8c <close+0xbc>
    }
    return 0;
  802e74:	0005883a 	mov	r2,zero
  802e78:	00000406 	br	802e8c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802e7c:	0802d800 	call	802d80 <alt_get_errno>
  802e80:	00c01444 	movi	r3,81
  802e84:	10c00015 	stw	r3,0(r2)
    return -1;
  802e88:	00bfffc4 	movi	r2,-1
  }
}
  802e8c:	e037883a 	mov	sp,fp
  802e90:	dfc00117 	ldw	ra,4(sp)
  802e94:	df000017 	ldw	fp,0(sp)
  802e98:	dec00204 	addi	sp,sp,8
  802e9c:	f800283a 	ret

00802ea0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802ea0:	defffc04 	addi	sp,sp,-16
  802ea4:	df000315 	stw	fp,12(sp)
  802ea8:	df000304 	addi	fp,sp,12
  802eac:	e13ffd15 	stw	r4,-12(fp)
  802eb0:	e17ffe15 	stw	r5,-8(fp)
  802eb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802eb8:	e0bfff17 	ldw	r2,-4(fp)
}
  802ebc:	e037883a 	mov	sp,fp
  802ec0:	df000017 	ldw	fp,0(sp)
  802ec4:	dec00104 	addi	sp,sp,4
  802ec8:	f800283a 	ret

00802ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802ecc:	defffe04 	addi	sp,sp,-8
  802ed0:	dfc00115 	stw	ra,4(sp)
  802ed4:	df000015 	stw	fp,0(sp)
  802ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802edc:	00802074 	movhi	r2,129
  802ee0:	10a07a04 	addi	r2,r2,-32280
  802ee4:	10800017 	ldw	r2,0(r2)
  802ee8:	10000526 	beq	r2,zero,802f00 <alt_get_errno+0x34>
  802eec:	00802074 	movhi	r2,129
  802ef0:	10a07a04 	addi	r2,r2,-32280
  802ef4:	10800017 	ldw	r2,0(r2)
  802ef8:	103ee83a 	callr	r2
  802efc:	00000206 	br	802f08 <alt_get_errno+0x3c>
  802f00:	00802074 	movhi	r2,129
  802f04:	10a08404 	addi	r2,r2,-32240
}
  802f08:	e037883a 	mov	sp,fp
  802f0c:	dfc00117 	ldw	ra,4(sp)
  802f10:	df000017 	ldw	fp,0(sp)
  802f14:	dec00204 	addi	sp,sp,8
  802f18:	f800283a 	ret

00802f1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  802f1c:	defffb04 	addi	sp,sp,-20
  802f20:	dfc00415 	stw	ra,16(sp)
  802f24:	df000315 	stw	fp,12(sp)
  802f28:	df000304 	addi	fp,sp,12
  802f2c:	e13ffe15 	stw	r4,-8(fp)
  802f30:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802f34:	e0bffe17 	ldw	r2,-8(fp)
  802f38:	10000816 	blt	r2,zero,802f5c <fstat+0x40>
  802f3c:	e13ffe17 	ldw	r4,-8(fp)
  802f40:	01400304 	movi	r5,12
  802f44:	0802d580 	call	802d58 <__mulsi3>
  802f48:	1007883a 	mov	r3,r2
  802f4c:	00802034 	movhi	r2,128
  802f50:	109bc704 	addi	r2,r2,28444
  802f54:	1885883a 	add	r2,r3,r2
  802f58:	00000106 	br	802f60 <fstat+0x44>
  802f5c:	0005883a 	mov	r2,zero
  802f60:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  802f64:	e0bffd17 	ldw	r2,-12(fp)
  802f68:	10001026 	beq	r2,zero,802fac <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  802f6c:	e0bffd17 	ldw	r2,-12(fp)
  802f70:	10800017 	ldw	r2,0(r2)
  802f74:	10800817 	ldw	r2,32(r2)
  802f78:	10000726 	beq	r2,zero,802f98 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  802f7c:	e0bffd17 	ldw	r2,-12(fp)
  802f80:	10800017 	ldw	r2,0(r2)
  802f84:	10800817 	ldw	r2,32(r2)
  802f88:	e13ffd17 	ldw	r4,-12(fp)
  802f8c:	e17fff17 	ldw	r5,-4(fp)
  802f90:	103ee83a 	callr	r2
  802f94:	00000906 	br	802fbc <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  802f98:	e0bfff17 	ldw	r2,-4(fp)
  802f9c:	00c80004 	movi	r3,8192
  802fa0:	10c00115 	stw	r3,4(r2)
      return 0;
  802fa4:	0005883a 	mov	r2,zero
  802fa8:	00000406 	br	802fbc <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802fac:	0802ecc0 	call	802ecc <alt_get_errno>
  802fb0:	00c01444 	movi	r3,81
  802fb4:	10c00015 	stw	r3,0(r2)
    return -1;
  802fb8:	00bfffc4 	movi	r2,-1
  }
}
  802fbc:	e037883a 	mov	sp,fp
  802fc0:	dfc00117 	ldw	ra,4(sp)
  802fc4:	df000017 	ldw	fp,0(sp)
  802fc8:	dec00204 	addi	sp,sp,8
  802fcc:	f800283a 	ret

00802fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802fd0:	defffe04 	addi	sp,sp,-8
  802fd4:	dfc00115 	stw	ra,4(sp)
  802fd8:	df000015 	stw	fp,0(sp)
  802fdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802fe0:	00802074 	movhi	r2,129
  802fe4:	10a07a04 	addi	r2,r2,-32280
  802fe8:	10800017 	ldw	r2,0(r2)
  802fec:	10000526 	beq	r2,zero,803004 <alt_get_errno+0x34>
  802ff0:	00802074 	movhi	r2,129
  802ff4:	10a07a04 	addi	r2,r2,-32280
  802ff8:	10800017 	ldw	r2,0(r2)
  802ffc:	103ee83a 	callr	r2
  803000:	00000206 	br	80300c <alt_get_errno+0x3c>
  803004:	00802074 	movhi	r2,129
  803008:	10a08404 	addi	r2,r2,-32240
}
  80300c:	e037883a 	mov	sp,fp
  803010:	dfc00117 	ldw	ra,4(sp)
  803014:	df000017 	ldw	fp,0(sp)
  803018:	dec00204 	addi	sp,sp,8
  80301c:	f800283a 	ret

00803020 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803020:	deffed04 	addi	sp,sp,-76
  803024:	dfc01215 	stw	ra,72(sp)
  803028:	df001115 	stw	fp,68(sp)
  80302c:	df001104 	addi	fp,sp,68
  803030:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803034:	e0bfff17 	ldw	r2,-4(fp)
  803038:	10000816 	blt	r2,zero,80305c <isatty+0x3c>
  80303c:	e13fff17 	ldw	r4,-4(fp)
  803040:	01400304 	movi	r5,12
  803044:	0802d580 	call	802d58 <__mulsi3>
  803048:	1007883a 	mov	r3,r2
  80304c:	00802034 	movhi	r2,128
  803050:	109bc704 	addi	r2,r2,28444
  803054:	1885883a 	add	r2,r3,r2
  803058:	00000106 	br	803060 <isatty+0x40>
  80305c:	0005883a 	mov	r2,zero
  803060:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803064:	e0bfef17 	ldw	r2,-68(fp)
  803068:	10000e26 	beq	r2,zero,8030a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80306c:	e0bfef17 	ldw	r2,-68(fp)
  803070:	10800017 	ldw	r2,0(r2)
  803074:	10800817 	ldw	r2,32(r2)
  803078:	1000021e 	bne	r2,zero,803084 <isatty+0x64>
    {
      return 1;
  80307c:	00800044 	movi	r2,1
  803080:	00000c06 	br	8030b4 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803084:	e0bff004 	addi	r2,fp,-64
  803088:	e13fff17 	ldw	r4,-4(fp)
  80308c:	100b883a 	mov	r5,r2
  803090:	0802f1c0 	call	802f1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803094:	e0bff117 	ldw	r2,-60(fp)
  803098:	10880020 	cmpeqi	r2,r2,8192
  80309c:	10803fcc 	andi	r2,r2,255
  8030a0:	00000406 	br	8030b4 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8030a4:	0802fd00 	call	802fd0 <alt_get_errno>
  8030a8:	00c01444 	movi	r3,81
  8030ac:	10c00015 	stw	r3,0(r2)
    return 0;
  8030b0:	0005883a 	mov	r2,zero
  }
}
  8030b4:	e037883a 	mov	sp,fp
  8030b8:	dfc00117 	ldw	ra,4(sp)
  8030bc:	df000017 	ldw	fp,0(sp)
  8030c0:	dec00204 	addi	sp,sp,8
  8030c4:	f800283a 	ret

008030c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030c8:	defffe04 	addi	sp,sp,-8
  8030cc:	dfc00115 	stw	ra,4(sp)
  8030d0:	df000015 	stw	fp,0(sp)
  8030d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8030d8:	00802074 	movhi	r2,129
  8030dc:	10a07a04 	addi	r2,r2,-32280
  8030e0:	10800017 	ldw	r2,0(r2)
  8030e4:	10000526 	beq	r2,zero,8030fc <alt_get_errno+0x34>
  8030e8:	00802074 	movhi	r2,129
  8030ec:	10a07a04 	addi	r2,r2,-32280
  8030f0:	10800017 	ldw	r2,0(r2)
  8030f4:	103ee83a 	callr	r2
  8030f8:	00000206 	br	803104 <alt_get_errno+0x3c>
  8030fc:	00802074 	movhi	r2,129
  803100:	10a08404 	addi	r2,r2,-32240
}
  803104:	e037883a 	mov	sp,fp
  803108:	dfc00117 	ldw	ra,4(sp)
  80310c:	df000017 	ldw	fp,0(sp)
  803110:	dec00204 	addi	sp,sp,8
  803114:	f800283a 	ret

00803118 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803118:	defff904 	addi	sp,sp,-28
  80311c:	dfc00615 	stw	ra,24(sp)
  803120:	df000515 	stw	fp,20(sp)
  803124:	df000504 	addi	fp,sp,20
  803128:	e13ffd15 	stw	r4,-12(fp)
  80312c:	e17ffe15 	stw	r5,-8(fp)
  803130:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803134:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803138:	e0bffd17 	ldw	r2,-12(fp)
  80313c:	10000816 	blt	r2,zero,803160 <lseek+0x48>
  803140:	e13ffd17 	ldw	r4,-12(fp)
  803144:	01400304 	movi	r5,12
  803148:	0802d580 	call	802d58 <__mulsi3>
  80314c:	1007883a 	mov	r3,r2
  803150:	00802034 	movhi	r2,128
  803154:	109bc704 	addi	r2,r2,28444
  803158:	1885883a 	add	r2,r3,r2
  80315c:	00000106 	br	803164 <lseek+0x4c>
  803160:	0005883a 	mov	r2,zero
  803164:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803168:	e0bffc17 	ldw	r2,-16(fp)
  80316c:	10001026 	beq	r2,zero,8031b0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803170:	e0bffc17 	ldw	r2,-16(fp)
  803174:	10800017 	ldw	r2,0(r2)
  803178:	10800717 	ldw	r2,28(r2)
  80317c:	10000926 	beq	r2,zero,8031a4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	10800017 	ldw	r2,0(r2)
  803188:	10800717 	ldw	r2,28(r2)
  80318c:	e13ffc17 	ldw	r4,-16(fp)
  803190:	e17ffe17 	ldw	r5,-8(fp)
  803194:	e1bfff17 	ldw	r6,-4(fp)
  803198:	103ee83a 	callr	r2
  80319c:	e0bffb15 	stw	r2,-20(fp)
  8031a0:	00000506 	br	8031b8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8031a4:	00bfde84 	movi	r2,-134
  8031a8:	e0bffb15 	stw	r2,-20(fp)
  8031ac:	00000206 	br	8031b8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8031b0:	00bfebc4 	movi	r2,-81
  8031b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8031b8:	e0bffb17 	ldw	r2,-20(fp)
  8031bc:	1000060e 	bge	r2,zero,8031d8 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
  8031c0:	08030c80 	call	8030c8 <alt_get_errno>
  8031c4:	e0fffb17 	ldw	r3,-20(fp)
  8031c8:	00c7c83a 	sub	r3,zero,r3
  8031cc:	10c00015 	stw	r3,0(r2)
    rc = -1;
  8031d0:	00bfffc4 	movi	r2,-1
  8031d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8031d8:	e0bffb17 	ldw	r2,-20(fp)
}
  8031dc:	e037883a 	mov	sp,fp
  8031e0:	dfc00117 	ldw	ra,4(sp)
  8031e4:	df000017 	ldw	fp,0(sp)
  8031e8:	dec00204 	addi	sp,sp,8
  8031ec:	f800283a 	ret

008031f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8031f0:	defffd04 	addi	sp,sp,-12
  8031f4:	dfc00215 	stw	ra,8(sp)
  8031f8:	df000115 	stw	fp,4(sp)
  8031fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803200:	0009883a 	mov	r4,zero
  803204:	080369c0 	call	80369c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803208:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80320c:	08036d00 	call	8036d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803210:	01002034 	movhi	r4,128
  803214:	2119a904 	addi	r4,r4,26276
  803218:	01402034 	movhi	r5,128
  80321c:	2959a904 	addi	r5,r5,26276
  803220:	01802034 	movhi	r6,128
  803224:	3199a904 	addi	r6,r6,26276
  803228:	08059780 	call	805978 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80322c:	08054600 	call	805460 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803230:	01002034 	movhi	r4,128
  803234:	21152f04 	addi	r4,r4,21692
  803238:	08062c00 	call	8062c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80323c:	d1201417 	ldw	r4,-32688(gp)
  803240:	d0e01517 	ldw	r3,-32684(gp)
  803244:	d0a01617 	ldw	r2,-32680(gp)
  803248:	180b883a 	mov	r5,r3
  80324c:	100d883a 	mov	r6,r2
  803250:	08001f40 	call	8001f4 <main>
  803254:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  803258:	01000044 	movi	r4,1
  80325c:	0802dd00 	call	802dd0 <close>
  exit (result);
  803260:	e13fff17 	ldw	r4,-4(fp)
  803264:	08062d40 	call	8062d4 <exit>

00803268 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803268:	defffe04 	addi	sp,sp,-8
  80326c:	df000115 	stw	fp,4(sp)
  803270:	df000104 	addi	fp,sp,4
  803274:	e13fff15 	stw	r4,-4(fp)
}
  803278:	e037883a 	mov	sp,fp
  80327c:	df000017 	ldw	fp,0(sp)
  803280:	dec00104 	addi	sp,sp,4
  803284:	f800283a 	ret

00803288 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803288:	defffe04 	addi	sp,sp,-8
  80328c:	df000115 	stw	fp,4(sp)
  803290:	df000104 	addi	fp,sp,4
  803294:	e13fff15 	stw	r4,-4(fp)
}
  803298:	e037883a 	mov	sp,fp
  80329c:	df000017 	ldw	fp,0(sp)
  8032a0:	dec00104 	addi	sp,sp,4
  8032a4:	f800283a 	ret

008032a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8032a8:	defffe04 	addi	sp,sp,-8
  8032ac:	dfc00115 	stw	ra,4(sp)
  8032b0:	df000015 	stw	fp,0(sp)
  8032b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8032b8:	00802074 	movhi	r2,129
  8032bc:	10a07a04 	addi	r2,r2,-32280
  8032c0:	10800017 	ldw	r2,0(r2)
  8032c4:	10000526 	beq	r2,zero,8032dc <alt_get_errno+0x34>
  8032c8:	00802074 	movhi	r2,129
  8032cc:	10a07a04 	addi	r2,r2,-32280
  8032d0:	10800017 	ldw	r2,0(r2)
  8032d4:	103ee83a 	callr	r2
  8032d8:	00000206 	br	8032e4 <alt_get_errno+0x3c>
  8032dc:	00802074 	movhi	r2,129
  8032e0:	10a08404 	addi	r2,r2,-32240
}
  8032e4:	e037883a 	mov	sp,fp
  8032e8:	dfc00117 	ldw	ra,4(sp)
  8032ec:	df000017 	ldw	fp,0(sp)
  8032f0:	dec00204 	addi	sp,sp,8
  8032f4:	f800283a 	ret

008032f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8032f8:	defff904 	addi	sp,sp,-28
  8032fc:	dfc00615 	stw	ra,24(sp)
  803300:	df000515 	stw	fp,20(sp)
  803304:	df000504 	addi	fp,sp,20
  803308:	e13ffd15 	stw	r4,-12(fp)
  80330c:	e17ffe15 	stw	r5,-8(fp)
  803310:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803314:	e0bffd17 	ldw	r2,-12(fp)
  803318:	10000816 	blt	r2,zero,80333c <read+0x44>
  80331c:	e13ffd17 	ldw	r4,-12(fp)
  803320:	01400304 	movi	r5,12
  803324:	0802d580 	call	802d58 <__mulsi3>
  803328:	1007883a 	mov	r3,r2
  80332c:	00802034 	movhi	r2,128
  803330:	109bc704 	addi	r2,r2,28444
  803334:	1885883a 	add	r2,r3,r2
  803338:	00000106 	br	803340 <read+0x48>
  80333c:	0005883a 	mov	r2,zero
  803340:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803344:	e0bffb17 	ldw	r2,-20(fp)
  803348:	10002026 	beq	r2,zero,8033cc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80334c:	e0bffb17 	ldw	r2,-20(fp)
  803350:	10800217 	ldw	r2,8(r2)
  803354:	108000cc 	andi	r2,r2,3
  803358:	10800060 	cmpeqi	r2,r2,1
  80335c:	1000171e 	bne	r2,zero,8033bc <read+0xc4>
        (fd->dev->read))
  803360:	e0bffb17 	ldw	r2,-20(fp)
  803364:	10800017 	ldw	r2,0(r2)
  803368:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80336c:	10001326 	beq	r2,zero,8033bc <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803370:	e0bffb17 	ldw	r2,-20(fp)
  803374:	10800017 	ldw	r2,0(r2)
  803378:	10800517 	ldw	r2,20(r2)
  80337c:	e0ffff17 	ldw	r3,-4(fp)
  803380:	e13ffb17 	ldw	r4,-20(fp)
  803384:	e17ffe17 	ldw	r5,-8(fp)
  803388:	180d883a 	mov	r6,r3
  80338c:	103ee83a 	callr	r2
  803390:	e0bffc15 	stw	r2,-16(fp)
  803394:	e0bffc17 	ldw	r2,-16(fp)
  803398:	1000060e 	bge	r2,zero,8033b4 <read+0xbc>
        {
          ALT_ERRNO = -rval;
  80339c:	08032a80 	call	8032a8 <alt_get_errno>
  8033a0:	e0fffc17 	ldw	r3,-16(fp)
  8033a4:	00c7c83a 	sub	r3,zero,r3
  8033a8:	10c00015 	stw	r3,0(r2)
          return -1;
  8033ac:	00bfffc4 	movi	r2,-1
  8033b0:	00000a06 	br	8033dc <read+0xe4>
        }
        return rval;
  8033b4:	e0bffc17 	ldw	r2,-16(fp)
  8033b8:	00000806 	br	8033dc <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8033bc:	08032a80 	call	8032a8 <alt_get_errno>
  8033c0:	00c00344 	movi	r3,13
  8033c4:	10c00015 	stw	r3,0(r2)
  8033c8:	00000306 	br	8033d8 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8033cc:	08032a80 	call	8032a8 <alt_get_errno>
  8033d0:	00c01444 	movi	r3,81
  8033d4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  8033d8:	00bfffc4 	movi	r2,-1
}
  8033dc:	e037883a 	mov	sp,fp
  8033e0:	dfc00117 	ldw	ra,4(sp)
  8033e4:	df000017 	ldw	fp,0(sp)
  8033e8:	dec00204 	addi	sp,sp,8
  8033ec:	f800283a 	ret

008033f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8033f0:	defffc04 	addi	sp,sp,-16
  8033f4:	dfc00315 	stw	ra,12(sp)
  8033f8:	df000215 	stw	fp,8(sp)
  8033fc:	dc000115 	stw	r16,4(sp)
  803400:	df000204 	addi	fp,sp,8
  803404:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  803408:	e0bffe17 	ldw	r2,-8(fp)
  80340c:	108000d0 	cmplti	r2,r2,3
  803410:	1000111e 	bne	r2,zero,803458 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  803414:	04002034 	movhi	r16,128
  803418:	841bc704 	addi	r16,r16,28444
  80341c:	e0bffe17 	ldw	r2,-8(fp)
  803420:	1009883a 	mov	r4,r2
  803424:	01400304 	movi	r5,12
  803428:	0802d580 	call	802d58 <__mulsi3>
  80342c:	8085883a 	add	r2,r16,r2
  803430:	10800204 	addi	r2,r2,8
  803434:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803438:	04002034 	movhi	r16,128
  80343c:	841bc704 	addi	r16,r16,28444
  803440:	e0bffe17 	ldw	r2,-8(fp)
  803444:	1009883a 	mov	r4,r2
  803448:	01400304 	movi	r5,12
  80344c:	0802d580 	call	802d58 <__mulsi3>
  803450:	8085883a 	add	r2,r16,r2
  803454:	10000015 	stw	zero,0(r2)
  }
}
  803458:	e6ffff04 	addi	sp,fp,-4
  80345c:	dfc00217 	ldw	ra,8(sp)
  803460:	df000117 	ldw	fp,4(sp)
  803464:	dc000017 	ldw	r16,0(sp)
  803468:	dec00304 	addi	sp,sp,12
  80346c:	f800283a 	ret

00803470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803470:	defff904 	addi	sp,sp,-28
  803474:	df000615 	stw	fp,24(sp)
  803478:	df000604 	addi	fp,sp,24
  80347c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803480:	0005303a 	rdctl	r2,status
  803484:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803488:	e0fffc17 	ldw	r3,-16(fp)
  80348c:	00bfff84 	movi	r2,-2
  803490:	1884703a 	and	r2,r3,r2
  803494:	1001703a 	wrctl	status,r2
  
  return context;
  803498:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80349c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8034a0:	d0a00a17 	ldw	r2,-32728(gp)
  8034a4:	10c000c4 	addi	r3,r2,3
  8034a8:	00bfff04 	movi	r2,-4
  8034ac:	1884703a 	and	r2,r3,r2
  8034b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8034b4:	d0e00a17 	ldw	r3,-32728(gp)
  8034b8:	e0bfff17 	ldw	r2,-4(fp)
  8034bc:	1885883a 	add	r2,r3,r2
  8034c0:	00c04034 	movhi	r3,256
  8034c4:	18c00004 	addi	r3,r3,0
  8034c8:	1880062e 	bgeu	r3,r2,8034e4 <sbrk+0x74>
  8034cc:	e0bffa17 	ldw	r2,-24(fp)
  8034d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8034d4:	e0bffd17 	ldw	r2,-12(fp)
  8034d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8034dc:	00bfffc4 	movi	r2,-1
  8034e0:	00000b06 	br	803510 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8034e4:	d0a00a17 	ldw	r2,-32728(gp)
  8034e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  8034ec:	d0e00a17 	ldw	r3,-32728(gp)
  8034f0:	e0bfff17 	ldw	r2,-4(fp)
  8034f4:	1885883a 	add	r2,r3,r2
  8034f8:	d0a00a15 	stw	r2,-32728(gp)
  8034fc:	e0bffa17 	ldw	r2,-24(fp)
  803500:	e0bffe15 	stw	r2,-8(fp)
  803504:	e0bffe17 	ldw	r2,-8(fp)
  803508:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80350c:	e0bffb17 	ldw	r2,-20(fp)
} 
  803510:	e037883a 	mov	sp,fp
  803514:	df000017 	ldw	fp,0(sp)
  803518:	dec00104 	addi	sp,sp,4
  80351c:	f800283a 	ret

00803520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803520:	defffe04 	addi	sp,sp,-8
  803524:	dfc00115 	stw	ra,4(sp)
  803528:	df000015 	stw	fp,0(sp)
  80352c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803530:	00802074 	movhi	r2,129
  803534:	10a07a04 	addi	r2,r2,-32280
  803538:	10800017 	ldw	r2,0(r2)
  80353c:	10000526 	beq	r2,zero,803554 <alt_get_errno+0x34>
  803540:	00802074 	movhi	r2,129
  803544:	10a07a04 	addi	r2,r2,-32280
  803548:	10800017 	ldw	r2,0(r2)
  80354c:	103ee83a 	callr	r2
  803550:	00000206 	br	80355c <alt_get_errno+0x3c>
  803554:	00802074 	movhi	r2,129
  803558:	10a08404 	addi	r2,r2,-32240
}
  80355c:	e037883a 	mov	sp,fp
  803560:	dfc00117 	ldw	ra,4(sp)
  803564:	df000017 	ldw	fp,0(sp)
  803568:	dec00204 	addi	sp,sp,8
  80356c:	f800283a 	ret

00803570 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803570:	defff904 	addi	sp,sp,-28
  803574:	dfc00615 	stw	ra,24(sp)
  803578:	df000515 	stw	fp,20(sp)
  80357c:	df000504 	addi	fp,sp,20
  803580:	e13ffd15 	stw	r4,-12(fp)
  803584:	e17ffe15 	stw	r5,-8(fp)
  803588:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80358c:	e0bffd17 	ldw	r2,-12(fp)
  803590:	10000816 	blt	r2,zero,8035b4 <write+0x44>
  803594:	e13ffd17 	ldw	r4,-12(fp)
  803598:	01400304 	movi	r5,12
  80359c:	0802d580 	call	802d58 <__mulsi3>
  8035a0:	1007883a 	mov	r3,r2
  8035a4:	00802034 	movhi	r2,128
  8035a8:	109bc704 	addi	r2,r2,28444
  8035ac:	1885883a 	add	r2,r3,r2
  8035b0:	00000106 	br	8035b8 <write+0x48>
  8035b4:	0005883a 	mov	r2,zero
  8035b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8035bc:	e0bffb17 	ldw	r2,-20(fp)
  8035c0:	10001f26 	beq	r2,zero,803640 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8035c4:	e0bffb17 	ldw	r2,-20(fp)
  8035c8:	10800217 	ldw	r2,8(r2)
  8035cc:	108000cc 	andi	r2,r2,3
  8035d0:	10001726 	beq	r2,zero,803630 <write+0xc0>
  8035d4:	e0bffb17 	ldw	r2,-20(fp)
  8035d8:	10800017 	ldw	r2,0(r2)
  8035dc:	10800617 	ldw	r2,24(r2)
  8035e0:	10001326 	beq	r2,zero,803630 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8035e4:	e0bffb17 	ldw	r2,-20(fp)
  8035e8:	10800017 	ldw	r2,0(r2)
  8035ec:	10800617 	ldw	r2,24(r2)
  8035f0:	e0ffff17 	ldw	r3,-4(fp)
  8035f4:	e13ffb17 	ldw	r4,-20(fp)
  8035f8:	e17ffe17 	ldw	r5,-8(fp)
  8035fc:	180d883a 	mov	r6,r3
  803600:	103ee83a 	callr	r2
  803604:	e0bffc15 	stw	r2,-16(fp)
  803608:	e0bffc17 	ldw	r2,-16(fp)
  80360c:	1000060e 	bge	r2,zero,803628 <write+0xb8>
      {
        ALT_ERRNO = -rval;
  803610:	08035200 	call	803520 <alt_get_errno>
  803614:	e0fffc17 	ldw	r3,-16(fp)
  803618:	00c7c83a 	sub	r3,zero,r3
  80361c:	10c00015 	stw	r3,0(r2)
        return -1;
  803620:	00bfffc4 	movi	r2,-1
  803624:	00000a06 	br	803650 <write+0xe0>
      }
      return rval;
  803628:	e0bffc17 	ldw	r2,-16(fp)
  80362c:	00000806 	br	803650 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803630:	08035200 	call	803520 <alt_get_errno>
  803634:	00c00344 	movi	r3,13
  803638:	10c00015 	stw	r3,0(r2)
  80363c:	00000306 	br	80364c <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803640:	08035200 	call	803520 <alt_get_errno>
  803644:	00c01444 	movi	r3,81
  803648:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  80364c:	00bfffc4 	movi	r2,-1
}
  803650:	e037883a 	mov	sp,fp
  803654:	dfc00117 	ldw	ra,4(sp)
  803658:	df000017 	ldw	fp,0(sp)
  80365c:	dec00204 	addi	sp,sp,8
  803660:	f800283a 	ret

00803664 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803664:	defffd04 	addi	sp,sp,-12
  803668:	dfc00215 	stw	ra,8(sp)
  80366c:	df000115 	stw	fp,4(sp)
  803670:	df000104 	addi	fp,sp,4
  803674:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803678:	e13fff17 	ldw	r4,-4(fp)
  80367c:	01402074 	movhi	r5,129
  803680:	29607704 	addi	r5,r5,-32292
  803684:	08053c00 	call	8053c0 <alt_dev_llist_insert>
}
  803688:	e037883a 	mov	sp,fp
  80368c:	dfc00117 	ldw	ra,4(sp)
  803690:	df000017 	ldw	fp,0(sp)
  803694:	dec00204 	addi	sp,sp,8
  803698:	f800283a 	ret

0080369c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80369c:	defffd04 	addi	sp,sp,-12
  8036a0:	dfc00215 	stw	ra,8(sp)
  8036a4:	df000115 	stw	fp,4(sp)
  8036a8:	df000104 	addi	fp,sp,4
  8036ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8036b0:	0805e2c0 	call	805e2c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8036b4:	00800044 	movi	r2,1
  8036b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8036bc:	e037883a 	mov	sp,fp
  8036c0:	dfc00117 	ldw	ra,4(sp)
  8036c4:	df000017 	ldw	fp,0(sp)
  8036c8:	dec00204 	addi	sp,sp,8
  8036cc:	f800283a 	ret

008036d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8036d0:	defffe04 	addi	sp,sp,-8
  8036d4:	dfc00115 	stw	ra,4(sp)
  8036d8:	df000015 	stw	fp,0(sp)
  8036dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  8036e0:	01004034 	movhi	r4,256
  8036e4:	21080004 	addi	r4,r4,8192
  8036e8:	000b883a 	mov	r5,zero
  8036ec:	01800044 	movi	r6,1
  8036f0:	01c0fa04 	movi	r7,1000
  8036f4:	0804b7c0 	call	804b7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
  8036f8:	01002034 	movhi	r4,128
  8036fc:	211c3104 	addi	r4,r4,28868
  803700:	000b883a 	mov	r5,zero
  803704:	000d883a 	mov	r6,zero
  803708:	08042340 	call	804234 <altera_avalon_jtag_uart_init>
  80370c:	01002034 	movhi	r4,128
  803710:	211c2704 	addi	r4,r4,28828
  803714:	08036640 	call	803664 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  803718:	0001883a 	nop
    BEMICRO_MAX10_SERIAL_FLASH_CONTROLLER_INIT ( FLASH, flash);
  80371c:	01002074 	movhi	r4,129
  803720:	21203f04 	addi	r4,r4,-32516
  803724:	08037740 	call	803774 <alt_epcs_flash_init>
}
  803728:	e037883a 	mov	sp,fp
  80372c:	dfc00117 	ldw	ra,4(sp)
  803730:	df000017 	ldw	fp,0(sp)
  803734:	dec00204 	addi	sp,sp,8
  803738:	f800283a 	ret

0080373c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  80373c:	defffd04 	addi	sp,sp,-12
  803740:	dfc00215 	stw	ra,8(sp)
  803744:	df000115 	stw	fp,4(sp)
  803748:	df000104 	addi	fp,sp,4
  80374c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  803750:	e13fff17 	ldw	r4,-4(fp)
  803754:	01402074 	movhi	r5,129
  803758:	29607c04 	addi	r5,r5,-32272
  80375c:	08053c00 	call	8053c0 <alt_dev_llist_insert>
}
  803760:	e037883a 	mov	sp,fp
  803764:	dfc00117 	ldw	ra,4(sp)
  803768:	df000017 	ldw	fp,0(sp)
  80376c:	dec00204 	addi	sp,sp,8
  803770:	f800283a 	ret

00803774 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
  803774:	defffc04 	addi	sp,sp,-16
  803778:	dfc00315 	stw	ra,12(sp)
  80377c:	df000215 	stw	fp,8(sp)
  803780:	df000204 	addi	fp,sp,8
  803784:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  803788:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
  80378c:	e13fff17 	ldw	r4,-4(fp)
  803790:	08037c80 	call	8037c8 <alt_epcs_flash_query>
  803794:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
  803798:	e0bffe17 	ldw	r2,-8(fp)
  80379c:	1000041e 	bne	r2,zero,8037b0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
  8037a0:	e0bfff17 	ldw	r2,-4(fp)
  8037a4:	1009883a 	mov	r4,r2
  8037a8:	080373c0 	call	80373c <alt_flash_device_register>
  8037ac:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
  8037b0:	e0bffe17 	ldw	r2,-8(fp)
}
  8037b4:	e037883a 	mov	sp,fp
  8037b8:	dfc00117 	ldw	ra,4(sp)
  8037bc:	df000017 	ldw	fp,0(sp)
  8037c0:	dec00204 	addi	sp,sp,8
  8037c4:	f800283a 	ret

008037c8 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
  8037c8:	defffc04 	addi	sp,sp,-16
  8037cc:	dfc00315 	stw	ra,12(sp)
  8037d0:	df000215 	stw	fp,8(sp)
  8037d4:	df000204 	addi	fp,sp,8
  8037d8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  8037dc:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  8037e0:	e0bfff17 	ldw	r2,-4(fp)
  8037e4:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
  8037e8:	e0bfff17 	ldw	r2,-4(fp)
  8037ec:	10802d17 	ldw	r2,180(r2)
  8037f0:	1009883a 	mov	r4,r2
  8037f4:	08050900 	call	805090 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
  8037f8:	10c03fcc 	andi	r3,r2,255
  8037fc:	e0bfff17 	ldw	r2,-4(fp)
  803800:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
  803804:	e0bfff17 	ldw	r2,-4(fp)
  803808:	10802f17 	ldw	r2,188(r2)
  80380c:	10800598 	cmpnei	r2,r2,22
  803810:	10000a1e 	bne	r2,zero,80383c <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
  803814:	e0bfff17 	ldw	r2,-4(fp)
  803818:	00c02034 	movhi	r3,128
  80381c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
  803820:	e0bfff17 	ldw	r2,-4(fp)
  803824:	00c02004 	movi	r3,128
  803828:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80382c:	e0bfff17 	ldw	r2,-4(fp)
  803830:	00c00074 	movhi	r3,1
  803834:	10c01015 	stw	r3,64(r2)
  803838:	00007406 	br	803a0c <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
  80383c:	e0bfff17 	ldw	r2,-4(fp)
  803840:	10802f17 	ldw	r2,188(r2)
  803844:	10800518 	cmpnei	r2,r2,20
  803848:	10000a1e 	bne	r2,zero,803874 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
  80384c:	e0bfff17 	ldw	r2,-4(fp)
  803850:	00c00834 	movhi	r3,32
  803854:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
  803858:	e0bfff17 	ldw	r2,-4(fp)
  80385c:	00c00804 	movi	r3,32
  803860:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  803864:	e0bfff17 	ldw	r2,-4(fp)
  803868:	00c00074 	movhi	r3,1
  80386c:	10c01015 	stw	r3,64(r2)
  803870:	00006606 	br	803a0c <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
  803874:	e0bfff17 	ldw	r2,-4(fp)
  803878:	10802f17 	ldw	r2,188(r2)
  80387c:	108004d8 	cmpnei	r2,r2,19
  803880:	10000a1e 	bne	r2,zero,8038ac <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
  803884:	e0bfff17 	ldw	r2,-4(fp)
  803888:	00c00434 	movhi	r3,16
  80388c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
  803890:	e0bfff17 	ldw	r2,-4(fp)
  803894:	00c00404 	movi	r3,16
  803898:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  80389c:	e0bfff17 	ldw	r2,-4(fp)
  8038a0:	00c00074 	movhi	r3,1
  8038a4:	10c01015 	stw	r3,64(r2)
  8038a8:	00005806 	br	803a0c <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
  8038ac:	e0bfff17 	ldw	r2,-4(fp)
  8038b0:	10802f17 	ldw	r2,188(r2)
  8038b4:	10800498 	cmpnei	r2,r2,18
  8038b8:	10000a1e 	bne	r2,zero,8038e4 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
  8038bc:	e0bfff17 	ldw	r2,-4(fp)
  8038c0:	00c00234 	movhi	r3,8
  8038c4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
  8038c8:	e0bfff17 	ldw	r2,-4(fp)
  8038cc:	00c00204 	movi	r3,8
  8038d0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
  8038d4:	e0bfff17 	ldw	r2,-4(fp)
  8038d8:	00c00074 	movhi	r3,1
  8038dc:	10c01015 	stw	r3,64(r2)
  8038e0:	00004a06 	br	803a0c <alt_epcs_flash_query+0x244>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
  8038e4:	e0bfff17 	ldw	r2,-4(fp)
  8038e8:	10802f17 	ldw	r2,188(r2)
  8038ec:	10800418 	cmpnei	r2,r2,16
  8038f0:	10000a1e 	bne	r2,zero,80391c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
  8038f4:	e0bfff17 	ldw	r2,-4(fp)
  8038f8:	00c000b4 	movhi	r3,2
  8038fc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
  803900:	e0bfff17 	ldw	r2,-4(fp)
  803904:	00c00104 	movi	r3,4
  803908:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
  80390c:	e0bfff17 	ldw	r2,-4(fp)
  803910:	00e00014 	movui	r3,32768
  803914:	10c01015 	stw	r3,64(r2)
  803918:	00003c06 	br	803a0c <alt_epcs_flash_query+0x244>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
  80391c:	e0bfff17 	ldw	r2,-4(fp)
  803920:	10802d17 	ldw	r2,180(r2)
  803924:	1009883a 	mov	r4,r2
  803928:	08050f80 	call	8050f8 <epcs_read_device_id>
  80392c:	1007883a 	mov	r3,r2
  803930:	e0bfff17 	ldw	r2,-4(fp)
  803934:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
  803938:	e0bfff17 	ldw	r2,-4(fp)
  80393c:	10c02f17 	ldw	r3,188(r2)
  803940:	00804034 	movhi	r2,256
  803944:	10bfffc4 	addi	r2,r2,-1
  803948:	1886703a 	and	r3,r3,r2
  80394c:	00800874 	movhi	r2,33
  803950:	10ae8604 	addi	r2,r2,-17896
  803954:	18800a1e 	bne	r3,r2,803980 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  803958:	e0bfff17 	ldw	r2,-4(fp)
  80395c:	00c04034 	movhi	r3,256
  803960:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
  803964:	e0bfff17 	ldw	r2,-4(fp)
  803968:	00c04004 	movi	r3,256
  80396c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  803970:	e0bfff17 	ldw	r2,-4(fp)
  803974:	00c00074 	movhi	r3,1
  803978:	10c01015 	stw	r3,64(r2)
  80397c:	00002306 	br	803a0c <alt_epcs_flash_query+0x244>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
  803980:	e0bfff17 	ldw	r2,-4(fp)
  803984:	10802f17 	ldw	r2,188(r2)
  803988:	10803fcc 	andi	r2,r2,255
  80398c:	10800618 	cmpnei	r2,r2,24
  803990:	10000a1e 	bne	r2,zero,8039bc <alt_epcs_flash_query+0x1f4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
  803994:	e0bfff17 	ldw	r2,-4(fp)
  803998:	00c04034 	movhi	r3,256
  80399c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
  8039a0:	e0bfff17 	ldw	r2,-4(fp)
  8039a4:	00c01004 	movi	r3,64
  8039a8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
  8039ac:	e0bfff17 	ldw	r2,-4(fp)
  8039b0:	00c00134 	movhi	r3,4
  8039b4:	10c01015 	stw	r3,64(r2)
  8039b8:	00001406 	br	803a0c <alt_epcs_flash_query+0x244>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
  8039bc:	e0bfff17 	ldw	r2,-4(fp)
  8039c0:	10802f17 	ldw	r2,188(r2)
  8039c4:	10803fcc 	andi	r2,r2,255
  8039c8:	10800658 	cmpnei	r2,r2,25
  8039cc:	10000d1e 	bne	r2,zero,803a04 <alt_epcs_flash_query+0x23c>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
  8039d0:	e0bfff17 	ldw	r2,-4(fp)
  8039d4:	00c08034 	movhi	r3,512
  8039d8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
  8039dc:	e0bfff17 	ldw	r2,-4(fp)
  8039e0:	00c08004 	movi	r3,512
  8039e4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
  8039e8:	e0bfff17 	ldw	r2,-4(fp)
  8039ec:	00c00074 	movhi	r3,1
  8039f0:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
  8039f4:	e0bfff17 	ldw	r2,-4(fp)
  8039f8:	00c00044 	movi	r3,1
  8039fc:	10c03115 	stw	r3,196(r2)
  803a00:	00000206 	br	803a0c <alt_epcs_flash_query+0x244>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
  803a04:	00bffb44 	movi	r2,-19
  803a08:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  803a0c:	e0bfff17 	ldw	r2,-4(fp)
  803a10:	10800e17 	ldw	r2,56(r2)
  803a14:	1007883a 	mov	r3,r2
  803a18:	e0bfff17 	ldw	r2,-4(fp)
  803a1c:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
  803a20:	e0bfff17 	ldw	r2,-4(fp)
  803a24:	00c00044 	movi	r3,1
  803a28:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
  803a2c:	e0bfff17 	ldw	r2,-4(fp)
  803a30:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
  803a34:	e0bfff17 	ldw	r2,-4(fp)
  803a38:	00c04004 	movi	r3,256
  803a3c:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
  803a40:	e0bffe17 	ldw	r2,-8(fp)
}
  803a44:	e037883a 	mov	sp,fp
  803a48:	dfc00117 	ldw	ra,4(sp)
  803a4c:	df000017 	ldw	fp,0(sp)
  803a50:	dec00204 	addi	sp,sp,8
  803a54:	f800283a 	ret

00803a58 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
  803a58:	deffee04 	addi	sp,sp,-72
  803a5c:	dfc01115 	stw	ra,68(sp)
  803a60:	df001015 	stw	fp,64(sp)
  803a64:	df001004 	addi	fp,sp,64
  803a68:	e13ffc15 	stw	r4,-16(fp)
  803a6c:	e17ffd15 	stw	r5,-12(fp)
  803a70:	e1bffe15 	stw	r6,-8(fp)
  803a74:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  803a78:	00800804 	movi	r2,32
  803a7c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
  803a80:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
  803a84:	00002606 	br	803b20 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
  803a88:	e0bff117 	ldw	r2,-60(fp)
  803a8c:	e0ffff17 	ldw	r3,-4(fp)
  803a90:	1880012e 	bgeu	r3,r2,803a98 <alt_epcs_flash_memcmp+0x40>
  803a94:	1805883a 	mov	r2,r3
  803a98:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
  803a9c:	e0fffe17 	ldw	r3,-8(fp)
  803aa0:	e0bff017 	ldw	r2,-64(fp)
  803aa4:	1887883a 	add	r3,r3,r2
  803aa8:	e0bff404 	addi	r2,fp,-48
  803aac:	e13ffc17 	ldw	r4,-16(fp)
  803ab0:	180b883a 	mov	r5,r3
  803ab4:	100d883a 	mov	r6,r2
  803ab8:	e1fff217 	ldw	r7,-56(fp)
  803abc:	08040380 	call	804038 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
  803ac0:	1000020e 	bge	r2,zero,803acc <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
  803ac4:	00bfffc4 	movi	r2,-1
  803ac8:	00001806 	br	803b2c <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
  803acc:	e0bff017 	ldw	r2,-64(fp)
  803ad0:	e0fffd17 	ldw	r3,-12(fp)
  803ad4:	1889883a 	add	r4,r3,r2
  803ad8:	e0bff217 	ldw	r2,-56(fp)
  803adc:	e0fff404 	addi	r3,fp,-48
  803ae0:	180b883a 	mov	r5,r3
  803ae4:	100d883a 	mov	r6,r2
  803ae8:	080630c0 	call	80630c <memcmp>
  803aec:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
  803af0:	e0bff317 	ldw	r2,-52(fp)
  803af4:	10000226 	beq	r2,zero,803b00 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
  803af8:	e0bff317 	ldw	r2,-52(fp)
  803afc:	00000b06 	br	803b2c <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
  803b00:	e0bff217 	ldw	r2,-56(fp)
  803b04:	e0ffff17 	ldw	r3,-4(fp)
  803b08:	1885c83a 	sub	r2,r3,r2
  803b0c:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
  803b10:	e0fff017 	ldw	r3,-64(fp)
  803b14:	e0bff217 	ldw	r2,-56(fp)
  803b18:	1885883a 	add	r2,r3,r2
  803b1c:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  803b20:	e0bfff17 	ldw	r2,-4(fp)
  803b24:	103fd81e 	bne	r2,zero,803a88 <__reset+0xff802a88>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
  803b28:	0005883a 	mov	r2,zero
}
  803b2c:	e037883a 	mov	sp,fp
  803b30:	dfc00117 	ldw	ra,4(sp)
  803b34:	df000017 	ldw	fp,0(sp)
  803b38:	dec00204 	addi	sp,sp,8
  803b3c:	f800283a 	ret

00803b40 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
  803b40:	defff404 	addi	sp,sp,-48
  803b44:	dfc00b15 	stw	ra,44(sp)
  803b48:	df000a15 	stw	fp,40(sp)
  803b4c:	df000a04 	addi	fp,sp,40
  803b50:	e13ffc15 	stw	r4,-16(fp)
  803b54:	e17ffd15 	stw	r5,-12(fp)
  803b58:	e1bffe15 	stw	r6,-8(fp)
  803b5c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
  803b60:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  803b64:	e03ff815 	stw	zero,-32(fp)
  803b68:	00008306 	br	803d78 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  803b6c:	e0fffc17 	ldw	r3,-16(fp)
  803b70:	e0bff817 	ldw	r2,-32(fp)
  803b74:	1004913a 	slli	r2,r2,4
  803b78:	1885883a 	add	r2,r3,r2
  803b7c:	10800d04 	addi	r2,r2,52
  803b80:	10800017 	ldw	r2,0(r2)
  803b84:	e0fffd17 	ldw	r3,-12(fp)
  803b88:	18807816 	blt	r3,r2,803d6c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
  803b8c:	e0fffc17 	ldw	r3,-16(fp)
  803b90:	e0bff817 	ldw	r2,-32(fp)
  803b94:	1004913a 	slli	r2,r2,4
  803b98:	1885883a 	add	r2,r3,r2
  803b9c:	10800d04 	addi	r2,r2,52
  803ba0:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
  803ba4:	e13ffc17 	ldw	r4,-16(fp)
  803ba8:	e0bff817 	ldw	r2,-32(fp)
  803bac:	1004913a 	slli	r2,r2,4
  803bb0:	2085883a 	add	r2,r4,r2
  803bb4:	10800e04 	addi	r2,r2,56
  803bb8:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
  803bbc:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
  803bc0:	e0fffd17 	ldw	r3,-12(fp)
  803bc4:	1880690e 	bge	r3,r2,803d6c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
  803bc8:	e0fffc17 	ldw	r3,-16(fp)
  803bcc:	e0bff817 	ldw	r2,-32(fp)
  803bd0:	1004913a 	slli	r2,r2,4
  803bd4:	1885883a 	add	r2,r3,r2
  803bd8:	10800d04 	addi	r2,r2,52
  803bdc:	10800017 	ldw	r2,0(r2)
  803be0:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  803be4:	e03ff915 	stw	zero,-28(fp)
  803be8:	00005806 	br	803d4c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
  803bec:	e0fffd17 	ldw	r3,-12(fp)
  803bf0:	e0bffa17 	ldw	r2,-24(fp)
  803bf4:	18804916 	blt	r3,r2,803d1c <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
  803bf8:	e0fffc17 	ldw	r3,-16(fp)
  803bfc:	e0bff817 	ldw	r2,-32(fp)
  803c00:	10800104 	addi	r2,r2,4
  803c04:	1004913a 	slli	r2,r2,4
  803c08:	1885883a 	add	r2,r3,r2
  803c0c:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
  803c10:	e0bffa17 	ldw	r2,-24(fp)
  803c14:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
  803c18:	e0fffd17 	ldw	r3,-12(fp)
  803c1c:	18803f0e 	bge	r3,r2,803d1c <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
  803c20:	e0fffc17 	ldw	r3,-16(fp)
  803c24:	e0bff817 	ldw	r2,-32(fp)
  803c28:	10800104 	addi	r2,r2,4
  803c2c:	1004913a 	slli	r2,r2,4
  803c30:	1885883a 	add	r2,r3,r2
  803c34:	10c00017 	ldw	r3,0(r2)
  803c38:	e0bffa17 	ldw	r2,-24(fp)
  803c3c:	1887883a 	add	r3,r3,r2
  803c40:	e0bffd17 	ldw	r2,-12(fp)
  803c44:	1885c83a 	sub	r2,r3,r2
  803c48:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
  803c4c:	e0fffb17 	ldw	r3,-20(fp)
  803c50:	e0bfff17 	ldw	r2,-4(fp)
  803c54:	1880010e 	bge	r3,r2,803c5c <alt_epcs_flash_write+0x11c>
  803c58:	1805883a 	mov	r2,r3
  803c5c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
  803c60:	e0bffb17 	ldw	r2,-20(fp)
  803c64:	e13ffc17 	ldw	r4,-16(fp)
  803c68:	e17ffe17 	ldw	r5,-8(fp)
  803c6c:	e1bffd17 	ldw	r6,-12(fp)
  803c70:	100f883a 	mov	r7,r2
  803c74:	0803a580 	call	803a58 <alt_epcs_flash_memcmp>
  803c78:	10001226 	beq	r2,zero,803cc4 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
  803c7c:	e0bffc17 	ldw	r2,-16(fp)
  803c80:	10800817 	ldw	r2,32(r2)
  803c84:	e13ffc17 	ldw	r4,-16(fp)
  803c88:	e17ffa17 	ldw	r5,-24(fp)
  803c8c:	103ee83a 	callr	r2
  803c90:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
  803c94:	e0bff717 	ldw	r2,-36(fp)
  803c98:	10000a1e 	bne	r2,zero,803cc4 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	10800917 	ldw	r2,36(r2)
  803ca4:	e0fffb17 	ldw	r3,-20(fp)
  803ca8:	d8c00015 	stw	r3,0(sp)
  803cac:	e13ffc17 	ldw	r4,-16(fp)
  803cb0:	e17ffa17 	ldw	r5,-24(fp)
  803cb4:	e1bffd17 	ldw	r6,-12(fp)
  803cb8:	e1fffe17 	ldw	r7,-8(fp)
  803cbc:	103ee83a 	callr	r2
  803cc0:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
  803cc4:	e0ffff17 	ldw	r3,-4(fp)
  803cc8:	e0bffb17 	ldw	r2,-20(fp)
  803ccc:	18802e26 	beq	r3,r2,803d88 <alt_epcs_flash_write+0x248>
  803cd0:	e0bff717 	ldw	r2,-36(fp)
  803cd4:	10002c1e 	bne	r2,zero,803d88 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
  803cd8:	e0ffff17 	ldw	r3,-4(fp)
  803cdc:	e0bffb17 	ldw	r2,-20(fp)
  803ce0:	1885c83a 	sub	r2,r3,r2
  803ce4:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
  803ce8:	e0fffc17 	ldw	r3,-16(fp)
  803cec:	e0bff817 	ldw	r2,-32(fp)
  803cf0:	10800104 	addi	r2,r2,4
  803cf4:	1004913a 	slli	r2,r2,4
  803cf8:	1885883a 	add	r2,r3,r2
  803cfc:	10c00017 	ldw	r3,0(r2)
  803d00:	e0bffa17 	ldw	r2,-24(fp)
  803d04:	1885883a 	add	r2,r3,r2
  803d08:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
  803d0c:	e0bffb17 	ldw	r2,-20(fp)
  803d10:	e0fffe17 	ldw	r3,-8(fp)
  803d14:	1885883a 	add	r2,r3,r2
  803d18:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
  803d1c:	e0fffc17 	ldw	r3,-16(fp)
  803d20:	e0bff817 	ldw	r2,-32(fp)
  803d24:	10800104 	addi	r2,r2,4
  803d28:	1004913a 	slli	r2,r2,4
  803d2c:	1885883a 	add	r2,r3,r2
  803d30:	10800017 	ldw	r2,0(r2)
  803d34:	e0fffa17 	ldw	r3,-24(fp)
  803d38:	1885883a 	add	r2,r3,r2
  803d3c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
  803d40:	e0bff917 	ldw	r2,-28(fp)
  803d44:	10800044 	addi	r2,r2,1
  803d48:	e0bff915 	stw	r2,-28(fp)
  803d4c:	e0fffc17 	ldw	r3,-16(fp)
  803d50:	e0bff817 	ldw	r2,-32(fp)
  803d54:	1004913a 	slli	r2,r2,4
  803d58:	1885883a 	add	r2,r3,r2
  803d5c:	10800f04 	addi	r2,r2,60
  803d60:	10800017 	ldw	r2,0(r2)
  803d64:	e0fff917 	ldw	r3,-28(fp)
  803d68:	18bfa016 	blt	r3,r2,803bec <__reset+0xff802bec>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  803d6c:	e0bff817 	ldw	r2,-32(fp)
  803d70:	10800044 	addi	r2,r2,1
  803d74:	e0bff815 	stw	r2,-32(fp)
  803d78:	e0bffc17 	ldw	r2,-16(fp)
  803d7c:	10800c17 	ldw	r2,48(r2)
  803d80:	e0fff817 	ldw	r3,-32(fp)
  803d84:	18bf7916 	blt	r3,r2,803b6c <__reset+0xff802b6c>
      }
    }
  }

finished:
  return ret_code;
  803d88:	e0bff717 	ldw	r2,-36(fp)
}
  803d8c:	e037883a 	mov	sp,fp
  803d90:	dfc00117 	ldw	ra,4(sp)
  803d94:	df000017 	ldw	fp,0(sp)
  803d98:	dec00204 	addi	sp,sp,8
  803d9c:	f800283a 	ret

00803da0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
  803da0:	defffa04 	addi	sp,sp,-24
  803da4:	df000515 	stw	fp,20(sp)
  803da8:	df000504 	addi	fp,sp,20
  803dac:	e13ffd15 	stw	r4,-12(fp)
  803db0:	e17ffe15 	stw	r5,-8(fp)
  803db4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
  803db8:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
  803dbc:	e0bffd17 	ldw	r2,-12(fp)
  803dc0:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
  803dc4:	e0bffc17 	ldw	r2,-16(fp)
  803dc8:	10c00c17 	ldw	r3,48(r2)
  803dcc:	e0bfff17 	ldw	r2,-4(fp)
  803dd0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
  803dd4:	e0bffc17 	ldw	r2,-16(fp)
  803dd8:	10800c17 	ldw	r2,48(r2)
  803ddc:	1000031e 	bne	r2,zero,803dec <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
  803de0:	00bffec4 	movi	r2,-5
  803de4:	e0bffb15 	stw	r2,-20(fp)
  803de8:	00000b06 	br	803e18 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  803dec:	e0bffc17 	ldw	r2,-16(fp)
  803df0:	10800c17 	ldw	r2,48(r2)
  803df4:	10800250 	cmplti	r2,r2,9
  803df8:	1000031e 	bne	r2,zero,803e08 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
  803dfc:	00bffd04 	movi	r2,-12
  803e00:	e0bffb15 	stw	r2,-20(fp)
  803e04:	00000406 	br	803e18 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
  803e08:	e0bffc17 	ldw	r2,-16(fp)
  803e0c:	10c00d04 	addi	r3,r2,52
  803e10:	e0bffe17 	ldw	r2,-8(fp)
  803e14:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
  803e18:	e0bffb17 	ldw	r2,-20(fp)
}
  803e1c:	e037883a 	mov	sp,fp
  803e20:	df000017 	ldw	fp,0(sp)
  803e24:	dec00104 	addi	sp,sp,4
  803e28:	f800283a 	ret

00803e2c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
  803e2c:	defff904 	addi	sp,sp,-28
  803e30:	df000615 	stw	fp,24(sp)
  803e34:	df000604 	addi	fp,sp,24
  803e38:	e13ffe15 	stw	r4,-8(fp)
  803e3c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  803e40:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  803e44:	e0bffe17 	ldw	r2,-8(fp)
  803e48:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  803e4c:	e0bffb17 	ldw	r2,-20(fp)
  803e50:	10800c17 	ldw	r2,48(r2)
  803e54:	10bfffc4 	addi	r2,r2,-1
  803e58:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  803e5c:	e0fffb17 	ldw	r3,-20(fp)
  803e60:	e0bffc17 	ldw	r2,-16(fp)
  803e64:	1004913a 	slli	r2,r2,4
  803e68:	1885883a 	add	r2,r3,r2
  803e6c:	10800d04 	addi	r2,r2,52
  803e70:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
  803e74:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
  803e78:	e13ffb17 	ldw	r4,-20(fp)
  803e7c:	e0bffc17 	ldw	r2,-16(fp)
  803e80:	1004913a 	slli	r2,r2,4
  803e84:	2085883a 	add	r2,r4,r2
  803e88:	10800e04 	addi	r2,r2,56
  803e8c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
  803e90:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
  803e94:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
  803e98:	e0bfff17 	ldw	r2,-4(fp)
  803e9c:	e0fffd17 	ldw	r3,-12(fp)
  803ea0:	1880022e 	bgeu	r3,r2,803eac <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  803ea4:	00bffec4 	movi	r2,-5
  803ea8:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
  803eac:	e0bffa17 	ldw	r2,-24(fp)
}
  803eb0:	e037883a 	mov	sp,fp
  803eb4:	df000017 	ldw	fp,0(sp)
  803eb8:	dec00104 	addi	sp,sp,4
  803ebc:	f800283a 	ret

00803ec0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
  803ec0:	defffa04 	addi	sp,sp,-24
  803ec4:	dfc00515 	stw	ra,20(sp)
  803ec8:	df000415 	stw	fp,16(sp)
  803ecc:	df000404 	addi	fp,sp,16
  803ed0:	e13ffe15 	stw	r4,-8(fp)
  803ed4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  803ed8:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  803edc:	e0bffe17 	ldw	r2,-8(fp)
  803ee0:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
  803ee4:	e13ffe17 	ldw	r4,-8(fp)
  803ee8:	e17fff17 	ldw	r5,-4(fp)
  803eec:	0803e2c0 	call	803e2c <alt_epcs_test_address>
  803ef0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
  803ef4:	e0bffc17 	ldw	r2,-16(fp)
  803ef8:	10000816 	blt	r2,zero,803f1c <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
  803efc:	e0bffd17 	ldw	r2,-12(fp)
  803f00:	11002d17 	ldw	r4,180(r2)
  803f04:	e0ffff17 	ldw	r3,-4(fp)
  803f08:	e0bffd17 	ldw	r2,-12(fp)
  803f0c:	10803117 	ldw	r2,196(r2)
  803f10:	180b883a 	mov	r5,r3
  803f14:	100d883a 	mov	r6,r2
  803f18:	0804cd00 	call	804cd0 <epcs_sector_erase>
  }
  return ret_code;
  803f1c:	e0bffc17 	ldw	r2,-16(fp)
}
  803f20:	e037883a 	mov	sp,fp
  803f24:	dfc00117 	ldw	ra,4(sp)
  803f28:	df000017 	ldw	fp,0(sp)
  803f2c:	dec00204 	addi	sp,sp,8
  803f30:	f800283a 	ret

00803f34 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
  803f34:	defff404 	addi	sp,sp,-48
  803f38:	dfc00b15 	stw	ra,44(sp)
  803f3c:	df000a15 	stw	fp,40(sp)
  803f40:	df000a04 	addi	fp,sp,40
  803f44:	e13ffc15 	stw	r4,-16(fp)
  803f48:	e17ffd15 	stw	r5,-12(fp)
  803f4c:	e1bffe15 	stw	r6,-8(fp)
  803f50:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  803f54:	e0bffc17 	ldw	r2,-16(fp)
  803f58:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
  803f5c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
  803f60:	e13ffc17 	ldw	r4,-16(fp)
  803f64:	e17ffe17 	ldw	r5,-8(fp)
  803f68:	0803e2c0 	call	803e2c <alt_epcs_test_address>
  803f6c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
  803f70:	e0bff917 	ldw	r2,-28(fp)
  803f74:	10002a16 	blt	r2,zero,804020 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  803f78:	00002706 	br	804018 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
  803f7c:	e0bff817 	ldw	r2,-32(fp)
  803f80:	10c03017 	ldw	r3,192(r2)
  803f84:	e0bffe17 	ldw	r2,-8(fp)
  803f88:	1887883a 	add	r3,r3,r2
  803f8c:	e0bff817 	ldw	r2,-32(fp)
  803f90:	10803017 	ldw	r2,192(r2)
  803f94:	0085c83a 	sub	r2,zero,r2
  803f98:	1884703a 	and	r2,r3,r2
  803f9c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
  803fa0:	e0fffa17 	ldw	r3,-24(fp)
  803fa4:	e0bffe17 	ldw	r2,-8(fp)
  803fa8:	1885c83a 	sub	r2,r3,r2
  803fac:	e0c00217 	ldw	r3,8(fp)
  803fb0:	1880010e 	bge	r3,r2,803fb8 <alt_epcs_flash_write_block+0x84>
  803fb4:	1805883a 	mov	r2,r3
  803fb8:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
  803fbc:	e0bff817 	ldw	r2,-32(fp)
  803fc0:	10c02d17 	ldw	r3,180(r2)
  803fc4:	e0bff717 	ldw	r2,-36(fp)
  803fc8:	e13fff17 	ldw	r4,-4(fp)
  803fcc:	2085883a 	add	r2,r4,r2
  803fd0:	e13ff817 	ldw	r4,-32(fp)
  803fd4:	21003117 	ldw	r4,196(r4)
  803fd8:	d9000015 	stw	r4,0(sp)
  803fdc:	1809883a 	mov	r4,r3
  803fe0:	e17ffe17 	ldw	r5,-8(fp)
  803fe4:	100d883a 	mov	r6,r2
  803fe8:	e1fffb17 	ldw	r7,-20(fp)
  803fec:	0804f740 	call	804f74 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
  803ff0:	e0c00217 	ldw	r3,8(fp)
  803ff4:	e0bffb17 	ldw	r2,-20(fp)
  803ff8:	1885c83a 	sub	r2,r3,r2
  803ffc:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
  804000:	e0fff717 	ldw	r3,-36(fp)
  804004:	e0bffb17 	ldw	r2,-20(fp)
  804008:	1885883a 	add	r2,r3,r2
  80400c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
  804010:	e0bffa17 	ldw	r2,-24(fp)
  804014:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
  804018:	e0800217 	ldw	r2,8(fp)
  80401c:	103fd71e 	bne	r2,zero,803f7c <__reset+0xff802f7c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
  804020:	e0bff917 	ldw	r2,-28(fp)
}
  804024:	e037883a 	mov	sp,fp
  804028:	dfc00117 	ldw	ra,4(sp)
  80402c:	df000017 	ldw	fp,0(sp)
  804030:	dec00204 	addi	sp,sp,8
  804034:	f800283a 	ret

00804038 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
  804038:	defff704 	addi	sp,sp,-36
  80403c:	dfc00815 	stw	ra,32(sp)
  804040:	df000715 	stw	fp,28(sp)
  804044:	df000704 	addi	fp,sp,28
  804048:	e13ffc15 	stw	r4,-16(fp)
  80404c:	e17ffd15 	stw	r5,-12(fp)
  804050:	e1bffe15 	stw	r6,-8(fp)
  804054:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
  804058:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
  80405c:	e0bffc17 	ldw	r2,-16(fp)
  804060:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
  804064:	e13ffc17 	ldw	r4,-16(fp)
  804068:	e17ffd17 	ldw	r5,-12(fp)
  80406c:	0803e2c0 	call	803e2c <alt_epcs_test_address>
  804070:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
  804074:	e0bffa17 	ldw	r2,-24(fp)
  804078:	10000f16 	blt	r2,zero,8040b8 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
  80407c:	e0bffb17 	ldw	r2,-20(fp)
  804080:	10802d17 	ldw	r2,180(r2)
  804084:	e0fffb17 	ldw	r3,-20(fp)
  804088:	18c03117 	ldw	r3,196(r3)
  80408c:	d8c00015 	stw	r3,0(sp)
  804090:	1009883a 	mov	r4,r2
  804094:	e17ffd17 	ldw	r5,-12(fp)
  804098:	e1bffe17 	ldw	r6,-8(fp)
  80409c:	e1ffff17 	ldw	r7,-4(fp)
  8040a0:	0804dc80 	call	804dc8 <epcs_read_buffer>
  8040a4:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
  8040a8:	e0fffa17 	ldw	r3,-24(fp)
  8040ac:	e0bfff17 	ldw	r2,-4(fp)
  8040b0:	1880011e 	bne	r3,r2,8040b8 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
  8040b4:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
  8040b8:	e0bffa17 	ldw	r2,-24(fp)
}
  8040bc:	e037883a 	mov	sp,fp
  8040c0:	dfc00117 	ldw	ra,4(sp)
  8040c4:	df000017 	ldw	fp,0(sp)
  8040c8:	dec00204 	addi	sp,sp,8
  8040cc:	f800283a 	ret

008040d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8040d0:	defffa04 	addi	sp,sp,-24
  8040d4:	dfc00515 	stw	ra,20(sp)
  8040d8:	df000415 	stw	fp,16(sp)
  8040dc:	df000404 	addi	fp,sp,16
  8040e0:	e13ffd15 	stw	r4,-12(fp)
  8040e4:	e17ffe15 	stw	r5,-8(fp)
  8040e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8040ec:	e0bffd17 	ldw	r2,-12(fp)
  8040f0:	10800017 	ldw	r2,0(r2)
  8040f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8040f8:	e0bffc17 	ldw	r2,-16(fp)
  8040fc:	10c00a04 	addi	r3,r2,40
  804100:	e0bffd17 	ldw	r2,-12(fp)
  804104:	10800217 	ldw	r2,8(r2)
  804108:	1809883a 	mov	r4,r3
  80410c:	e17ffe17 	ldw	r5,-8(fp)
  804110:	e1bfff17 	ldw	r6,-4(fp)
  804114:	100f883a 	mov	r7,r2
  804118:	08046e80 	call	8046e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80411c:	e037883a 	mov	sp,fp
  804120:	dfc00117 	ldw	ra,4(sp)
  804124:	df000017 	ldw	fp,0(sp)
  804128:	dec00204 	addi	sp,sp,8
  80412c:	f800283a 	ret

00804130 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804130:	defffa04 	addi	sp,sp,-24
  804134:	dfc00515 	stw	ra,20(sp)
  804138:	df000415 	stw	fp,16(sp)
  80413c:	df000404 	addi	fp,sp,16
  804140:	e13ffd15 	stw	r4,-12(fp)
  804144:	e17ffe15 	stw	r5,-8(fp)
  804148:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80414c:	e0bffd17 	ldw	r2,-12(fp)
  804150:	10800017 	ldw	r2,0(r2)
  804154:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  804158:	e0bffc17 	ldw	r2,-16(fp)
  80415c:	10c00a04 	addi	r3,r2,40
  804160:	e0bffd17 	ldw	r2,-12(fp)
  804164:	10800217 	ldw	r2,8(r2)
  804168:	1809883a 	mov	r4,r3
  80416c:	e17ffe17 	ldw	r5,-8(fp)
  804170:	e1bfff17 	ldw	r6,-4(fp)
  804174:	100f883a 	mov	r7,r2
  804178:	08048f00 	call	8048f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80417c:	e037883a 	mov	sp,fp
  804180:	dfc00117 	ldw	ra,4(sp)
  804184:	df000017 	ldw	fp,0(sp)
  804188:	dec00204 	addi	sp,sp,8
  80418c:	f800283a 	ret

00804190 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  804190:	defffc04 	addi	sp,sp,-16
  804194:	dfc00315 	stw	ra,12(sp)
  804198:	df000215 	stw	fp,8(sp)
  80419c:	df000204 	addi	fp,sp,8
  8041a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8041a4:	e0bfff17 	ldw	r2,-4(fp)
  8041a8:	10800017 	ldw	r2,0(r2)
  8041ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8041b0:	e0bffe17 	ldw	r2,-8(fp)
  8041b4:	10c00a04 	addi	r3,r2,40
  8041b8:	e0bfff17 	ldw	r2,-4(fp)
  8041bc:	10800217 	ldw	r2,8(r2)
  8041c0:	1809883a 	mov	r4,r3
  8041c4:	100b883a 	mov	r5,r2
  8041c8:	08045940 	call	804594 <altera_avalon_jtag_uart_close>
}
  8041cc:	e037883a 	mov	sp,fp
  8041d0:	dfc00117 	ldw	ra,4(sp)
  8041d4:	df000017 	ldw	fp,0(sp)
  8041d8:	dec00204 	addi	sp,sp,8
  8041dc:	f800283a 	ret

008041e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8041e0:	defffa04 	addi	sp,sp,-24
  8041e4:	dfc00515 	stw	ra,20(sp)
  8041e8:	df000415 	stw	fp,16(sp)
  8041ec:	df000404 	addi	fp,sp,16
  8041f0:	e13ffd15 	stw	r4,-12(fp)
  8041f4:	e17ffe15 	stw	r5,-8(fp)
  8041f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8041fc:	e0bffd17 	ldw	r2,-12(fp)
  804200:	10800017 	ldw	r2,0(r2)
  804204:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804208:	e0bffc17 	ldw	r2,-16(fp)
  80420c:	10800a04 	addi	r2,r2,40
  804210:	1009883a 	mov	r4,r2
  804214:	e17ffe17 	ldw	r5,-8(fp)
  804218:	e1bfff17 	ldw	r6,-4(fp)
  80421c:	08045fc0 	call	8045fc <altera_avalon_jtag_uart_ioctl>
}
  804220:	e037883a 	mov	sp,fp
  804224:	dfc00117 	ldw	ra,4(sp)
  804228:	df000017 	ldw	fp,0(sp)
  80422c:	dec00204 	addi	sp,sp,8
  804230:	f800283a 	ret

00804234 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  804234:	defffa04 	addi	sp,sp,-24
  804238:	dfc00515 	stw	ra,20(sp)
  80423c:	df000415 	stw	fp,16(sp)
  804240:	df000404 	addi	fp,sp,16
  804244:	e13ffd15 	stw	r4,-12(fp)
  804248:	e17ffe15 	stw	r5,-8(fp)
  80424c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804250:	e0bffd17 	ldw	r2,-12(fp)
  804254:	00c00044 	movi	r3,1
  804258:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80425c:	e0bffd17 	ldw	r2,-12(fp)
  804260:	10800017 	ldw	r2,0(r2)
  804264:	10800104 	addi	r2,r2,4
  804268:	e0fffd17 	ldw	r3,-12(fp)
  80426c:	18c00817 	ldw	r3,32(r3)
  804270:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804274:	e0fffe17 	ldw	r3,-8(fp)
  804278:	e0bfff17 	ldw	r2,-4(fp)
  80427c:	d8000015 	stw	zero,0(sp)
  804280:	1809883a 	mov	r4,r3
  804284:	100b883a 	mov	r5,r2
  804288:	01802034 	movhi	r6,128
  80428c:	3190bd04 	addi	r6,r6,17140
  804290:	e1fffd17 	ldw	r7,-12(fp)
  804294:	08055d00 	call	8055d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804298:	e0bffd17 	ldw	r2,-12(fp)
  80429c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8042a0:	e0bffd17 	ldw	r2,-12(fp)
  8042a4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8042a8:	00802074 	movhi	r2,129
  8042ac:	10a08904 	addi	r2,r2,-32220
  8042b0:	10800017 	ldw	r2,0(r2)
  8042b4:	1809883a 	mov	r4,r3
  8042b8:	100b883a 	mov	r5,r2
  8042bc:	01802034 	movhi	r6,128
  8042c0:	31913c04 	addi	r6,r6,17648
  8042c4:	e1fffd17 	ldw	r7,-12(fp)
  8042c8:	08052300 	call	805230 <alt_alarm_start>
  8042cc:	1000040e 	bge	r2,zero,8042e0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8042d0:	e0bffd17 	ldw	r2,-12(fp)
  8042d4:	00e00034 	movhi	r3,32768
  8042d8:	18ffffc4 	addi	r3,r3,-1
  8042dc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8042e0:	e037883a 	mov	sp,fp
  8042e4:	dfc00117 	ldw	ra,4(sp)
  8042e8:	df000017 	ldw	fp,0(sp)
  8042ec:	dec00204 	addi	sp,sp,8
  8042f0:	f800283a 	ret

008042f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8042f4:	defff804 	addi	sp,sp,-32
  8042f8:	df000715 	stw	fp,28(sp)
  8042fc:	df000704 	addi	fp,sp,28
  804300:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  804304:	e0bfff17 	ldw	r2,-4(fp)
  804308:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80430c:	e0bffb17 	ldw	r2,-20(fp)
  804310:	10800017 	ldw	r2,0(r2)
  804314:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804318:	e0bffc17 	ldw	r2,-16(fp)
  80431c:	10800104 	addi	r2,r2,4
  804320:	10800037 	ldwio	r2,0(r2)
  804324:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  804328:	e0bffd17 	ldw	r2,-12(fp)
  80432c:	1080c00c 	andi	r2,r2,768
  804330:	1000011e 	bne	r2,zero,804338 <altera_avalon_jtag_uart_irq+0x44>
      break;
  804334:	00006a06 	br	8044e0 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  804338:	e0bffd17 	ldw	r2,-12(fp)
  80433c:	1080400c 	andi	r2,r2,256
  804340:	10003226 	beq	r2,zero,80440c <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  804344:	00800074 	movhi	r2,1
  804348:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80434c:	e0bffb17 	ldw	r2,-20(fp)
  804350:	10800a17 	ldw	r2,40(r2)
  804354:	10800044 	addi	r2,r2,1
  804358:	1081ffcc 	andi	r2,r2,2047
  80435c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  804360:	e0bffb17 	ldw	r2,-20(fp)
  804364:	10c00b17 	ldw	r3,44(r2)
  804368:	e0bffe17 	ldw	r2,-8(fp)
  80436c:	1880011e 	bne	r3,r2,804374 <altera_avalon_jtag_uart_irq+0x80>
          break;
  804370:	00001506 	br	8043c8 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804374:	e0bffc17 	ldw	r2,-16(fp)
  804378:	10800037 	ldwio	r2,0(r2)
  80437c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804380:	e0bff917 	ldw	r2,-28(fp)
  804384:	10a0000c 	andi	r2,r2,32768
  804388:	1000011e 	bne	r2,zero,804390 <altera_avalon_jtag_uart_irq+0x9c>
          break;
  80438c:	00000e06 	br	8043c8 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804390:	e0bffb17 	ldw	r2,-20(fp)
  804394:	10800a17 	ldw	r2,40(r2)
  804398:	e0fff917 	ldw	r3,-28(fp)
  80439c:	e13ffb17 	ldw	r4,-20(fp)
  8043a0:	2085883a 	add	r2,r4,r2
  8043a4:	10800e04 	addi	r2,r2,56
  8043a8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8043ac:	e0bffb17 	ldw	r2,-20(fp)
  8043b0:	10800a17 	ldw	r2,40(r2)
  8043b4:	10800044 	addi	r2,r2,1
  8043b8:	10c1ffcc 	andi	r3,r2,2047
  8043bc:	e0bffb17 	ldw	r2,-20(fp)
  8043c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8043c4:	003fe106 	br	80434c <__reset+0xff80334c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8043c8:	e0bff917 	ldw	r2,-28(fp)
  8043cc:	10bfffec 	andhi	r2,r2,65535
  8043d0:	10000e26 	beq	r2,zero,80440c <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8043d4:	e0bffb17 	ldw	r2,-20(fp)
  8043d8:	10c00817 	ldw	r3,32(r2)
  8043dc:	00bfff84 	movi	r2,-2
  8043e0:	1886703a 	and	r3,r3,r2
  8043e4:	e0bffb17 	ldw	r2,-20(fp)
  8043e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8043ec:	e0bffc17 	ldw	r2,-16(fp)
  8043f0:	10800104 	addi	r2,r2,4
  8043f4:	e0fffb17 	ldw	r3,-20(fp)
  8043f8:	18c00817 	ldw	r3,32(r3)
  8043fc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804400:	e0bffc17 	ldw	r2,-16(fp)
  804404:	10800104 	addi	r2,r2,4
  804408:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80440c:	e0bffd17 	ldw	r2,-12(fp)
  804410:	1080800c 	andi	r2,r2,512
  804414:	10003126 	beq	r2,zero,8044dc <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  804418:	e0bffd17 	ldw	r2,-12(fp)
  80441c:	1004d43a 	srli	r2,r2,16
  804420:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  804424:	00001406 	br	804478 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  804428:	e0bffc17 	ldw	r2,-16(fp)
  80442c:	e0fffb17 	ldw	r3,-20(fp)
  804430:	18c00d17 	ldw	r3,52(r3)
  804434:	e13ffb17 	ldw	r4,-20(fp)
  804438:	20c7883a 	add	r3,r4,r3
  80443c:	18c20e04 	addi	r3,r3,2104
  804440:	18c00003 	ldbu	r3,0(r3)
  804444:	18c03fcc 	andi	r3,r3,255
  804448:	18c0201c 	xori	r3,r3,128
  80444c:	18ffe004 	addi	r3,r3,-128
  804450:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804454:	e0bffb17 	ldw	r2,-20(fp)
  804458:	10800d17 	ldw	r2,52(r2)
  80445c:	10800044 	addi	r2,r2,1
  804460:	10c1ffcc 	andi	r3,r2,2047
  804464:	e0bffb17 	ldw	r2,-20(fp)
  804468:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80446c:	e0bffa17 	ldw	r2,-24(fp)
  804470:	10bfffc4 	addi	r2,r2,-1
  804474:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804478:	e0bffa17 	ldw	r2,-24(fp)
  80447c:	10000526 	beq	r2,zero,804494 <altera_avalon_jtag_uart_irq+0x1a0>
  804480:	e0bffb17 	ldw	r2,-20(fp)
  804484:	10c00d17 	ldw	r3,52(r2)
  804488:	e0bffb17 	ldw	r2,-20(fp)
  80448c:	10800c17 	ldw	r2,48(r2)
  804490:	18bfe51e 	bne	r3,r2,804428 <__reset+0xff803428>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804494:	e0bffa17 	ldw	r2,-24(fp)
  804498:	10001026 	beq	r2,zero,8044dc <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80449c:	e0bffb17 	ldw	r2,-20(fp)
  8044a0:	10c00817 	ldw	r3,32(r2)
  8044a4:	00bfff44 	movi	r2,-3
  8044a8:	1886703a 	and	r3,r3,r2
  8044ac:	e0bffb17 	ldw	r2,-20(fp)
  8044b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8044b4:	e0bffb17 	ldw	r2,-20(fp)
  8044b8:	10800017 	ldw	r2,0(r2)
  8044bc:	10800104 	addi	r2,r2,4
  8044c0:	e0fffb17 	ldw	r3,-20(fp)
  8044c4:	18c00817 	ldw	r3,32(r3)
  8044c8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8044cc:	e0bffc17 	ldw	r2,-16(fp)
  8044d0:	10800104 	addi	r2,r2,4
  8044d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8044d8:	003f8f06 	br	804318 <__reset+0xff803318>
  8044dc:	003f8e06 	br	804318 <__reset+0xff803318>
}
  8044e0:	e037883a 	mov	sp,fp
  8044e4:	df000017 	ldw	fp,0(sp)
  8044e8:	dec00104 	addi	sp,sp,4
  8044ec:	f800283a 	ret

008044f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8044f0:	defff804 	addi	sp,sp,-32
  8044f4:	df000715 	stw	fp,28(sp)
  8044f8:	df000704 	addi	fp,sp,28
  8044fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  804500:	e0bffb17 	ldw	r2,-20(fp)
  804504:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  804508:	e0bff917 	ldw	r2,-28(fp)
  80450c:	10800017 	ldw	r2,0(r2)
  804510:	10800104 	addi	r2,r2,4
  804514:	10800037 	ldwio	r2,0(r2)
  804518:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80451c:	e0bffa17 	ldw	r2,-24(fp)
  804520:	1081000c 	andi	r2,r2,1024
  804524:	10000a26 	beq	r2,zero,804550 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804528:	e0bff917 	ldw	r2,-28(fp)
  80452c:	10800017 	ldw	r2,0(r2)
  804530:	10800104 	addi	r2,r2,4
  804534:	e0fff917 	ldw	r3,-28(fp)
  804538:	18c00817 	ldw	r3,32(r3)
  80453c:	18c10014 	ori	r3,r3,1024
  804540:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  804544:	e0bff917 	ldw	r2,-28(fp)
  804548:	10000915 	stw	zero,36(r2)
  80454c:	00000a06 	br	804578 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804550:	e0bff917 	ldw	r2,-28(fp)
  804554:	10800917 	ldw	r2,36(r2)
  804558:	00e00034 	movhi	r3,32768
  80455c:	18ffff04 	addi	r3,r3,-4
  804560:	18800536 	bltu	r3,r2,804578 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
  804564:	e0bff917 	ldw	r2,-28(fp)
  804568:	10800917 	ldw	r2,36(r2)
  80456c:	10c00044 	addi	r3,r2,1
  804570:	e0bff917 	ldw	r2,-28(fp)
  804574:	10c00915 	stw	r3,36(r2)
  804578:	00802074 	movhi	r2,129
  80457c:	10a08904 	addi	r2,r2,-32220
  804580:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804584:	e037883a 	mov	sp,fp
  804588:	df000017 	ldw	fp,0(sp)
  80458c:	dec00104 	addi	sp,sp,4
  804590:	f800283a 	ret

00804594 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804594:	defffd04 	addi	sp,sp,-12
  804598:	df000215 	stw	fp,8(sp)
  80459c:	df000204 	addi	fp,sp,8
  8045a0:	e13ffe15 	stw	r4,-8(fp)
  8045a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8045a8:	00000506 	br	8045c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8045ac:	e0bfff17 	ldw	r2,-4(fp)
  8045b0:	1090000c 	andi	r2,r2,16384
  8045b4:	10000226 	beq	r2,zero,8045c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8045b8:	00bffd44 	movi	r2,-11
  8045bc:	00000b06 	br	8045ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8045c0:	e0bffe17 	ldw	r2,-8(fp)
  8045c4:	10c00d17 	ldw	r3,52(r2)
  8045c8:	e0bffe17 	ldw	r2,-8(fp)
  8045cc:	10800c17 	ldw	r2,48(r2)
  8045d0:	18800526 	beq	r3,r2,8045e8 <altera_avalon_jtag_uart_close+0x54>
  8045d4:	e0bffe17 	ldw	r2,-8(fp)
  8045d8:	10c00917 	ldw	r3,36(r2)
  8045dc:	e0bffe17 	ldw	r2,-8(fp)
  8045e0:	10800117 	ldw	r2,4(r2)
  8045e4:	18bff136 	bltu	r3,r2,8045ac <__reset+0xff8035ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8045e8:	0005883a 	mov	r2,zero
}
  8045ec:	e037883a 	mov	sp,fp
  8045f0:	df000017 	ldw	fp,0(sp)
  8045f4:	dec00104 	addi	sp,sp,4
  8045f8:	f800283a 	ret

008045fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8045fc:	defffa04 	addi	sp,sp,-24
  804600:	df000515 	stw	fp,20(sp)
  804604:	df000504 	addi	fp,sp,20
  804608:	e13ffd15 	stw	r4,-12(fp)
  80460c:	e17ffe15 	stw	r5,-8(fp)
  804610:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  804614:	00bff9c4 	movi	r2,-25
  804618:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80461c:	e0bffe17 	ldw	r2,-8(fp)
  804620:	10da8060 	cmpeqi	r3,r2,27137
  804624:	1800031e 	bne	r3,zero,804634 <altera_avalon_jtag_uart_ioctl+0x38>
  804628:	109a80a0 	cmpeqi	r2,r2,27138
  80462c:	1000191e 	bne	r2,zero,804694 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  804630:	00002806 	br	8046d4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804634:	e0bffd17 	ldw	r2,-12(fp)
  804638:	10c00117 	ldw	r3,4(r2)
  80463c:	00a00034 	movhi	r2,32768
  804640:	10bfffc4 	addi	r2,r2,-1
  804644:	18801226 	beq	r3,r2,804690 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  804648:	e0bfff17 	ldw	r2,-4(fp)
  80464c:	10800017 	ldw	r2,0(r2)
  804650:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804654:	e0bffc17 	ldw	r2,-16(fp)
  804658:	10800090 	cmplti	r2,r2,2
  80465c:	1000061e 	bne	r2,zero,804678 <altera_avalon_jtag_uart_ioctl+0x7c>
  804660:	e0fffc17 	ldw	r3,-16(fp)
  804664:	00a00034 	movhi	r2,32768
  804668:	10bfffc4 	addi	r2,r2,-1
  80466c:	18800226 	beq	r3,r2,804678 <altera_avalon_jtag_uart_ioctl+0x7c>
  804670:	e0bffc17 	ldw	r2,-16(fp)
  804674:	00000206 	br	804680 <altera_avalon_jtag_uart_ioctl+0x84>
  804678:	00a00034 	movhi	r2,32768
  80467c:	10bfff84 	addi	r2,r2,-2
  804680:	e0fffd17 	ldw	r3,-12(fp)
  804684:	18800115 	stw	r2,4(r3)
      rc = 0;
  804688:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80468c:	00001106 	br	8046d4 <altera_avalon_jtag_uart_ioctl+0xd8>
  804690:	00001006 	br	8046d4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804694:	e0bffd17 	ldw	r2,-12(fp)
  804698:	10c00117 	ldw	r3,4(r2)
  80469c:	00a00034 	movhi	r2,32768
  8046a0:	10bfffc4 	addi	r2,r2,-1
  8046a4:	18800a26 	beq	r3,r2,8046d0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8046a8:	e0bffd17 	ldw	r2,-12(fp)
  8046ac:	10c00917 	ldw	r3,36(r2)
  8046b0:	e0bffd17 	ldw	r2,-12(fp)
  8046b4:	10800117 	ldw	r2,4(r2)
  8046b8:	1885803a 	cmpltu	r2,r3,r2
  8046bc:	10c03fcc 	andi	r3,r2,255
  8046c0:	e0bfff17 	ldw	r2,-4(fp)
  8046c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8046c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8046cc:	00000006 	br	8046d0 <altera_avalon_jtag_uart_ioctl+0xd4>
  8046d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8046d4:	e0bffb17 	ldw	r2,-20(fp)
}
  8046d8:	e037883a 	mov	sp,fp
  8046dc:	df000017 	ldw	fp,0(sp)
  8046e0:	dec00104 	addi	sp,sp,4
  8046e4:	f800283a 	ret

008046e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8046e8:	defff304 	addi	sp,sp,-52
  8046ec:	dfc00c15 	stw	ra,48(sp)
  8046f0:	df000b15 	stw	fp,44(sp)
  8046f4:	df000b04 	addi	fp,sp,44
  8046f8:	e13ffc15 	stw	r4,-16(fp)
  8046fc:	e17ffd15 	stw	r5,-12(fp)
  804700:	e1bffe15 	stw	r6,-8(fp)
  804704:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  804708:	e0bffd17 	ldw	r2,-12(fp)
  80470c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804710:	00004906 	br	804838 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804714:	e0bffc17 	ldw	r2,-16(fp)
  804718:	10800a17 	ldw	r2,40(r2)
  80471c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804720:	e0bffc17 	ldw	r2,-16(fp)
  804724:	10800b17 	ldw	r2,44(r2)
  804728:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80472c:	e0fff717 	ldw	r3,-36(fp)
  804730:	e0bff817 	ldw	r2,-32(fp)
  804734:	18800536 	bltu	r3,r2,80474c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804738:	e0fff717 	ldw	r3,-36(fp)
  80473c:	e0bff817 	ldw	r2,-32(fp)
  804740:	1885c83a 	sub	r2,r3,r2
  804744:	e0bff615 	stw	r2,-40(fp)
  804748:	00000406 	br	80475c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80474c:	00c20004 	movi	r3,2048
  804750:	e0bff817 	ldw	r2,-32(fp)
  804754:	1885c83a 	sub	r2,r3,r2
  804758:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80475c:	e0bff617 	ldw	r2,-40(fp)
  804760:	1000011e 	bne	r2,zero,804768 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  804764:	00001d06 	br	8047dc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  804768:	e0fffe17 	ldw	r3,-8(fp)
  80476c:	e0bff617 	ldw	r2,-40(fp)
  804770:	1880022e 	bgeu	r3,r2,80477c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  804774:	e0bffe17 	ldw	r2,-8(fp)
  804778:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80477c:	e0bff817 	ldw	r2,-32(fp)
  804780:	10800e04 	addi	r2,r2,56
  804784:	e0fffc17 	ldw	r3,-16(fp)
  804788:	1885883a 	add	r2,r3,r2
  80478c:	e13ff517 	ldw	r4,-44(fp)
  804790:	100b883a 	mov	r5,r2
  804794:	e1bff617 	ldw	r6,-40(fp)
  804798:	08010d80 	call	8010d8 <memcpy>
      ptr   += n;
  80479c:	e0fff517 	ldw	r3,-44(fp)
  8047a0:	e0bff617 	ldw	r2,-40(fp)
  8047a4:	1885883a 	add	r2,r3,r2
  8047a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8047ac:	e0fffe17 	ldw	r3,-8(fp)
  8047b0:	e0bff617 	ldw	r2,-40(fp)
  8047b4:	1885c83a 	sub	r2,r3,r2
  8047b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8047bc:	e0fff817 	ldw	r3,-32(fp)
  8047c0:	e0bff617 	ldw	r2,-40(fp)
  8047c4:	1885883a 	add	r2,r3,r2
  8047c8:	10c1ffcc 	andi	r3,r2,2047
  8047cc:	e0bffc17 	ldw	r2,-16(fp)
  8047d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8047d4:	e0bffe17 	ldw	r2,-8(fp)
  8047d8:	00bfce16 	blt	zero,r2,804714 <__reset+0xff803714>

    /* If we read any data then return it */
    if (ptr != buffer)
  8047dc:	e0fff517 	ldw	r3,-44(fp)
  8047e0:	e0bffd17 	ldw	r2,-12(fp)
  8047e4:	18800126 	beq	r3,r2,8047ec <altera_avalon_jtag_uart_read+0x104>
      break;
  8047e8:	00001506 	br	804840 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8047ec:	e0bfff17 	ldw	r2,-4(fp)
  8047f0:	1090000c 	andi	r2,r2,16384
  8047f4:	10000126 	beq	r2,zero,8047fc <altera_avalon_jtag_uart_read+0x114>
      break;
  8047f8:	00001106 	br	804840 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8047fc:	0001883a 	nop
  804800:	e0bffc17 	ldw	r2,-16(fp)
  804804:	10c00a17 	ldw	r3,40(r2)
  804808:	e0bff717 	ldw	r2,-36(fp)
  80480c:	1880051e 	bne	r3,r2,804824 <altera_avalon_jtag_uart_read+0x13c>
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	10c00917 	ldw	r3,36(r2)
  804818:	e0bffc17 	ldw	r2,-16(fp)
  80481c:	10800117 	ldw	r2,4(r2)
  804820:	18bff736 	bltu	r3,r2,804800 <__reset+0xff803800>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  804824:	e0bffc17 	ldw	r2,-16(fp)
  804828:	10c00a17 	ldw	r3,40(r2)
  80482c:	e0bff717 	ldw	r2,-36(fp)
  804830:	1880011e 	bne	r3,r2,804838 <altera_avalon_jtag_uart_read+0x150>
      break;
  804834:	00000206 	br	804840 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804838:	e0bffe17 	ldw	r2,-8(fp)
  80483c:	00bfb516 	blt	zero,r2,804714 <__reset+0xff803714>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  804840:	e0fff517 	ldw	r3,-44(fp)
  804844:	e0bffd17 	ldw	r2,-12(fp)
  804848:	18801726 	beq	r3,r2,8048a8 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80484c:	0005303a 	rdctl	r2,status
  804850:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804854:	e0fffa17 	ldw	r3,-24(fp)
  804858:	00bfff84 	movi	r2,-2
  80485c:	1884703a 	and	r2,r3,r2
  804860:	1001703a 	wrctl	status,r2
  
  return context;
  804864:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804868:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10800817 	ldw	r2,32(r2)
  804874:	10c00054 	ori	r3,r2,1
  804878:	e0bffc17 	ldw	r2,-16(fp)
  80487c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10800017 	ldw	r2,0(r2)
  804888:	10800104 	addi	r2,r2,4
  80488c:	e0fffc17 	ldw	r3,-16(fp)
  804890:	18c00817 	ldw	r3,32(r3)
  804894:	10c00035 	stwio	r3,0(r2)
  804898:	e0bff917 	ldw	r2,-28(fp)
  80489c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8048a0:	e0bffb17 	ldw	r2,-20(fp)
  8048a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8048a8:	e0fff517 	ldw	r3,-44(fp)
  8048ac:	e0bffd17 	ldw	r2,-12(fp)
  8048b0:	18800426 	beq	r3,r2,8048c4 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
  8048b4:	e0fff517 	ldw	r3,-44(fp)
  8048b8:	e0bffd17 	ldw	r2,-12(fp)
  8048bc:	1885c83a 	sub	r2,r3,r2
  8048c0:	00000606 	br	8048dc <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
  8048c4:	e0bfff17 	ldw	r2,-4(fp)
  8048c8:	1090000c 	andi	r2,r2,16384
  8048cc:	10000226 	beq	r2,zero,8048d8 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
  8048d0:	00bffd44 	movi	r2,-11
  8048d4:	00000106 	br	8048dc <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
  8048d8:	00bffec4 	movi	r2,-5
}
  8048dc:	e037883a 	mov	sp,fp
  8048e0:	dfc00117 	ldw	ra,4(sp)
  8048e4:	df000017 	ldw	fp,0(sp)
  8048e8:	dec00204 	addi	sp,sp,8
  8048ec:	f800283a 	ret

008048f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8048f0:	defff304 	addi	sp,sp,-52
  8048f4:	dfc00c15 	stw	ra,48(sp)
  8048f8:	df000b15 	stw	fp,44(sp)
  8048fc:	df000b04 	addi	fp,sp,44
  804900:	e13ffc15 	stw	r4,-16(fp)
  804904:	e17ffd15 	stw	r5,-12(fp)
  804908:	e1bffe15 	stw	r6,-8(fp)
  80490c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804910:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804914:	e0bffd17 	ldw	r2,-12(fp)
  804918:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80491c:	00003906 	br	804a04 <altera_avalon_jtag_uart_write+0x114>
  804920:	00003806 	br	804a04 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804924:	e0bffc17 	ldw	r2,-16(fp)
  804928:	10800c17 	ldw	r2,48(r2)
  80492c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  804930:	e0bffc17 	ldw	r2,-16(fp)
  804934:	10800d17 	ldw	r2,52(r2)
  804938:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80493c:	e0fff817 	ldw	r3,-32(fp)
  804940:	e0bff517 	ldw	r2,-44(fp)
  804944:	1880062e 	bgeu	r3,r2,804960 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
  804948:	e0fff517 	ldw	r3,-44(fp)
  80494c:	e0bff817 	ldw	r2,-32(fp)
  804950:	1885c83a 	sub	r2,r3,r2
  804954:	10bfffc4 	addi	r2,r2,-1
  804958:	e0bff615 	stw	r2,-40(fp)
  80495c:	00000b06 	br	80498c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  804960:	e0bff517 	ldw	r2,-44(fp)
  804964:	10000526 	beq	r2,zero,80497c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804968:	00c20004 	movi	r3,2048
  80496c:	e0bff817 	ldw	r2,-32(fp)
  804970:	1885c83a 	sub	r2,r3,r2
  804974:	e0bff615 	stw	r2,-40(fp)
  804978:	00000406 	br	80498c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80497c:	00c1ffc4 	movi	r3,2047
  804980:	e0bff817 	ldw	r2,-32(fp)
  804984:	1885c83a 	sub	r2,r3,r2
  804988:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80498c:	e0bff617 	ldw	r2,-40(fp)
  804990:	1000011e 	bne	r2,zero,804998 <altera_avalon_jtag_uart_write+0xa8>
        break;
  804994:	00001d06 	br	804a0c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
  804998:	e0fffe17 	ldw	r3,-8(fp)
  80499c:	e0bff617 	ldw	r2,-40(fp)
  8049a0:	1880022e 	bgeu	r3,r2,8049ac <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8049a4:	e0bffe17 	ldw	r2,-8(fp)
  8049a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8049ac:	e0bff817 	ldw	r2,-32(fp)
  8049b0:	10820e04 	addi	r2,r2,2104
  8049b4:	e0fffc17 	ldw	r3,-16(fp)
  8049b8:	1885883a 	add	r2,r3,r2
  8049bc:	1009883a 	mov	r4,r2
  8049c0:	e17ffd17 	ldw	r5,-12(fp)
  8049c4:	e1bff617 	ldw	r6,-40(fp)
  8049c8:	08010d80 	call	8010d8 <memcpy>
      ptr   += n;
  8049cc:	e0fffd17 	ldw	r3,-12(fp)
  8049d0:	e0bff617 	ldw	r2,-40(fp)
  8049d4:	1885883a 	add	r2,r3,r2
  8049d8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8049dc:	e0fffe17 	ldw	r3,-8(fp)
  8049e0:	e0bff617 	ldw	r2,-40(fp)
  8049e4:	1885c83a 	sub	r2,r3,r2
  8049e8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8049ec:	e0fff817 	ldw	r3,-32(fp)
  8049f0:	e0bff617 	ldw	r2,-40(fp)
  8049f4:	1885883a 	add	r2,r3,r2
  8049f8:	10c1ffcc 	andi	r3,r2,2047
  8049fc:	e0bffc17 	ldw	r2,-16(fp)
  804a00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804a04:	e0bffe17 	ldw	r2,-8(fp)
  804a08:	00bfc616 	blt	zero,r2,804924 <__reset+0xff803924>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a0c:	0005303a 	rdctl	r2,status
  804a10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a14:	e0fffa17 	ldw	r3,-24(fp)
  804a18:	00bfff84 	movi	r2,-2
  804a1c:	1884703a 	and	r2,r3,r2
  804a20:	1001703a 	wrctl	status,r2
  
  return context;
  804a24:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804a28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10800817 	ldw	r2,32(r2)
  804a34:	10c00094 	ori	r3,r2,2
  804a38:	e0bffc17 	ldw	r2,-16(fp)
  804a3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804a40:	e0bffc17 	ldw	r2,-16(fp)
  804a44:	10800017 	ldw	r2,0(r2)
  804a48:	10800104 	addi	r2,r2,4
  804a4c:	e0fffc17 	ldw	r3,-16(fp)
  804a50:	18c00817 	ldw	r3,32(r3)
  804a54:	10c00035 	stwio	r3,0(r2)
  804a58:	e0bff917 	ldw	r2,-28(fp)
  804a5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a60:	e0bffb17 	ldw	r2,-20(fp)
  804a64:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  804a68:	e0bffe17 	ldw	r2,-8(fp)
  804a6c:	0080120e 	bge	zero,r2,804ab8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  804a70:	e0bfff17 	ldw	r2,-4(fp)
  804a74:	1090000c 	andi	r2,r2,16384
  804a78:	10000126 	beq	r2,zero,804a80 <altera_avalon_jtag_uart_write+0x190>
        break;
  804a7c:	00001006 	br	804ac0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804a80:	0001883a 	nop
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	10c00d17 	ldw	r3,52(r2)
  804a8c:	e0bff517 	ldw	r2,-44(fp)
  804a90:	1880051e 	bne	r3,r2,804aa8 <altera_avalon_jtag_uart_write+0x1b8>
  804a94:	e0bffc17 	ldw	r2,-16(fp)
  804a98:	10c00917 	ldw	r3,36(r2)
  804a9c:	e0bffc17 	ldw	r2,-16(fp)
  804aa0:	10800117 	ldw	r2,4(r2)
  804aa4:	18bff736 	bltu	r3,r2,804a84 <__reset+0xff803a84>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  804aa8:	e0bffc17 	ldw	r2,-16(fp)
  804aac:	10800917 	ldw	r2,36(r2)
  804ab0:	10000126 	beq	r2,zero,804ab8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  804ab4:	00000206 	br	804ac0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  804ab8:	e0bffe17 	ldw	r2,-8(fp)
  804abc:	00bf9816 	blt	zero,r2,804920 <__reset+0xff803920>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  804ac0:	e0fffd17 	ldw	r3,-12(fp)
  804ac4:	e0bff717 	ldw	r2,-36(fp)
  804ac8:	18800426 	beq	r3,r2,804adc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  804acc:	e0fffd17 	ldw	r3,-12(fp)
  804ad0:	e0bff717 	ldw	r2,-36(fp)
  804ad4:	1885c83a 	sub	r2,r3,r2
  804ad8:	00000606 	br	804af4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  804adc:	e0bfff17 	ldw	r2,-4(fp)
  804ae0:	1090000c 	andi	r2,r2,16384
  804ae4:	10000226 	beq	r2,zero,804af0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  804ae8:	00bffd44 	movi	r2,-11
  804aec:	00000106 	br	804af4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804af0:	00bffec4 	movi	r2,-5
}
  804af4:	e037883a 	mov	sp,fp
  804af8:	dfc00117 	ldw	ra,4(sp)
  804afc:	df000017 	ldw	fp,0(sp)
  804b00:	dec00204 	addi	sp,sp,8
  804b04:	f800283a 	ret

00804b08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  804b08:	defffa04 	addi	sp,sp,-24
  804b0c:	dfc00515 	stw	ra,20(sp)
  804b10:	df000415 	stw	fp,16(sp)
  804b14:	df000404 	addi	fp,sp,16
  804b18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  804b1c:	0007883a 	mov	r3,zero
  804b20:	e0bfff17 	ldw	r2,-4(fp)
  804b24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  804b28:	e0bfff17 	ldw	r2,-4(fp)
  804b2c:	10800104 	addi	r2,r2,4
  804b30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b34:	0005303a 	rdctl	r2,status
  804b38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b3c:	e0fffd17 	ldw	r3,-12(fp)
  804b40:	00bfff84 	movi	r2,-2
  804b44:	1884703a 	and	r2,r3,r2
  804b48:	1001703a 	wrctl	status,r2
  
  return context;
  804b4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  804b50:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  804b54:	0805d280 	call	805d28 <alt_tick>
  804b58:	e0bffc17 	ldw	r2,-16(fp)
  804b5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b60:	e0bffe17 	ldw	r2,-8(fp)
  804b64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  804b68:	e037883a 	mov	sp,fp
  804b6c:	dfc00117 	ldw	ra,4(sp)
  804b70:	df000017 	ldw	fp,0(sp)
  804b74:	dec00204 	addi	sp,sp,8
  804b78:	f800283a 	ret

00804b7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  804b7c:	defff804 	addi	sp,sp,-32
  804b80:	dfc00715 	stw	ra,28(sp)
  804b84:	df000615 	stw	fp,24(sp)
  804b88:	df000604 	addi	fp,sp,24
  804b8c:	e13ffc15 	stw	r4,-16(fp)
  804b90:	e17ffd15 	stw	r5,-12(fp)
  804b94:	e1bffe15 	stw	r6,-8(fp)
  804b98:	e1ffff15 	stw	r7,-4(fp)
  804b9c:	e0bfff17 	ldw	r2,-4(fp)
  804ba0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  804ba4:	00802074 	movhi	r2,129
  804ba8:	10a08904 	addi	r2,r2,-32220
  804bac:	10800017 	ldw	r2,0(r2)
  804bb0:	1000041e 	bne	r2,zero,804bc4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  804bb4:	00802074 	movhi	r2,129
  804bb8:	10a08904 	addi	r2,r2,-32220
  804bbc:	e0fffb17 	ldw	r3,-20(fp)
  804bc0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  804bc4:	e0bffc17 	ldw	r2,-16(fp)
  804bc8:	10800104 	addi	r2,r2,4
  804bcc:	00c001c4 	movi	r3,7
  804bd0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  804bd4:	d8000015 	stw	zero,0(sp)
  804bd8:	e13ffd17 	ldw	r4,-12(fp)
  804bdc:	e17ffe17 	ldw	r5,-8(fp)
  804be0:	01802034 	movhi	r6,128
  804be4:	3192c204 	addi	r6,r6,19208
  804be8:	e1fffc17 	ldw	r7,-16(fp)
  804bec:	08055d00 	call	8055d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  804bf0:	e037883a 	mov	sp,fp
  804bf4:	dfc00117 	ldw	ra,4(sp)
  804bf8:	df000017 	ldw	fp,0(sp)
  804bfc:	dec00204 	addi	sp,sp,8
  804c00:	f800283a 	ret

00804c04 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  804c04:	defff904 	addi	sp,sp,-28
  804c08:	dfc00615 	stw	ra,24(sp)
  804c0c:	df000515 	stw	fp,20(sp)
  804c10:	df000504 	addi	fp,sp,20
  804c14:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
  804c18:	00800144 	movi	r2,5
  804c1c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
  804c20:	00800044 	movi	r2,1
  804c24:	d8800015 	stw	r2,0(sp)
  804c28:	e0bffe44 	addi	r2,fp,-7
  804c2c:	d8800115 	stw	r2,4(sp)
  804c30:	d8000215 	stw	zero,8(sp)
  804c34:	e13fff17 	ldw	r4,-4(fp)
  804c38:	000b883a 	mov	r5,zero
  804c3c:	01800044 	movi	r6,1
  804c40:	e1fffe04 	addi	r7,fp,-8
  804c44:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
  804c48:	e0bffe43 	ldbu	r2,-7(fp)
}
  804c4c:	e037883a 	mov	sp,fp
  804c50:	dfc00117 	ldw	ra,4(sp)
  804c54:	df000017 	ldw	fp,0(sp)
  804c58:	dec00204 	addi	sp,sp,8
  804c5c:	f800283a 	ret

00804c60 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  804c60:	defffd04 	addi	sp,sp,-12
  804c64:	dfc00215 	stw	ra,8(sp)
  804c68:	df000115 	stw	fp,4(sp)
  804c6c:	df000104 	addi	fp,sp,4
  804c70:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
  804c74:	e13fff17 	ldw	r4,-4(fp)
  804c78:	0804c040 	call	804c04 <epcs_read_status_register>
  804c7c:	10803fcc 	andi	r2,r2,255
  804c80:	1080004c 	andi	r2,r2,1
}
  804c84:	e037883a 	mov	sp,fp
  804c88:	dfc00117 	ldw	ra,4(sp)
  804c8c:	df000017 	ldw	fp,0(sp)
  804c90:	dec00204 	addi	sp,sp,8
  804c94:	f800283a 	ret

00804c98 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  804c98:	defffd04 	addi	sp,sp,-12
  804c9c:	dfc00215 	stw	ra,8(sp)
  804ca0:	df000115 	stw	fp,4(sp)
  804ca4:	df000104 	addi	fp,sp,4
  804ca8:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
  804cac:	0001883a 	nop
  804cb0:	e13fff17 	ldw	r4,-4(fp)
  804cb4:	0804c600 	call	804c60 <epcs_test_wip>
  804cb8:	103ffd1e 	bne	r2,zero,804cb0 <__reset+0xff803cb0>
  {
  }
}
  804cbc:	e037883a 	mov	sp,fp
  804cc0:	dfc00117 	ldw	ra,4(sp)
  804cc4:	df000017 	ldw	fp,0(sp)
  804cc8:	dec00204 	addi	sp,sp,8
  804ccc:	f800283a 	ret

00804cd0 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
  804cd0:	defff604 	addi	sp,sp,-40
  804cd4:	dfc00915 	stw	ra,36(sp)
  804cd8:	df000815 	stw	fp,32(sp)
  804cdc:	df000804 	addi	fp,sp,32
  804ce0:	e13ffd15 	stw	r4,-12(fp)
  804ce4:	e17ffe15 	stw	r5,-8(fp)
  804ce8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  804cec:	e0bfff17 	ldw	r2,-4(fp)
  804cf0:	10001226 	beq	r2,zero,804d3c <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
  804cf4:	00bff604 	movi	r2,-40
  804cf8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
  804cfc:	e0bffe17 	ldw	r2,-8(fp)
  804d00:	1004d63a 	srli	r2,r2,24
  804d04:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
  804d08:	e0bffe17 	ldw	r2,-8(fp)
  804d0c:	1004d43a 	srli	r2,r2,16
  804d10:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
  804d14:	e0bffe17 	ldw	r2,-8(fp)
  804d18:	1004d23a 	srli	r2,r2,8
  804d1c:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
  804d20:	e0bffe17 	ldw	r2,-8(fp)
  804d24:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
  804d28:	00800144 	movi	r2,5
  804d2c:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
  804d30:	e13ffd17 	ldw	r4,-12(fp)
  804d34:	08051780 	call	805178 <epcs_enter_4_bytes_mode>
  804d38:	00000c06 	br	804d6c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
  804d3c:	00bff604 	movi	r2,-40
  804d40:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
  804d44:	e0bffe17 	ldw	r2,-8(fp)
  804d48:	1004d43a 	srli	r2,r2,16
  804d4c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
  804d50:	e0bffe17 	ldw	r2,-8(fp)
  804d54:	1004d23a 	srli	r2,r2,8
  804d58:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
  804d5c:	e0bffe17 	ldw	r2,-8(fp)
  804d60:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
  804d64:	00800104 	movi	r2,4
  804d68:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
  804d6c:	e13ffd17 	ldw	r4,-12(fp)
  804d70:	0804ebc0 	call	804ebc <epcs_write_enable>

  alt_avalon_spi_command(
  804d74:	e0fffb03 	ldbu	r3,-20(fp)
  804d78:	e0bffb44 	addi	r2,fp,-19
  804d7c:	d8000015 	stw	zero,0(sp)
  804d80:	d8000115 	stw	zero,4(sp)
  804d84:	d8000215 	stw	zero,8(sp)
  804d88:	e13ffd17 	ldw	r4,-12(fp)
  804d8c:	000b883a 	mov	r5,zero
  804d90:	180d883a 	mov	r6,r3
  804d94:	100f883a 	mov	r7,r2
  804d98:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  804d9c:	e13ffd17 	ldw	r4,-12(fp)
  804da0:	0804c980 	call	804c98 <epcs_await_wip_released>

  if(four_bytes_mode)
  804da4:	e0bfff17 	ldw	r2,-4(fp)
  804da8:	10000226 	beq	r2,zero,804db4 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
  804dac:	e13ffd17 	ldw	r4,-12(fp)
  804db0:	08051d40 	call	8051d4 <epcs_exit_4_bytes_mode>
  }
}
  804db4:	e037883a 	mov	sp,fp
  804db8:	dfc00117 	ldw	ra,4(sp)
  804dbc:	df000017 	ldw	fp,0(sp)
  804dc0:	dec00204 	addi	sp,sp,8
  804dc4:	f800283a 	ret

00804dc8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
  804dc8:	defff404 	addi	sp,sp,-48
  804dcc:	dfc00b15 	stw	ra,44(sp)
  804dd0:	df000a15 	stw	fp,40(sp)
  804dd4:	df000a04 	addi	fp,sp,40
  804dd8:	e13ffc15 	stw	r4,-16(fp)
  804ddc:	e17ffd15 	stw	r5,-12(fp)
  804de0:	e1bffe15 	stw	r6,-8(fp)
  804de4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  804de8:	008000c4 	movi	r2,3
  804dec:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  804df0:	e0800217 	ldw	r2,8(fp)
  804df4:	10001026 	beq	r2,zero,804e38 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
  804df8:	e0bffd17 	ldw	r2,-12(fp)
  804dfc:	1004d63a 	srli	r2,r2,24
  804e00:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
  804e04:	e0bffd17 	ldw	r2,-12(fp)
  804e08:	1005d43a 	srai	r2,r2,16
  804e0c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
  804e10:	e0bffd17 	ldw	r2,-12(fp)
  804e14:	1005d23a 	srai	r2,r2,8
  804e18:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
  804e1c:	e0bffd17 	ldw	r2,-12(fp)
  804e20:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
  804e24:	00800144 	movi	r2,5
  804e28:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
  804e2c:	e13ffc17 	ldw	r4,-16(fp)
  804e30:	08051780 	call	805178 <epcs_enter_4_bytes_mode>
  804e34:	00000a06 	br	804e60 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
  804e38:	e0bffd17 	ldw	r2,-12(fp)
  804e3c:	1005d43a 	srai	r2,r2,16
  804e40:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
  804e44:	e0bffd17 	ldw	r2,-12(fp)
  804e48:	1005d23a 	srai	r2,r2,8
  804e4c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
  804e50:	e0bffd17 	ldw	r2,-12(fp)
  804e54:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
  804e58:	00800104 	movi	r2,4
  804e5c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
  804e60:	e13ffc17 	ldw	r4,-16(fp)
  804e64:	0804c980 	call	804c98 <epcs_await_wip_released>

  alt_avalon_spi_command(
  804e68:	e0ffff17 	ldw	r3,-4(fp)
  804e6c:	e0bffa04 	addi	r2,fp,-24
  804e70:	d8c00015 	stw	r3,0(sp)
  804e74:	e0fffe17 	ldw	r3,-8(fp)
  804e78:	d8c00115 	stw	r3,4(sp)
  804e7c:	d8000215 	stw	zero,8(sp)
  804e80:	e13ffc17 	ldw	r4,-16(fp)
  804e84:	000b883a 	mov	r5,zero
  804e88:	e1bff917 	ldw	r6,-28(fp)
  804e8c:	100f883a 	mov	r7,r2
  804e90:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
  804e94:	e0800217 	ldw	r2,8(fp)
  804e98:	10000226 	beq	r2,zero,804ea4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
  804e9c:	e13ffc17 	ldw	r4,-16(fp)
  804ea0:	08051d40 	call	8051d4 <epcs_exit_4_bytes_mode>
  }

  return length;
  804ea4:	e0bfff17 	ldw	r2,-4(fp)
}
  804ea8:	e037883a 	mov	sp,fp
  804eac:	dfc00117 	ldw	ra,4(sp)
  804eb0:	df000017 	ldw	fp,0(sp)
  804eb4:	dec00204 	addi	sp,sp,8
  804eb8:	f800283a 	ret

00804ebc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
  804ebc:	defff904 	addi	sp,sp,-28
  804ec0:	dfc00615 	stw	ra,24(sp)
  804ec4:	df000515 	stw	fp,20(sp)
  804ec8:	df000504 	addi	fp,sp,20
  804ecc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
  804ed0:	00800184 	movi	r2,6
  804ed4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
  804ed8:	d8000015 	stw	zero,0(sp)
  804edc:	d8000115 	stw	zero,4(sp)
  804ee0:	d8000215 	stw	zero,8(sp)
  804ee4:	e13fff17 	ldw	r4,-4(fp)
  804ee8:	000b883a 	mov	r5,zero
  804eec:	01800044 	movi	r6,1
  804ef0:	e1fffe04 	addi	r7,fp,-8
  804ef4:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
  804ef8:	e037883a 	mov	sp,fp
  804efc:	dfc00117 	ldw	ra,4(sp)
  804f00:	df000017 	ldw	fp,0(sp)
  804f04:	dec00204 	addi	sp,sp,8
  804f08:	f800283a 	ret

00804f0c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  804f0c:	defff804 	addi	sp,sp,-32
  804f10:	dfc00715 	stw	ra,28(sp)
  804f14:	df000615 	stw	fp,24(sp)
  804f18:	df000604 	addi	fp,sp,24
  804f1c:	e13ffe15 	stw	r4,-8(fp)
  804f20:	2805883a 	mov	r2,r5
  804f24:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  804f28:	00800044 	movi	r2,1
  804f2c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
  804f30:	e0bfff03 	ldbu	r2,-4(fp)
  804f34:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
  804f38:	d8000015 	stw	zero,0(sp)
  804f3c:	d8000115 	stw	zero,4(sp)
  804f40:	d8000215 	stw	zero,8(sp)
  804f44:	e13ffe17 	ldw	r4,-8(fp)
  804f48:	000b883a 	mov	r5,zero
  804f4c:	01800084 	movi	r6,2
  804f50:	e1fffd04 	addi	r7,fp,-12
  804f54:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
  804f58:	e13ffe17 	ldw	r4,-8(fp)
  804f5c:	0804c980 	call	804c98 <epcs_await_wip_released>
}
  804f60:	e037883a 	mov	sp,fp
  804f64:	dfc00117 	ldw	ra,4(sp)
  804f68:	df000017 	ldw	fp,0(sp)
  804f6c:	dec00204 	addi	sp,sp,8
  804f70:	f800283a 	ret

00804f74 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
  804f74:	defff404 	addi	sp,sp,-48
  804f78:	dfc00b15 	stw	ra,44(sp)
  804f7c:	df000a15 	stw	fp,40(sp)
  804f80:	df000a04 	addi	fp,sp,40
  804f84:	e13ffc15 	stw	r4,-16(fp)
  804f88:	e17ffd15 	stw	r5,-12(fp)
  804f8c:	e1bffe15 	stw	r6,-8(fp)
  804f90:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  804f94:	00800084 	movi	r2,2
  804f98:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
  804f9c:	e0800217 	ldw	r2,8(fp)
  804fa0:	10001026 	beq	r2,zero,804fe4 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
  804fa4:	e0bffd17 	ldw	r2,-12(fp)
  804fa8:	1004d63a 	srli	r2,r2,24
  804fac:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
  804fb0:	e0bffd17 	ldw	r2,-12(fp)
  804fb4:	1005d43a 	srai	r2,r2,16
  804fb8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
  804fbc:	e0bffd17 	ldw	r2,-12(fp)
  804fc0:	1005d23a 	srai	r2,r2,8
  804fc4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
  804fc8:	e0bffd17 	ldw	r2,-12(fp)
  804fcc:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
  804fd0:	00800144 	movi	r2,5
  804fd4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
  804fd8:	e13ffc17 	ldw	r4,-16(fp)
  804fdc:	08051780 	call	805178 <epcs_enter_4_bytes_mode>
  804fe0:	00000a06 	br	80500c <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
  804fe4:	e0bffd17 	ldw	r2,-12(fp)
  804fe8:	1005d43a 	srai	r2,r2,16
  804fec:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
  804ff0:	e0bffd17 	ldw	r2,-12(fp)
  804ff4:	1005d23a 	srai	r2,r2,8
  804ff8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
  804ffc:	e0bffd17 	ldw	r2,-12(fp)
  805000:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
  805004:	00800104 	movi	r2,4
  805008:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
  80500c:	e13ffc17 	ldw	r4,-16(fp)
  805010:	0804ebc0 	call	804ebc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
  805014:	e0bffa04 	addi	r2,fp,-24
  805018:	d8000015 	stw	zero,0(sp)
  80501c:	d8000115 	stw	zero,4(sp)
  805020:	00c00044 	movi	r3,1
  805024:	d8c00215 	stw	r3,8(sp)
  805028:	e13ffc17 	ldw	r4,-16(fp)
  80502c:	000b883a 	mov	r5,zero
  805030:	e1bff917 	ldw	r6,-28(fp)
  805034:	100f883a 	mov	r7,r2
  805038:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
  80503c:	e0bfff17 	ldw	r2,-4(fp)
  805040:	d8000015 	stw	zero,0(sp)
  805044:	d8000115 	stw	zero,4(sp)
  805048:	d8000215 	stw	zero,8(sp)
  80504c:	e13ffc17 	ldw	r4,-16(fp)
  805050:	000b883a 	mov	r5,zero
  805054:	100d883a 	mov	r6,r2
  805058:	e1fffe17 	ldw	r7,-8(fp)
  80505c:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
  805060:	e13ffc17 	ldw	r4,-16(fp)
  805064:	0804c980 	call	804c98 <epcs_await_wip_released>

  if(four_bytes_mode)
  805068:	e0800217 	ldw	r2,8(fp)
  80506c:	10000226 	beq	r2,zero,805078 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
  805070:	e13ffc17 	ldw	r4,-16(fp)
  805074:	08051d40 	call	8051d4 <epcs_exit_4_bytes_mode>
  }

  return length;
  805078:	e0bfff17 	ldw	r2,-4(fp)
}
  80507c:	e037883a 	mov	sp,fp
  805080:	dfc00117 	ldw	ra,4(sp)
  805084:	df000017 	ldw	fp,0(sp)
  805088:	dec00204 	addi	sp,sp,8
  80508c:	f800283a 	ret

00805090 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
  805090:	defff804 	addi	sp,sp,-32
  805094:	dfc00715 	stw	ra,28(sp)
  805098:	df000615 	stw	fp,24(sp)
  80509c:	df000604 	addi	fp,sp,24
  8050a0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
  8050a4:	00bfeac4 	movi	r2,-85
  8050a8:	e0bffd05 	stb	r2,-12(fp)
  8050ac:	e03ffd45 	stb	zero,-11(fp)
  8050b0:	e03ffd85 	stb	zero,-10(fp)
  8050b4:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
  8050b8:	00800044 	movi	r2,1
  8050bc:	d8800015 	stw	r2,0(sp)
  8050c0:	e0bffe04 	addi	r2,fp,-8
  8050c4:	d8800115 	stw	r2,4(sp)
  8050c8:	d8000215 	stw	zero,8(sp)
  8050cc:	e13fff17 	ldw	r4,-4(fp)
  8050d0:	000b883a 	mov	r5,zero
  8050d4:	01800104 	movi	r6,4
  8050d8:	e1fffd04 	addi	r7,fp,-12
  8050dc:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
  8050e0:	e0bffe03 	ldbu	r2,-8(fp)
}
  8050e4:	e037883a 	mov	sp,fp
  8050e8:	dfc00117 	ldw	ra,4(sp)
  8050ec:	df000017 	ldw	fp,0(sp)
  8050f0:	dec00204 	addi	sp,sp,8
  8050f4:	f800283a 	ret

008050f8 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
  8050f8:	defff904 	addi	sp,sp,-28
  8050fc:	dfc00615 	stw	ra,24(sp)
  805100:	df000515 	stw	fp,20(sp)
  805104:	df000504 	addi	fp,sp,20
  805108:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  80510c:	00bfe7c4 	movi	r2,-97
  805110:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
  805114:	008000c4 	movi	r2,3
  805118:	d8800015 	stw	r2,0(sp)
  80511c:	e0bffe44 	addi	r2,fp,-7
  805120:	d8800115 	stw	r2,4(sp)
  805124:	d8000215 	stw	zero,8(sp)
  805128:	e13fff17 	ldw	r4,-4(fp)
  80512c:	000b883a 	mov	r5,zero
  805130:	01800044 	movi	r6,1
  805134:	e1fffe04 	addi	r7,fp,-8
  805138:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
  80513c:	e0bffe43 	ldbu	r2,-7(fp)
  805140:	10803fcc 	andi	r2,r2,255
  805144:	1006943a 	slli	r3,r2,16
  805148:	e0bffe83 	ldbu	r2,-6(fp)
  80514c:	10803fcc 	andi	r2,r2,255
  805150:	1004923a 	slli	r2,r2,8
  805154:	1886b03a 	or	r3,r3,r2
  805158:	e0bffec3 	ldbu	r2,-5(fp)
  80515c:	10803fcc 	andi	r2,r2,255
  805160:	1884b03a 	or	r2,r3,r2
}
  805164:	e037883a 	mov	sp,fp
  805168:	dfc00117 	ldw	ra,4(sp)
  80516c:	df000017 	ldw	fp,0(sp)
  805170:	dec00204 	addi	sp,sp,8
  805174:	f800283a 	ret

00805178 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
  805178:	defff904 	addi	sp,sp,-28
  80517c:	dfc00615 	stw	ra,24(sp)
  805180:	df000515 	stw	fp,20(sp)
  805184:	df000504 	addi	fp,sp,20
  805188:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
  80518c:	00bfedc4 	movi	r2,-73
  805190:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  805194:	e13fff17 	ldw	r4,-4(fp)
  805198:	0804ebc0 	call	804ebc <epcs_write_enable>

  alt_avalon_spi_command(
  80519c:	d8000015 	stw	zero,0(sp)
  8051a0:	d8000115 	stw	zero,4(sp)
  8051a4:	d8000215 	stw	zero,8(sp)
  8051a8:	e13fff17 	ldw	r4,-4(fp)
  8051ac:	000b883a 	mov	r5,zero
  8051b0:	01800044 	movi	r6,1
  8051b4:	e1fffe04 	addi	r7,fp,-8
  8051b8:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  8051bc:	0001883a 	nop
}
  8051c0:	e037883a 	mov	sp,fp
  8051c4:	dfc00117 	ldw	ra,4(sp)
  8051c8:	df000017 	ldw	fp,0(sp)
  8051cc:	dec00204 	addi	sp,sp,8
  8051d0:	f800283a 	ret

008051d4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
  8051d4:	defff904 	addi	sp,sp,-28
  8051d8:	dfc00615 	stw	ra,24(sp)
  8051dc:	df000515 	stw	fp,20(sp)
  8051e0:	df000504 	addi	fp,sp,20
  8051e4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
  8051e8:	00bffa44 	movi	r2,-23
  8051ec:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
  8051f0:	e13fff17 	ldw	r4,-4(fp)
  8051f4:	0804ebc0 	call	804ebc <epcs_write_enable>

  alt_avalon_spi_command(
  8051f8:	d8000015 	stw	zero,0(sp)
  8051fc:	d8000115 	stw	zero,4(sp)
  805200:	d8000215 	stw	zero,8(sp)
  805204:	e13fff17 	ldw	r4,-4(fp)
  805208:	000b883a 	mov	r5,zero
  80520c:	01800044 	movi	r6,1
  805210:	e1fffe04 	addi	r7,fp,-8
  805214:	0805e4c0 	call	805e4c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
  805218:	0001883a 	nop
}
  80521c:	e037883a 	mov	sp,fp
  805220:	dfc00117 	ldw	ra,4(sp)
  805224:	df000017 	ldw	fp,0(sp)
  805228:	dec00204 	addi	sp,sp,8
  80522c:	f800283a 	ret

00805230 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  805230:	defff504 	addi	sp,sp,-44
  805234:	df000a15 	stw	fp,40(sp)
  805238:	df000a04 	addi	fp,sp,40
  80523c:	e13ffc15 	stw	r4,-16(fp)
  805240:	e17ffd15 	stw	r5,-12(fp)
  805244:	e1bffe15 	stw	r6,-8(fp)
  805248:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80524c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  805250:	00802074 	movhi	r2,129
  805254:	10a08904 	addi	r2,r2,-32220
  805258:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80525c:	10003f26 	beq	r2,zero,80535c <alt_alarm_start+0x12c>
  {
    if (alarm)
  805260:	e0bffc17 	ldw	r2,-16(fp)
  805264:	10003b26 	beq	r2,zero,805354 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  805268:	e0bffc17 	ldw	r2,-16(fp)
  80526c:	e0fffe17 	ldw	r3,-8(fp)
  805270:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  805274:	e0bffc17 	ldw	r2,-16(fp)
  805278:	e0ffff17 	ldw	r3,-4(fp)
  80527c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805280:	0005303a 	rdctl	r2,status
  805284:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805288:	e0fff817 	ldw	r3,-32(fp)
  80528c:	00bfff84 	movi	r2,-2
  805290:	1884703a 	and	r2,r3,r2
  805294:	1001703a 	wrctl	status,r2
  
  return context;
  805298:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80529c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8052a0:	00802074 	movhi	r2,129
  8052a4:	10a08a04 	addi	r2,r2,-32216
  8052a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8052ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8052b0:	e0fffd17 	ldw	r3,-12(fp)
  8052b4:	e0bff617 	ldw	r2,-40(fp)
  8052b8:	1885883a 	add	r2,r3,r2
  8052bc:	10c00044 	addi	r3,r2,1
  8052c0:	e0bffc17 	ldw	r2,-16(fp)
  8052c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8052c8:	e0bffc17 	ldw	r2,-16(fp)
  8052cc:	10c00217 	ldw	r3,8(r2)
  8052d0:	e0bff617 	ldw	r2,-40(fp)
  8052d4:	1880042e 	bgeu	r3,r2,8052e8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  8052d8:	e0bffc17 	ldw	r2,-16(fp)
  8052dc:	00c00044 	movi	r3,1
  8052e0:	10c00405 	stb	r3,16(r2)
  8052e4:	00000206 	br	8052f0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  8052e8:	e0bffc17 	ldw	r2,-16(fp)
  8052ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8052f0:	e0bffc17 	ldw	r2,-16(fp)
  8052f4:	00c02074 	movhi	r3,129
  8052f8:	18e07f04 	addi	r3,r3,-32260
  8052fc:	e0fff915 	stw	r3,-28(fp)
  805300:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805304:	e0bffa17 	ldw	r2,-24(fp)
  805308:	e0fff917 	ldw	r3,-28(fp)
  80530c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  805310:	e0bff917 	ldw	r2,-28(fp)
  805314:	10c00017 	ldw	r3,0(r2)
  805318:	e0bffa17 	ldw	r2,-24(fp)
  80531c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805320:	e0bff917 	ldw	r2,-28(fp)
  805324:	10800017 	ldw	r2,0(r2)
  805328:	e0fffa17 	ldw	r3,-24(fp)
  80532c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  805330:	e0bff917 	ldw	r2,-28(fp)
  805334:	e0fffa17 	ldw	r3,-24(fp)
  805338:	10c00015 	stw	r3,0(r2)
  80533c:	e0bff717 	ldw	r2,-36(fp)
  805340:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805344:	e0bffb17 	ldw	r2,-20(fp)
  805348:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80534c:	0005883a 	mov	r2,zero
  805350:	00000306 	br	805360 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  805354:	00bffa84 	movi	r2,-22
  805358:	00000106 	br	805360 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  80535c:	00bfde84 	movi	r2,-134
  }
}
  805360:	e037883a 	mov	sp,fp
  805364:	df000017 	ldw	fp,0(sp)
  805368:	dec00104 	addi	sp,sp,4
  80536c:	f800283a 	ret

00805370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805370:	defffe04 	addi	sp,sp,-8
  805374:	dfc00115 	stw	ra,4(sp)
  805378:	df000015 	stw	fp,0(sp)
  80537c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805380:	00802074 	movhi	r2,129
  805384:	10a07a04 	addi	r2,r2,-32280
  805388:	10800017 	ldw	r2,0(r2)
  80538c:	10000526 	beq	r2,zero,8053a4 <alt_get_errno+0x34>
  805390:	00802074 	movhi	r2,129
  805394:	10a07a04 	addi	r2,r2,-32280
  805398:	10800017 	ldw	r2,0(r2)
  80539c:	103ee83a 	callr	r2
  8053a0:	00000206 	br	8053ac <alt_get_errno+0x3c>
  8053a4:	00802074 	movhi	r2,129
  8053a8:	10a08404 	addi	r2,r2,-32240
}
  8053ac:	e037883a 	mov	sp,fp
  8053b0:	dfc00117 	ldw	ra,4(sp)
  8053b4:	df000017 	ldw	fp,0(sp)
  8053b8:	dec00204 	addi	sp,sp,8
  8053bc:	f800283a 	ret

008053c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8053c0:	defffa04 	addi	sp,sp,-24
  8053c4:	dfc00515 	stw	ra,20(sp)
  8053c8:	df000415 	stw	fp,16(sp)
  8053cc:	df000404 	addi	fp,sp,16
  8053d0:	e13ffe15 	stw	r4,-8(fp)
  8053d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8053d8:	e0bffe17 	ldw	r2,-8(fp)
  8053dc:	10000326 	beq	r2,zero,8053ec <alt_dev_llist_insert+0x2c>
  8053e0:	e0bffe17 	ldw	r2,-8(fp)
  8053e4:	10800217 	ldw	r2,8(r2)
  8053e8:	1000051e 	bne	r2,zero,805400 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  8053ec:	08053700 	call	805370 <alt_get_errno>
  8053f0:	00c00584 	movi	r3,22
  8053f4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  8053f8:	00bffa84 	movi	r2,-22
  8053fc:	00001306 	br	80544c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  805400:	e0bffe17 	ldw	r2,-8(fp)
  805404:	e0ffff17 	ldw	r3,-4(fp)
  805408:	e0fffc15 	stw	r3,-16(fp)
  80540c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805410:	e0bffd17 	ldw	r2,-12(fp)
  805414:	e0fffc17 	ldw	r3,-16(fp)
  805418:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80541c:	e0bffc17 	ldw	r2,-16(fp)
  805420:	10c00017 	ldw	r3,0(r2)
  805424:	e0bffd17 	ldw	r2,-12(fp)
  805428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80542c:	e0bffc17 	ldw	r2,-16(fp)
  805430:	10800017 	ldw	r2,0(r2)
  805434:	e0fffd17 	ldw	r3,-12(fp)
  805438:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80543c:	e0bffc17 	ldw	r2,-16(fp)
  805440:	e0fffd17 	ldw	r3,-12(fp)
  805444:	10c00015 	stw	r3,0(r2)

  return 0;  
  805448:	0005883a 	mov	r2,zero
}
  80544c:	e037883a 	mov	sp,fp
  805450:	dfc00117 	ldw	ra,4(sp)
  805454:	df000017 	ldw	fp,0(sp)
  805458:	dec00204 	addi	sp,sp,8
  80545c:	f800283a 	ret

00805460 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  805460:	defffd04 	addi	sp,sp,-12
  805464:	dfc00215 	stw	ra,8(sp)
  805468:	df000115 	stw	fp,4(sp)
  80546c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805470:	00802034 	movhi	r2,128
  805474:	10999e04 	addi	r2,r2,26232
  805478:	e0bfff15 	stw	r2,-4(fp)
  80547c:	00000606 	br	805498 <_do_ctors+0x38>
        (*ctor) (); 
  805480:	e0bfff17 	ldw	r2,-4(fp)
  805484:	10800017 	ldw	r2,0(r2)
  805488:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	10bfff04 	addi	r2,r2,-4
  805494:	e0bfff15 	stw	r2,-4(fp)
  805498:	e0ffff17 	ldw	r3,-4(fp)
  80549c:	00802034 	movhi	r2,128
  8054a0:	10999f04 	addi	r2,r2,26236
  8054a4:	18bff62e 	bgeu	r3,r2,805480 <__reset+0xff804480>
        (*ctor) (); 
}
  8054a8:	e037883a 	mov	sp,fp
  8054ac:	dfc00117 	ldw	ra,4(sp)
  8054b0:	df000017 	ldw	fp,0(sp)
  8054b4:	dec00204 	addi	sp,sp,8
  8054b8:	f800283a 	ret

008054bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8054bc:	defffd04 	addi	sp,sp,-12
  8054c0:	dfc00215 	stw	ra,8(sp)
  8054c4:	df000115 	stw	fp,4(sp)
  8054c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8054cc:	00802034 	movhi	r2,128
  8054d0:	10999e04 	addi	r2,r2,26232
  8054d4:	e0bfff15 	stw	r2,-4(fp)
  8054d8:	00000606 	br	8054f4 <_do_dtors+0x38>
        (*dtor) (); 
  8054dc:	e0bfff17 	ldw	r2,-4(fp)
  8054e0:	10800017 	ldw	r2,0(r2)
  8054e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8054e8:	e0bfff17 	ldw	r2,-4(fp)
  8054ec:	10bfff04 	addi	r2,r2,-4
  8054f0:	e0bfff15 	stw	r2,-4(fp)
  8054f4:	e0ffff17 	ldw	r3,-4(fp)
  8054f8:	00802034 	movhi	r2,128
  8054fc:	10999f04 	addi	r2,r2,26236
  805500:	18bff62e 	bgeu	r3,r2,8054dc <__reset+0xff8044dc>
        (*dtor) (); 
}
  805504:	e037883a 	mov	sp,fp
  805508:	dfc00117 	ldw	ra,4(sp)
  80550c:	df000017 	ldw	fp,0(sp)
  805510:	dec00204 	addi	sp,sp,8
  805514:	f800283a 	ret

00805518 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  805518:	defffc04 	addi	sp,sp,-16
  80551c:	dfc00315 	stw	ra,12(sp)
  805520:	df000215 	stw	fp,8(sp)
  805524:	df000204 	addi	fp,sp,8
  805528:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  80552c:	e13fff17 	ldw	r4,-4(fp)
  805530:	d1600b04 	addi	r5,gp,-32724
  805534:	08060480 	call	806048 <alt_find_dev>
  805538:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  80553c:	e0bffe17 	ldw	r2,-8(fp)
  805540:	10000926 	beq	r2,zero,805568 <alt_flash_open_dev+0x50>
  805544:	e0bffe17 	ldw	r2,-8(fp)
  805548:	10800317 	ldw	r2,12(r2)
  80554c:	10000626 	beq	r2,zero,805568 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  805550:	e0bffe17 	ldw	r2,-8(fp)
  805554:	10800317 	ldw	r2,12(r2)
  805558:	e13ffe17 	ldw	r4,-8(fp)
  80555c:	e17fff17 	ldw	r5,-4(fp)
  805560:	103ee83a 	callr	r2
  805564:	00000106 	br	80556c <alt_flash_open_dev+0x54>
  }

  return dev;
  805568:	e0bffe17 	ldw	r2,-8(fp)
}
  80556c:	e037883a 	mov	sp,fp
  805570:	dfc00117 	ldw	ra,4(sp)
  805574:	df000017 	ldw	fp,0(sp)
  805578:	dec00204 	addi	sp,sp,8
  80557c:	f800283a 	ret

00805580 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  805580:	defffd04 	addi	sp,sp,-12
  805584:	dfc00215 	stw	ra,8(sp)
  805588:	df000115 	stw	fp,4(sp)
  80558c:	df000104 	addi	fp,sp,4
  805590:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  805594:	e0bfff17 	ldw	r2,-4(fp)
  805598:	10000726 	beq	r2,zero,8055b8 <alt_flash_close_dev+0x38>
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	10800417 	ldw	r2,16(r2)
  8055a4:	10000426 	beq	r2,zero,8055b8 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
  8055a8:	e0bfff17 	ldw	r2,-4(fp)
  8055ac:	10800417 	ldw	r2,16(r2)
  8055b0:	e13fff17 	ldw	r4,-4(fp)
  8055b4:	103ee83a 	callr	r2
  }
  return;
  8055b8:	0001883a 	nop
}
  8055bc:	e037883a 	mov	sp,fp
  8055c0:	dfc00117 	ldw	ra,4(sp)
  8055c4:	df000017 	ldw	fp,0(sp)
  8055c8:	dec00204 	addi	sp,sp,8
  8055cc:	f800283a 	ret

008055d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8055d0:	defff904 	addi	sp,sp,-28
  8055d4:	dfc00615 	stw	ra,24(sp)
  8055d8:	df000515 	stw	fp,20(sp)
  8055dc:	df000504 	addi	fp,sp,20
  8055e0:	e13ffc15 	stw	r4,-16(fp)
  8055e4:	e17ffd15 	stw	r5,-12(fp)
  8055e8:	e1bffe15 	stw	r6,-8(fp)
  8055ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8055f0:	e0800217 	ldw	r2,8(fp)
  8055f4:	d8800015 	stw	r2,0(sp)
  8055f8:	e13ffc17 	ldw	r4,-16(fp)
  8055fc:	e17ffd17 	ldw	r5,-12(fp)
  805600:	e1bffe17 	ldw	r6,-8(fp)
  805604:	e1ffff17 	ldw	r7,-4(fp)
  805608:	08057a80 	call	8057a8 <alt_iic_isr_register>
}  
  80560c:	e037883a 	mov	sp,fp
  805610:	dfc00117 	ldw	ra,4(sp)
  805614:	df000017 	ldw	fp,0(sp)
  805618:	dec00204 	addi	sp,sp,8
  80561c:	f800283a 	ret

00805620 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  805620:	defff904 	addi	sp,sp,-28
  805624:	df000615 	stw	fp,24(sp)
  805628:	df000604 	addi	fp,sp,24
  80562c:	e13ffe15 	stw	r4,-8(fp)
  805630:	e17fff15 	stw	r5,-4(fp)
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80563c:	0005303a 	rdctl	r2,status
  805640:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805644:	e0fffb17 	ldw	r3,-20(fp)
  805648:	00bfff84 	movi	r2,-2
  80564c:	1884703a 	and	r2,r3,r2
  805650:	1001703a 	wrctl	status,r2
  
  return context;
  805654:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805658:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80565c:	e0bffa17 	ldw	r2,-24(fp)
  805660:	00c00044 	movi	r3,1
  805664:	1884983a 	sll	r2,r3,r2
  805668:	1007883a 	mov	r3,r2
  80566c:	00802074 	movhi	r2,129
  805670:	10a08804 	addi	r2,r2,-32224
  805674:	10800017 	ldw	r2,0(r2)
  805678:	1886b03a 	or	r3,r3,r2
  80567c:	00802074 	movhi	r2,129
  805680:	10a08804 	addi	r2,r2,-32224
  805684:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805688:	00802074 	movhi	r2,129
  80568c:	10a08804 	addi	r2,r2,-32224
  805690:	10800017 	ldw	r2,0(r2)
  805694:	100170fa 	wrctl	ienable,r2
  805698:	e0bffc17 	ldw	r2,-16(fp)
  80569c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8056a0:	e0bffd17 	ldw	r2,-12(fp)
  8056a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8056a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8056ac:	e037883a 	mov	sp,fp
  8056b0:	df000017 	ldw	fp,0(sp)
  8056b4:	dec00104 	addi	sp,sp,4
  8056b8:	f800283a 	ret

008056bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8056bc:	defff904 	addi	sp,sp,-28
  8056c0:	df000615 	stw	fp,24(sp)
  8056c4:	df000604 	addi	fp,sp,24
  8056c8:	e13ffe15 	stw	r4,-8(fp)
  8056cc:	e17fff15 	stw	r5,-4(fp)
  8056d0:	e0bfff17 	ldw	r2,-4(fp)
  8056d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8056d8:	0005303a 	rdctl	r2,status
  8056dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8056e0:	e0fffb17 	ldw	r3,-20(fp)
  8056e4:	00bfff84 	movi	r2,-2
  8056e8:	1884703a 	and	r2,r3,r2
  8056ec:	1001703a 	wrctl	status,r2
  
  return context;
  8056f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8056f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8056f8:	e0bffa17 	ldw	r2,-24(fp)
  8056fc:	00c00044 	movi	r3,1
  805700:	1884983a 	sll	r2,r3,r2
  805704:	0084303a 	nor	r2,zero,r2
  805708:	1007883a 	mov	r3,r2
  80570c:	00802074 	movhi	r2,129
  805710:	10a08804 	addi	r2,r2,-32224
  805714:	10800017 	ldw	r2,0(r2)
  805718:	1886703a 	and	r3,r3,r2
  80571c:	00802074 	movhi	r2,129
  805720:	10a08804 	addi	r2,r2,-32224
  805724:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805728:	00802074 	movhi	r2,129
  80572c:	10a08804 	addi	r2,r2,-32224
  805730:	10800017 	ldw	r2,0(r2)
  805734:	100170fa 	wrctl	ienable,r2
  805738:	e0bffc17 	ldw	r2,-16(fp)
  80573c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805740:	e0bffd17 	ldw	r2,-12(fp)
  805744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805748:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80574c:	e037883a 	mov	sp,fp
  805750:	df000017 	ldw	fp,0(sp)
  805754:	dec00104 	addi	sp,sp,4
  805758:	f800283a 	ret

0080575c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80575c:	defffc04 	addi	sp,sp,-16
  805760:	df000315 	stw	fp,12(sp)
  805764:	df000304 	addi	fp,sp,12
  805768:	e13ffe15 	stw	r4,-8(fp)
  80576c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  805770:	000530fa 	rdctl	r2,ienable
  805774:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  805778:	e0bfff17 	ldw	r2,-4(fp)
  80577c:	00c00044 	movi	r3,1
  805780:	1884983a 	sll	r2,r3,r2
  805784:	1007883a 	mov	r3,r2
  805788:	e0bffd17 	ldw	r2,-12(fp)
  80578c:	1884703a 	and	r2,r3,r2
  805790:	1004c03a 	cmpne	r2,r2,zero
  805794:	10803fcc 	andi	r2,r2,255
}
  805798:	e037883a 	mov	sp,fp
  80579c:	df000017 	ldw	fp,0(sp)
  8057a0:	dec00104 	addi	sp,sp,4
  8057a4:	f800283a 	ret

008057a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8057a8:	defff504 	addi	sp,sp,-44
  8057ac:	dfc00a15 	stw	ra,40(sp)
  8057b0:	df000915 	stw	fp,36(sp)
  8057b4:	df000904 	addi	fp,sp,36
  8057b8:	e13ffc15 	stw	r4,-16(fp)
  8057bc:	e17ffd15 	stw	r5,-12(fp)
  8057c0:	e1bffe15 	stw	r6,-8(fp)
  8057c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8057c8:	00bffa84 	movi	r2,-22
  8057cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8057d0:	e0bffd17 	ldw	r2,-12(fp)
  8057d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8057d8:	e0bff817 	ldw	r2,-32(fp)
  8057dc:	10800808 	cmpgei	r2,r2,32
  8057e0:	1000271e 	bne	r2,zero,805880 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8057e4:	0005303a 	rdctl	r2,status
  8057e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8057ec:	e0fffa17 	ldw	r3,-24(fp)
  8057f0:	00bfff84 	movi	r2,-2
  8057f4:	1884703a 	and	r2,r3,r2
  8057f8:	1001703a 	wrctl	status,r2
  
  return context;
  8057fc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  805800:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  805804:	00c02074 	movhi	r3,129
  805808:	18e09504 	addi	r3,r3,-32172
  80580c:	e0bff817 	ldw	r2,-32(fp)
  805810:	100490fa 	slli	r2,r2,3
  805814:	1885883a 	add	r2,r3,r2
  805818:	e0fffe17 	ldw	r3,-8(fp)
  80581c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  805820:	00c02074 	movhi	r3,129
  805824:	18e09504 	addi	r3,r3,-32172
  805828:	e0bff817 	ldw	r2,-32(fp)
  80582c:	100490fa 	slli	r2,r2,3
  805830:	1885883a 	add	r2,r3,r2
  805834:	10800104 	addi	r2,r2,4
  805838:	e0ffff17 	ldw	r3,-4(fp)
  80583c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805840:	e0bffe17 	ldw	r2,-8(fp)
  805844:	10000526 	beq	r2,zero,80585c <alt_iic_isr_register+0xb4>
  805848:	e0bff817 	ldw	r2,-32(fp)
  80584c:	e13ffc17 	ldw	r4,-16(fp)
  805850:	100b883a 	mov	r5,r2
  805854:	08056200 	call	805620 <alt_ic_irq_enable>
  805858:	00000406 	br	80586c <alt_iic_isr_register+0xc4>
  80585c:	e0bff817 	ldw	r2,-32(fp)
  805860:	e13ffc17 	ldw	r4,-16(fp)
  805864:	100b883a 	mov	r5,r2
  805868:	08056bc0 	call	8056bc <alt_ic_irq_disable>
  80586c:	e0bff715 	stw	r2,-36(fp)
  805870:	e0bff917 	ldw	r2,-28(fp)
  805874:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805878:	e0bffb17 	ldw	r2,-20(fp)
  80587c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  805880:	e0bff717 	ldw	r2,-36(fp)
}
  805884:	e037883a 	mov	sp,fp
  805888:	dfc00117 	ldw	ra,4(sp)
  80588c:	df000017 	ldw	fp,0(sp)
  805890:	dec00204 	addi	sp,sp,8
  805894:	f800283a 	ret

00805898 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  805898:	defff804 	addi	sp,sp,-32
  80589c:	dfc00715 	stw	ra,28(sp)
  8058a0:	df000615 	stw	fp,24(sp)
  8058a4:	dc000515 	stw	r16,20(sp)
  8058a8:	df000604 	addi	fp,sp,24
  8058ac:	e13ffb15 	stw	r4,-20(fp)
  8058b0:	e17ffc15 	stw	r5,-16(fp)
  8058b4:	e1bffd15 	stw	r6,-12(fp)
  8058b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  8058bc:	e13ffc17 	ldw	r4,-16(fp)
  8058c0:	e17ffd17 	ldw	r5,-12(fp)
  8058c4:	e1bffe17 	ldw	r6,-8(fp)
  8058c8:	0805b340 	call	805b34 <open>
  8058cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  8058d0:	e0bffa17 	ldw	r2,-24(fp)
  8058d4:	10002216 	blt	r2,zero,805960 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  8058d8:	04002034 	movhi	r16,128
  8058dc:	841bc704 	addi	r16,r16,28444
  8058e0:	e0bffa17 	ldw	r2,-24(fp)
  8058e4:	1009883a 	mov	r4,r2
  8058e8:	01400304 	movi	r5,12
  8058ec:	0802d580 	call	802d58 <__mulsi3>
  8058f0:	8085883a 	add	r2,r16,r2
  8058f4:	10c00017 	ldw	r3,0(r2)
  8058f8:	e0bffb17 	ldw	r2,-20(fp)
  8058fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  805900:	04002034 	movhi	r16,128
  805904:	841bc704 	addi	r16,r16,28444
  805908:	e0bffa17 	ldw	r2,-24(fp)
  80590c:	1009883a 	mov	r4,r2
  805910:	01400304 	movi	r5,12
  805914:	0802d580 	call	802d58 <__mulsi3>
  805918:	8085883a 	add	r2,r16,r2
  80591c:	10800104 	addi	r2,r2,4
  805920:	10c00017 	ldw	r3,0(r2)
  805924:	e0bffb17 	ldw	r2,-20(fp)
  805928:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80592c:	04002034 	movhi	r16,128
  805930:	841bc704 	addi	r16,r16,28444
  805934:	e0bffa17 	ldw	r2,-24(fp)
  805938:	1009883a 	mov	r4,r2
  80593c:	01400304 	movi	r5,12
  805940:	0802d580 	call	802d58 <__mulsi3>
  805944:	8085883a 	add	r2,r16,r2
  805948:	10800204 	addi	r2,r2,8
  80594c:	10c00017 	ldw	r3,0(r2)
  805950:	e0bffb17 	ldw	r2,-20(fp)
  805954:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  805958:	e13ffa17 	ldw	r4,-24(fp)
  80595c:	08033f00 	call	8033f0 <alt_release_fd>
  }
} 
  805960:	e6ffff04 	addi	sp,fp,-4
  805964:	dfc00217 	ldw	ra,8(sp)
  805968:	df000117 	ldw	fp,4(sp)
  80596c:	dc000017 	ldw	r16,0(sp)
  805970:	dec00304 	addi	sp,sp,12
  805974:	f800283a 	ret

00805978 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  805978:	defffb04 	addi	sp,sp,-20
  80597c:	dfc00415 	stw	ra,16(sp)
  805980:	df000315 	stw	fp,12(sp)
  805984:	df000304 	addi	fp,sp,12
  805988:	e13ffd15 	stw	r4,-12(fp)
  80598c:	e17ffe15 	stw	r5,-8(fp)
  805990:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805994:	01002034 	movhi	r4,128
  805998:	211bca04 	addi	r4,r4,28456
  80599c:	e17ffd17 	ldw	r5,-12(fp)
  8059a0:	01800044 	movi	r6,1
  8059a4:	01c07fc4 	movi	r7,511
  8059a8:	08058980 	call	805898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8059ac:	01002034 	movhi	r4,128
  8059b0:	211bc704 	addi	r4,r4,28444
  8059b4:	e17ffe17 	ldw	r5,-8(fp)
  8059b8:	000d883a 	mov	r6,zero
  8059bc:	01c07fc4 	movi	r7,511
  8059c0:	08058980 	call	805898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8059c4:	01002034 	movhi	r4,128
  8059c8:	211bcd04 	addi	r4,r4,28468
  8059cc:	e17fff17 	ldw	r5,-4(fp)
  8059d0:	01800044 	movi	r6,1
  8059d4:	01c07fc4 	movi	r7,511
  8059d8:	08058980 	call	805898 <alt_open_fd>
}  
  8059dc:	e037883a 	mov	sp,fp
  8059e0:	dfc00117 	ldw	ra,4(sp)
  8059e4:	df000017 	ldw	fp,0(sp)
  8059e8:	dec00204 	addi	sp,sp,8
  8059ec:	f800283a 	ret

008059f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8059f0:	defffe04 	addi	sp,sp,-8
  8059f4:	dfc00115 	stw	ra,4(sp)
  8059f8:	df000015 	stw	fp,0(sp)
  8059fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805a00:	00802074 	movhi	r2,129
  805a04:	10a07a04 	addi	r2,r2,-32280
  805a08:	10800017 	ldw	r2,0(r2)
  805a0c:	10000526 	beq	r2,zero,805a24 <alt_get_errno+0x34>
  805a10:	00802074 	movhi	r2,129
  805a14:	10a07a04 	addi	r2,r2,-32280
  805a18:	10800017 	ldw	r2,0(r2)
  805a1c:	103ee83a 	callr	r2
  805a20:	00000206 	br	805a2c <alt_get_errno+0x3c>
  805a24:	00802074 	movhi	r2,129
  805a28:	10a08404 	addi	r2,r2,-32240
}
  805a2c:	e037883a 	mov	sp,fp
  805a30:	dfc00117 	ldw	ra,4(sp)
  805a34:	df000017 	ldw	fp,0(sp)
  805a38:	dec00204 	addi	sp,sp,8
  805a3c:	f800283a 	ret

00805a40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805a40:	defffb04 	addi	sp,sp,-20
  805a44:	dfc00415 	stw	ra,16(sp)
  805a48:	df000315 	stw	fp,12(sp)
  805a4c:	dc000215 	stw	r16,8(sp)
  805a50:	df000304 	addi	fp,sp,12
  805a54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805a58:	e0bffe17 	ldw	r2,-8(fp)
  805a5c:	10800217 	ldw	r2,8(r2)
  805a60:	10d00034 	orhi	r3,r2,16384
  805a64:	e0bffe17 	ldw	r2,-8(fp)
  805a68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805a6c:	e03ffd15 	stw	zero,-12(fp)
  805a70:	00002306 	br	805b00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805a74:	04002034 	movhi	r16,128
  805a78:	841bc704 	addi	r16,r16,28444
  805a7c:	e0bffd17 	ldw	r2,-12(fp)
  805a80:	1009883a 	mov	r4,r2
  805a84:	01400304 	movi	r5,12
  805a88:	0802d580 	call	802d58 <__mulsi3>
  805a8c:	8085883a 	add	r2,r16,r2
  805a90:	10c00017 	ldw	r3,0(r2)
  805a94:	e0bffe17 	ldw	r2,-8(fp)
  805a98:	10800017 	ldw	r2,0(r2)
  805a9c:	1880151e 	bne	r3,r2,805af4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805aa0:	04002034 	movhi	r16,128
  805aa4:	841bc704 	addi	r16,r16,28444
  805aa8:	e0bffd17 	ldw	r2,-12(fp)
  805aac:	1009883a 	mov	r4,r2
  805ab0:	01400304 	movi	r5,12
  805ab4:	0802d580 	call	802d58 <__mulsi3>
  805ab8:	8085883a 	add	r2,r16,r2
  805abc:	10800204 	addi	r2,r2,8
  805ac0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805ac4:	10000b0e 	bge	r2,zero,805af4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  805ac8:	e13ffd17 	ldw	r4,-12(fp)
  805acc:	01400304 	movi	r5,12
  805ad0:	0802d580 	call	802d58 <__mulsi3>
  805ad4:	1007883a 	mov	r3,r2
  805ad8:	00802034 	movhi	r2,128
  805adc:	109bc704 	addi	r2,r2,28444
  805ae0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805ae4:	e0bffe17 	ldw	r2,-8(fp)
  805ae8:	18800226 	beq	r3,r2,805af4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  805aec:	00bffcc4 	movi	r2,-13
  805af0:	00000a06 	br	805b1c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805af4:	e0bffd17 	ldw	r2,-12(fp)
  805af8:	10800044 	addi	r2,r2,1
  805afc:	e0bffd15 	stw	r2,-12(fp)
  805b00:	00802074 	movhi	r2,129
  805b04:	10a07904 	addi	r2,r2,-32284
  805b08:	10800017 	ldw	r2,0(r2)
  805b0c:	1007883a 	mov	r3,r2
  805b10:	e0bffd17 	ldw	r2,-12(fp)
  805b14:	18bfd72e 	bgeu	r3,r2,805a74 <__reset+0xff804a74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  805b18:	0005883a 	mov	r2,zero
}
  805b1c:	e6ffff04 	addi	sp,fp,-4
  805b20:	dfc00217 	ldw	ra,8(sp)
  805b24:	df000117 	ldw	fp,4(sp)
  805b28:	dc000017 	ldw	r16,0(sp)
  805b2c:	dec00304 	addi	sp,sp,12
  805b30:	f800283a 	ret

00805b34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805b34:	defff604 	addi	sp,sp,-40
  805b38:	dfc00915 	stw	ra,36(sp)
  805b3c:	df000815 	stw	fp,32(sp)
  805b40:	df000804 	addi	fp,sp,32
  805b44:	e13ffd15 	stw	r4,-12(fp)
  805b48:	e17ffe15 	stw	r5,-8(fp)
  805b4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805b50:	00bfffc4 	movi	r2,-1
  805b54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  805b58:	00bffb44 	movi	r2,-19
  805b5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  805b60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805b64:	e13ffd17 	ldw	r4,-12(fp)
  805b68:	01402074 	movhi	r5,129
  805b6c:	29607704 	addi	r5,r5,-32292
  805b70:	08060480 	call	806048 <alt_find_dev>
  805b74:	e0bff815 	stw	r2,-32(fp)
  805b78:	e0bff817 	ldw	r2,-32(fp)
  805b7c:	1000051e 	bne	r2,zero,805b94 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805b80:	e13ffd17 	ldw	r4,-12(fp)
  805b84:	08060d80 	call	8060d8 <alt_find_file>
  805b88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  805b8c:	00800044 	movi	r2,1
  805b90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805b94:	e0bff817 	ldw	r2,-32(fp)
  805b98:	10002b26 	beq	r2,zero,805c48 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805b9c:	e13ff817 	ldw	r4,-32(fp)
  805ba0:	08061ec0 	call	8061ec <alt_get_fd>
  805ba4:	e0bff915 	stw	r2,-28(fp)
  805ba8:	e0bff917 	ldw	r2,-28(fp)
  805bac:	1000030e 	bge	r2,zero,805bbc <open+0x88>
    {
      status = index;
  805bb0:	e0bff917 	ldw	r2,-28(fp)
  805bb4:	e0bffa15 	stw	r2,-24(fp)
  805bb8:	00002506 	br	805c50 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  805bbc:	e13ff917 	ldw	r4,-28(fp)
  805bc0:	01400304 	movi	r5,12
  805bc4:	0802d580 	call	802d58 <__mulsi3>
  805bc8:	1007883a 	mov	r3,r2
  805bcc:	00802034 	movhi	r2,128
  805bd0:	109bc704 	addi	r2,r2,28444
  805bd4:	1885883a 	add	r2,r3,r2
  805bd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805bdc:	e0fffe17 	ldw	r3,-8(fp)
  805be0:	00900034 	movhi	r2,16384
  805be4:	10bfffc4 	addi	r2,r2,-1
  805be8:	1886703a 	and	r3,r3,r2
  805bec:	e0bffc17 	ldw	r2,-16(fp)
  805bf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  805bf4:	e0bffb17 	ldw	r2,-20(fp)
  805bf8:	1000051e 	bne	r2,zero,805c10 <open+0xdc>
  805bfc:	e13ffc17 	ldw	r4,-16(fp)
  805c00:	0805a400 	call	805a40 <alt_file_locked>
  805c04:	e0bffa15 	stw	r2,-24(fp)
  805c08:	e0bffa17 	ldw	r2,-24(fp)
  805c0c:	10001016 	blt	r2,zero,805c50 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805c10:	e0bff817 	ldw	r2,-32(fp)
  805c14:	10800317 	ldw	r2,12(r2)
  805c18:	10000826 	beq	r2,zero,805c3c <open+0x108>
  805c1c:	e0bff817 	ldw	r2,-32(fp)
  805c20:	10800317 	ldw	r2,12(r2)
  805c24:	e13ffc17 	ldw	r4,-16(fp)
  805c28:	e17ffd17 	ldw	r5,-12(fp)
  805c2c:	e1bffe17 	ldw	r6,-8(fp)
  805c30:	e1ffff17 	ldw	r7,-4(fp)
  805c34:	103ee83a 	callr	r2
  805c38:	00000106 	br	805c40 <open+0x10c>
  805c3c:	0005883a 	mov	r2,zero
  805c40:	e0bffa15 	stw	r2,-24(fp)
  805c44:	00000206 	br	805c50 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805c48:	00bffb44 	movi	r2,-19
  805c4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805c50:	e0bffa17 	ldw	r2,-24(fp)
  805c54:	1000080e 	bge	r2,zero,805c78 <open+0x144>
  {
    alt_release_fd (index);  
  805c58:	e13ff917 	ldw	r4,-28(fp)
  805c5c:	08033f00 	call	8033f0 <alt_release_fd>
    ALT_ERRNO = -status;
  805c60:	08059f00 	call	8059f0 <alt_get_errno>
  805c64:	e0fffa17 	ldw	r3,-24(fp)
  805c68:	00c7c83a 	sub	r3,zero,r3
  805c6c:	10c00015 	stw	r3,0(r2)
    return -1;
  805c70:	00bfffc4 	movi	r2,-1
  805c74:	00000106 	br	805c7c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  805c78:	e0bff917 	ldw	r2,-28(fp)
}
  805c7c:	e037883a 	mov	sp,fp
  805c80:	dfc00117 	ldw	ra,4(sp)
  805c84:	df000017 	ldw	fp,0(sp)
  805c88:	dec00204 	addi	sp,sp,8
  805c8c:	f800283a 	ret

00805c90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  805c90:	defffa04 	addi	sp,sp,-24
  805c94:	df000515 	stw	fp,20(sp)
  805c98:	df000504 	addi	fp,sp,20
  805c9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ca0:	0005303a 	rdctl	r2,status
  805ca4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ca8:	e0fffc17 	ldw	r3,-16(fp)
  805cac:	00bfff84 	movi	r2,-2
  805cb0:	1884703a 	and	r2,r3,r2
  805cb4:	1001703a 	wrctl	status,r2
  
  return context;
  805cb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805cbc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  805cc0:	e0bfff17 	ldw	r2,-4(fp)
  805cc4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805cc8:	e0bffd17 	ldw	r2,-12(fp)
  805ccc:	10800017 	ldw	r2,0(r2)
  805cd0:	e0fffd17 	ldw	r3,-12(fp)
  805cd4:	18c00117 	ldw	r3,4(r3)
  805cd8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  805cdc:	e0bffd17 	ldw	r2,-12(fp)
  805ce0:	10800117 	ldw	r2,4(r2)
  805ce4:	e0fffd17 	ldw	r3,-12(fp)
  805ce8:	18c00017 	ldw	r3,0(r3)
  805cec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  805cf0:	e0bffd17 	ldw	r2,-12(fp)
  805cf4:	e0fffd17 	ldw	r3,-12(fp)
  805cf8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  805cfc:	e0bffd17 	ldw	r2,-12(fp)
  805d00:	e0fffd17 	ldw	r3,-12(fp)
  805d04:	10c00015 	stw	r3,0(r2)
  805d08:	e0bffb17 	ldw	r2,-20(fp)
  805d0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d10:	e0bffe17 	ldw	r2,-8(fp)
  805d14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805d18:	e037883a 	mov	sp,fp
  805d1c:	df000017 	ldw	fp,0(sp)
  805d20:	dec00104 	addi	sp,sp,4
  805d24:	f800283a 	ret

00805d28 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805d28:	defffb04 	addi	sp,sp,-20
  805d2c:	dfc00415 	stw	ra,16(sp)
  805d30:	df000315 	stw	fp,12(sp)
  805d34:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805d38:	d0a00e17 	ldw	r2,-32712(gp)
  805d3c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805d40:	d0a01917 	ldw	r2,-32668(gp)
  805d44:	10800044 	addi	r2,r2,1
  805d48:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805d4c:	00002e06 	br	805e08 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  805d50:	e0bffd17 	ldw	r2,-12(fp)
  805d54:	10800017 	ldw	r2,0(r2)
  805d58:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805d5c:	e0bffd17 	ldw	r2,-12(fp)
  805d60:	10800403 	ldbu	r2,16(r2)
  805d64:	10803fcc 	andi	r2,r2,255
  805d68:	10000426 	beq	r2,zero,805d7c <alt_tick+0x54>
  805d6c:	d0a01917 	ldw	r2,-32668(gp)
  805d70:	1000021e 	bne	r2,zero,805d7c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  805d74:	e0bffd17 	ldw	r2,-12(fp)
  805d78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805d7c:	e0bffd17 	ldw	r2,-12(fp)
  805d80:	10800217 	ldw	r2,8(r2)
  805d84:	d0e01917 	ldw	r3,-32668(gp)
  805d88:	18801d36 	bltu	r3,r2,805e00 <alt_tick+0xd8>
  805d8c:	e0bffd17 	ldw	r2,-12(fp)
  805d90:	10800403 	ldbu	r2,16(r2)
  805d94:	10803fcc 	andi	r2,r2,255
  805d98:	1000191e 	bne	r2,zero,805e00 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  805d9c:	e0bffd17 	ldw	r2,-12(fp)
  805da0:	10800317 	ldw	r2,12(r2)
  805da4:	e0fffd17 	ldw	r3,-12(fp)
  805da8:	18c00517 	ldw	r3,20(r3)
  805dac:	1809883a 	mov	r4,r3
  805db0:	103ee83a 	callr	r2
  805db4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805db8:	e0bfff17 	ldw	r2,-4(fp)
  805dbc:	1000031e 	bne	r2,zero,805dcc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  805dc0:	e13ffd17 	ldw	r4,-12(fp)
  805dc4:	0805c900 	call	805c90 <alt_alarm_stop>
  805dc8:	00000d06 	br	805e00 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  805dcc:	e0bffd17 	ldw	r2,-12(fp)
  805dd0:	10c00217 	ldw	r3,8(r2)
  805dd4:	e0bfff17 	ldw	r2,-4(fp)
  805dd8:	1887883a 	add	r3,r3,r2
  805ddc:	e0bffd17 	ldw	r2,-12(fp)
  805de0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  805de4:	e0bffd17 	ldw	r2,-12(fp)
  805de8:	10c00217 	ldw	r3,8(r2)
  805dec:	d0a01917 	ldw	r2,-32668(gp)
  805df0:	1880032e 	bgeu	r3,r2,805e00 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  805df4:	e0bffd17 	ldw	r2,-12(fp)
  805df8:	00c00044 	movi	r3,1
  805dfc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  805e00:	e0bffe17 	ldw	r2,-8(fp)
  805e04:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805e08:	e0fffd17 	ldw	r3,-12(fp)
  805e0c:	d0a00e04 	addi	r2,gp,-32712
  805e10:	18bfcf1e 	bne	r3,r2,805d50 <__reset+0xff804d50>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  805e14:	0001883a 	nop
}
  805e18:	e037883a 	mov	sp,fp
  805e1c:	dfc00117 	ldw	ra,4(sp)
  805e20:	df000017 	ldw	fp,0(sp)
  805e24:	dec00204 	addi	sp,sp,8
  805e28:	f800283a 	ret

00805e2c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  805e2c:	deffff04 	addi	sp,sp,-4
  805e30:	df000015 	stw	fp,0(sp)
  805e34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805e38:	000170fa 	wrctl	ienable,zero
}
  805e3c:	e037883a 	mov	sp,fp
  805e40:	df000017 	ldw	fp,0(sp)
  805e44:	dec00104 	addi	sp,sp,4
  805e48:	f800283a 	ret

00805e4c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  805e4c:	defff404 	addi	sp,sp,-48
  805e50:	df000b15 	stw	fp,44(sp)
  805e54:	df000b04 	addi	fp,sp,44
  805e58:	e13ffc15 	stw	r4,-16(fp)
  805e5c:	e17ffd15 	stw	r5,-12(fp)
  805e60:	e1bffe15 	stw	r6,-8(fp)
  805e64:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  805e68:	e0ffff17 	ldw	r3,-4(fp)
  805e6c:	e0bffe17 	ldw	r2,-8(fp)
  805e70:	1885883a 	add	r2,r3,r2
  805e74:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  805e78:	e0c00217 	ldw	r3,8(fp)
  805e7c:	e0800117 	ldw	r2,4(fp)
  805e80:	1885883a 	add	r2,r3,r2
  805e84:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  805e88:	e0800117 	ldw	r2,4(fp)
  805e8c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  805e90:	e0bffe17 	ldw	r2,-8(fp)
  805e94:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  805e98:	00800044 	movi	r2,1
  805e9c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  805ea0:	e0bffc17 	ldw	r2,-16(fp)
  805ea4:	10800504 	addi	r2,r2,20
  805ea8:	e0fffd17 	ldw	r3,-12(fp)
  805eac:	01000044 	movi	r4,1
  805eb0:	20c6983a 	sll	r3,r4,r3
  805eb4:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  805eb8:	e0800317 	ldw	r2,12(fp)
  805ebc:	1080008c 	andi	r2,r2,2
  805ec0:	1000041e 	bne	r2,zero,805ed4 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  805ec4:	e0bffc17 	ldw	r2,-16(fp)
  805ec8:	10800304 	addi	r2,r2,12
  805ecc:	00c10004 	movi	r3,1024
  805ed0:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  805ed4:	e0bffc17 	ldw	r2,-16(fp)
  805ed8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  805edc:	e0bffc17 	ldw	r2,-16(fp)
  805ee0:	10800204 	addi	r2,r2,8
  805ee4:	10800037 	ldwio	r2,0(r2)
  805ee8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  805eec:	e0bffa17 	ldw	r2,-24(fp)
  805ef0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  805ef4:	10000226 	beq	r2,zero,805f00 <alt_avalon_spi_command+0xb4>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  805ef8:	e0bff717 	ldw	r2,-36(fp)
  805efc:	1000031e 	bne	r2,zero,805f0c <alt_avalon_spi_command+0xc0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  805f00:	e0bffa17 	ldw	r2,-24(fp)
  805f04:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  805f08:	103ff426 	beq	r2,zero,805edc <__reset+0xff804edc>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  805f0c:	e0bffa17 	ldw	r2,-24(fp)
  805f10:	1080100c 	andi	r2,r2,64
  805f14:	10001e26 	beq	r2,zero,805f90 <alt_avalon_spi_command+0x144>
  805f18:	e0bff717 	ldw	r2,-36(fp)
  805f1c:	00801c0e 	bge	zero,r2,805f90 <alt_avalon_spi_command+0x144>
    {
      credits--;
  805f20:	e0bff717 	ldw	r2,-36(fp)
  805f24:	10bfffc4 	addi	r2,r2,-1
  805f28:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  805f2c:	e0ffff17 	ldw	r3,-4(fp)
  805f30:	e0bff817 	ldw	r2,-32(fp)
  805f34:	18800a2e 	bgeu	r3,r2,805f60 <alt_avalon_spi_command+0x114>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  805f38:	e0bffc17 	ldw	r2,-16(fp)
  805f3c:	10800104 	addi	r2,r2,4
  805f40:	1007883a 	mov	r3,r2
  805f44:	e0bfff17 	ldw	r2,-4(fp)
  805f48:	11000044 	addi	r4,r2,1
  805f4c:	e13fff15 	stw	r4,-4(fp)
  805f50:	10800003 	ldbu	r2,0(r2)
  805f54:	10803fcc 	andi	r2,r2,255
  805f58:	18800035 	stwio	r2,0(r3)
  805f5c:	00000c06 	br	805f90 <alt_avalon_spi_command+0x144>
      else if (write_zeros > 0)
  805f60:	e0bff517 	ldw	r2,-44(fp)
  805f64:	10000826 	beq	r2,zero,805f88 <alt_avalon_spi_command+0x13c>
      {
        write_zeros--;
  805f68:	e0bff517 	ldw	r2,-44(fp)
  805f6c:	10bfffc4 	addi	r2,r2,-1
  805f70:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  805f74:	e0bffc17 	ldw	r2,-16(fp)
  805f78:	10800104 	addi	r2,r2,4
  805f7c:	0007883a 	mov	r3,zero
  805f80:	10c00035 	stwio	r3,0(r2)
  805f84:	00000206 	br	805f90 <alt_avalon_spi_command+0x144>
      }
      else
        credits = -1024;
  805f88:	00bf0004 	movi	r2,-1024
  805f8c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  805f90:	e0bffa17 	ldw	r2,-24(fp)
  805f94:	1080200c 	andi	r2,r2,128
  805f98:	10001726 	beq	r2,zero,805ff8 <alt_avalon_spi_command+0x1ac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  805f9c:	e0bffc17 	ldw	r2,-16(fp)
  805fa0:	10800037 	ldwio	r2,0(r2)
  805fa4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  805fa8:	e0bff617 	ldw	r2,-40(fp)
  805fac:	10000426 	beq	r2,zero,805fc0 <alt_avalon_spi_command+0x174>
        read_ignore--;
  805fb0:	e0bff617 	ldw	r2,-40(fp)
  805fb4:	10bfffc4 	addi	r2,r2,-1
  805fb8:	e0bff615 	stw	r2,-40(fp)
  805fbc:	00000506 	br	805fd4 <alt_avalon_spi_command+0x188>
      else
        *read_data++ = (alt_u8)rxdata;
  805fc0:	e0800217 	ldw	r2,8(fp)
  805fc4:	10c00044 	addi	r3,r2,1
  805fc8:	e0c00215 	stw	r3,8(fp)
  805fcc:	e0fffb17 	ldw	r3,-20(fp)
  805fd0:	10c00005 	stb	r3,0(r2)
      credits++;
  805fd4:	e0bff717 	ldw	r2,-36(fp)
  805fd8:	10800044 	addi	r2,r2,1
  805fdc:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  805fe0:	e0bff617 	ldw	r2,-40(fp)
  805fe4:	1000041e 	bne	r2,zero,805ff8 <alt_avalon_spi_command+0x1ac>
  805fe8:	e0c00217 	ldw	r3,8(fp)
  805fec:	e0bff917 	ldw	r2,-28(fp)
  805ff0:	1880011e 	bne	r3,r2,805ff8 <alt_avalon_spi_command+0x1ac>
        break;
  805ff4:	00000106 	br	805ffc <alt_avalon_spi_command+0x1b0>
    }
    
  }
  805ff8:	003fb806 	br	805edc <__reset+0xff804edc>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  805ffc:	e0bffc17 	ldw	r2,-16(fp)
  806000:	10800204 	addi	r2,r2,8
  806004:	10800037 	ldwio	r2,0(r2)
  806008:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  80600c:	e0bffa17 	ldw	r2,-24(fp)
  806010:	1080080c 	andi	r2,r2,32
  806014:	103ff926 	beq	r2,zero,805ffc <__reset+0xff804ffc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  806018:	e0800317 	ldw	r2,12(fp)
  80601c:	1080004c 	andi	r2,r2,1
  806020:	1000041e 	bne	r2,zero,806034 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  806024:	e0bffc17 	ldw	r2,-16(fp)
  806028:	10800304 	addi	r2,r2,12
  80602c:	0007883a 	mov	r3,zero
  806030:	10c00035 	stwio	r3,0(r2)

  return read_length;
  806034:	e0800117 	ldw	r2,4(fp)
}
  806038:	e037883a 	mov	sp,fp
  80603c:	df000017 	ldw	fp,0(sp)
  806040:	dec00104 	addi	sp,sp,4
  806044:	f800283a 	ret

00806048 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  806048:	defffa04 	addi	sp,sp,-24
  80604c:	dfc00515 	stw	ra,20(sp)
  806050:	df000415 	stw	fp,16(sp)
  806054:	df000404 	addi	fp,sp,16
  806058:	e13ffe15 	stw	r4,-8(fp)
  80605c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  806060:	e0bfff17 	ldw	r2,-4(fp)
  806064:	10800017 	ldw	r2,0(r2)
  806068:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80606c:	e13ffe17 	ldw	r4,-8(fp)
  806070:	08002f40 	call	8002f4 <strlen>
  806074:	10800044 	addi	r2,r2,1
  806078:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80607c:	00000d06 	br	8060b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  806080:	e0bffc17 	ldw	r2,-16(fp)
  806084:	10c00217 	ldw	r3,8(r2)
  806088:	e0bffd17 	ldw	r2,-12(fp)
  80608c:	1809883a 	mov	r4,r3
  806090:	e17ffe17 	ldw	r5,-8(fp)
  806094:	100d883a 	mov	r6,r2
  806098:	080630c0 	call	80630c <memcmp>
  80609c:	1000021e 	bne	r2,zero,8060a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8060a0:	e0bffc17 	ldw	r2,-16(fp)
  8060a4:	00000706 	br	8060c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8060a8:	e0bffc17 	ldw	r2,-16(fp)
  8060ac:	10800017 	ldw	r2,0(r2)
  8060b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8060b4:	e0fffc17 	ldw	r3,-16(fp)
  8060b8:	e0bfff17 	ldw	r2,-4(fp)
  8060bc:	18bff01e 	bne	r3,r2,806080 <__reset+0xff805080>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8060c0:	0005883a 	mov	r2,zero
}
  8060c4:	e037883a 	mov	sp,fp
  8060c8:	dfc00117 	ldw	ra,4(sp)
  8060cc:	df000017 	ldw	fp,0(sp)
  8060d0:	dec00204 	addi	sp,sp,8
  8060d4:	f800283a 	ret

008060d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8060d8:	defffb04 	addi	sp,sp,-20
  8060dc:	dfc00415 	stw	ra,16(sp)
  8060e0:	df000315 	stw	fp,12(sp)
  8060e4:	df000304 	addi	fp,sp,12
  8060e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8060ec:	00802074 	movhi	r2,129
  8060f0:	10a07504 	addi	r2,r2,-32300
  8060f4:	10800017 	ldw	r2,0(r2)
  8060f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8060fc:	00003106 	br	8061c4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  806100:	e0bffd17 	ldw	r2,-12(fp)
  806104:	10800217 	ldw	r2,8(r2)
  806108:	1009883a 	mov	r4,r2
  80610c:	08002f40 	call	8002f4 <strlen>
  806110:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  806114:	e0bffd17 	ldw	r2,-12(fp)
  806118:	10c00217 	ldw	r3,8(r2)
  80611c:	e0bffe17 	ldw	r2,-8(fp)
  806120:	10bfffc4 	addi	r2,r2,-1
  806124:	1885883a 	add	r2,r3,r2
  806128:	10800003 	ldbu	r2,0(r2)
  80612c:	10803fcc 	andi	r2,r2,255
  806130:	1080201c 	xori	r2,r2,128
  806134:	10bfe004 	addi	r2,r2,-128
  806138:	10800bd8 	cmpnei	r2,r2,47
  80613c:	1000031e 	bne	r2,zero,80614c <alt_find_file+0x74>
    {
      len -= 1;
  806140:	e0bffe17 	ldw	r2,-8(fp)
  806144:	10bfffc4 	addi	r2,r2,-1
  806148:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80614c:	e0bffe17 	ldw	r2,-8(fp)
  806150:	e0ffff17 	ldw	r3,-4(fp)
  806154:	1885883a 	add	r2,r3,r2
  806158:	10800003 	ldbu	r2,0(r2)
  80615c:	10803fcc 	andi	r2,r2,255
  806160:	1080201c 	xori	r2,r2,128
  806164:	10bfe004 	addi	r2,r2,-128
  806168:	10800be0 	cmpeqi	r2,r2,47
  80616c:	1000081e 	bne	r2,zero,806190 <alt_find_file+0xb8>
  806170:	e0bffe17 	ldw	r2,-8(fp)
  806174:	e0ffff17 	ldw	r3,-4(fp)
  806178:	1885883a 	add	r2,r3,r2
  80617c:	10800003 	ldbu	r2,0(r2)
  806180:	10803fcc 	andi	r2,r2,255
  806184:	1080201c 	xori	r2,r2,128
  806188:	10bfe004 	addi	r2,r2,-128
  80618c:	10000a1e 	bne	r2,zero,8061b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  806190:	e0bffd17 	ldw	r2,-12(fp)
  806194:	10c00217 	ldw	r3,8(r2)
  806198:	e0bffe17 	ldw	r2,-8(fp)
  80619c:	1809883a 	mov	r4,r3
  8061a0:	e17fff17 	ldw	r5,-4(fp)
  8061a4:	100d883a 	mov	r6,r2
  8061a8:	080630c0 	call	80630c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8061ac:	1000021e 	bne	r2,zero,8061b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8061b0:	e0bffd17 	ldw	r2,-12(fp)
  8061b4:	00000806 	br	8061d8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  8061b8:	e0bffd17 	ldw	r2,-12(fp)
  8061bc:	10800017 	ldw	r2,0(r2)
  8061c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8061c4:	e0fffd17 	ldw	r3,-12(fp)
  8061c8:	00802074 	movhi	r2,129
  8061cc:	10a07504 	addi	r2,r2,-32300
  8061d0:	18bfcb1e 	bne	r3,r2,806100 <__reset+0xff805100>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8061d4:	0005883a 	mov	r2,zero
}
  8061d8:	e037883a 	mov	sp,fp
  8061dc:	dfc00117 	ldw	ra,4(sp)
  8061e0:	df000017 	ldw	fp,0(sp)
  8061e4:	dec00204 	addi	sp,sp,8
  8061e8:	f800283a 	ret

008061ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8061ec:	defffa04 	addi	sp,sp,-24
  8061f0:	dfc00515 	stw	ra,20(sp)
  8061f4:	df000415 	stw	fp,16(sp)
  8061f8:	dc000315 	stw	r16,12(sp)
  8061fc:	df000404 	addi	fp,sp,16
  806200:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  806204:	00bffa04 	movi	r2,-24
  806208:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80620c:	e03ffc15 	stw	zero,-16(fp)
  806210:	00002106 	br	806298 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  806214:	04002034 	movhi	r16,128
  806218:	841bc704 	addi	r16,r16,28444
  80621c:	e0bffc17 	ldw	r2,-16(fp)
  806220:	1009883a 	mov	r4,r2
  806224:	01400304 	movi	r5,12
  806228:	0802d580 	call	802d58 <__mulsi3>
  80622c:	8085883a 	add	r2,r16,r2
  806230:	10800017 	ldw	r2,0(r2)
  806234:	1000151e 	bne	r2,zero,80628c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  806238:	04002034 	movhi	r16,128
  80623c:	841bc704 	addi	r16,r16,28444
  806240:	e0bffc17 	ldw	r2,-16(fp)
  806244:	1009883a 	mov	r4,r2
  806248:	01400304 	movi	r5,12
  80624c:	0802d580 	call	802d58 <__mulsi3>
  806250:	8085883a 	add	r2,r16,r2
  806254:	e0fffe17 	ldw	r3,-8(fp)
  806258:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80625c:	00802074 	movhi	r2,129
  806260:	10a07904 	addi	r2,r2,-32284
  806264:	10c00017 	ldw	r3,0(r2)
  806268:	e0bffc17 	ldw	r2,-16(fp)
  80626c:	1880040e 	bge	r3,r2,806280 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  806270:	00802074 	movhi	r2,129
  806274:	10a07904 	addi	r2,r2,-32284
  806278:	e0fffc17 	ldw	r3,-16(fp)
  80627c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  806280:	e0bffc17 	ldw	r2,-16(fp)
  806284:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  806288:	00000606 	br	8062a4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80628c:	e0bffc17 	ldw	r2,-16(fp)
  806290:	10800044 	addi	r2,r2,1
  806294:	e0bffc15 	stw	r2,-16(fp)
  806298:	e0bffc17 	ldw	r2,-16(fp)
  80629c:	10800810 	cmplti	r2,r2,32
  8062a0:	103fdc1e 	bne	r2,zero,806214 <__reset+0xff805214>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8062a4:	e0bffd17 	ldw	r2,-12(fp)
}
  8062a8:	e6ffff04 	addi	sp,fp,-4
  8062ac:	dfc00217 	ldw	ra,8(sp)
  8062b0:	df000117 	ldw	fp,4(sp)
  8062b4:	dc000017 	ldw	r16,0(sp)
  8062b8:	dec00304 	addi	sp,sp,12
  8062bc:	f800283a 	ret

008062c0 <atexit>:
  8062c0:	200b883a 	mov	r5,r4
  8062c4:	000d883a 	mov	r6,zero
  8062c8:	0009883a 	mov	r4,zero
  8062cc:	000f883a 	mov	r7,zero
  8062d0:	08063881 	jmpi	806388 <__register_exitproc>

008062d4 <exit>:
  8062d4:	defffe04 	addi	sp,sp,-8
  8062d8:	000b883a 	mov	r5,zero
  8062dc:	dc000015 	stw	r16,0(sp)
  8062e0:	dfc00115 	stw	ra,4(sp)
  8062e4:	2021883a 	mov	r16,r4
  8062e8:	08064a40 	call	8064a4 <__call_exitprocs>
  8062ec:	00802074 	movhi	r2,129
  8062f0:	10a07104 	addi	r2,r2,-32316
  8062f4:	11000017 	ldw	r4,0(r2)
  8062f8:	20800f17 	ldw	r2,60(r4)
  8062fc:	10000126 	beq	r2,zero,806304 <exit+0x30>
  806300:	103ee83a 	callr	r2
  806304:	8009883a 	mov	r4,r16
  806308:	08066480 	call	806648 <_exit>

0080630c <memcmp>:
  80630c:	01c000c4 	movi	r7,3
  806310:	3980192e 	bgeu	r7,r6,806378 <memcmp+0x6c>
  806314:	2144b03a 	or	r2,r4,r5
  806318:	11c4703a 	and	r2,r2,r7
  80631c:	10000f26 	beq	r2,zero,80635c <memcmp+0x50>
  806320:	21c00003 	ldbu	r7,0(r4)
  806324:	28800003 	ldbu	r2,0(r5)
  806328:	3880151e 	bne	r7,r2,806380 <memcmp+0x74>
  80632c:	30ffff84 	addi	r3,r6,-2
  806330:	01bfffc4 	movi	r6,-1
  806334:	00000406 	br	806348 <memcmp+0x3c>
  806338:	21c00003 	ldbu	r7,0(r4)
  80633c:	28800003 	ldbu	r2,0(r5)
  806340:	18ffffc4 	addi	r3,r3,-1
  806344:	38800e1e 	bne	r7,r2,806380 <memcmp+0x74>
  806348:	21000044 	addi	r4,r4,1
  80634c:	29400044 	addi	r5,r5,1
  806350:	19bff91e 	bne	r3,r6,806338 <__reset+0xff805338>
  806354:	0005883a 	mov	r2,zero
  806358:	f800283a 	ret
  80635c:	20c00017 	ldw	r3,0(r4)
  806360:	28800017 	ldw	r2,0(r5)
  806364:	1880041e 	bne	r3,r2,806378 <memcmp+0x6c>
  806368:	31bfff04 	addi	r6,r6,-4
  80636c:	21000104 	addi	r4,r4,4
  806370:	29400104 	addi	r5,r5,4
  806374:	39bff936 	bltu	r7,r6,80635c <__reset+0xff80535c>
  806378:	303fe91e 	bne	r6,zero,806320 <__reset+0xff805320>
  80637c:	003ff506 	br	806354 <__reset+0xff805354>
  806380:	3885c83a 	sub	r2,r7,r2
  806384:	f800283a 	ret

00806388 <__register_exitproc>:
  806388:	defffa04 	addi	sp,sp,-24
  80638c:	00802074 	movhi	r2,129
  806390:	10a07104 	addi	r2,r2,-32316
  806394:	dc000315 	stw	r16,12(sp)
  806398:	14000017 	ldw	r16,0(r2)
  80639c:	dc400415 	stw	r17,16(sp)
  8063a0:	dfc00515 	stw	ra,20(sp)
  8063a4:	80805217 	ldw	r2,328(r16)
  8063a8:	2023883a 	mov	r17,r4
  8063ac:	10003a26 	beq	r2,zero,806498 <__register_exitproc+0x110>
  8063b0:	10c00117 	ldw	r3,4(r2)
  8063b4:	020007c4 	movi	r8,31
  8063b8:	40c0190e 	bge	r8,r3,806420 <__register_exitproc+0x98>
  8063bc:	00800034 	movhi	r2,0
  8063c0:	10800004 	addi	r2,r2,0
  8063c4:	1000061e 	bne	r2,zero,8063e0 <__register_exitproc+0x58>
  8063c8:	00bfffc4 	movi	r2,-1
  8063cc:	dfc00517 	ldw	ra,20(sp)
  8063d0:	dc400417 	ldw	r17,16(sp)
  8063d4:	dc000317 	ldw	r16,12(sp)
  8063d8:	dec00604 	addi	sp,sp,24
  8063dc:	f800283a 	ret
  8063e0:	01006404 	movi	r4,400
  8063e4:	d9400015 	stw	r5,0(sp)
  8063e8:	d9800115 	stw	r6,4(sp)
  8063ec:	d9c00215 	stw	r7,8(sp)
  8063f0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8063f4:	d9400017 	ldw	r5,0(sp)
  8063f8:	d9800117 	ldw	r6,4(sp)
  8063fc:	d9c00217 	ldw	r7,8(sp)
  806400:	103ff126 	beq	r2,zero,8063c8 <__reset+0xff8053c8>
  806404:	81005217 	ldw	r4,328(r16)
  806408:	10000115 	stw	zero,4(r2)
  80640c:	0007883a 	mov	r3,zero
  806410:	11000015 	stw	r4,0(r2)
  806414:	80805215 	stw	r2,328(r16)
  806418:	10006215 	stw	zero,392(r2)
  80641c:	10006315 	stw	zero,396(r2)
  806420:	88000d1e 	bne	r17,zero,806458 <__register_exitproc+0xd0>
  806424:	19000084 	addi	r4,r3,2
  806428:	2109883a 	add	r4,r4,r4
  80642c:	18c00044 	addi	r3,r3,1
  806430:	2109883a 	add	r4,r4,r4
  806434:	10c00115 	stw	r3,4(r2)
  806438:	1105883a 	add	r2,r2,r4
  80643c:	11400015 	stw	r5,0(r2)
  806440:	0005883a 	mov	r2,zero
  806444:	dfc00517 	ldw	ra,20(sp)
  806448:	dc400417 	ldw	r17,16(sp)
  80644c:	dc000317 	ldw	r16,12(sp)
  806450:	dec00604 	addi	sp,sp,24
  806454:	f800283a 	ret
  806458:	18c9883a 	add	r4,r3,r3
  80645c:	2109883a 	add	r4,r4,r4
  806460:	1109883a 	add	r4,r2,r4
  806464:	21802215 	stw	r6,136(r4)
  806468:	01800044 	movi	r6,1
  80646c:	12006217 	ldw	r8,392(r2)
  806470:	30cc983a 	sll	r6,r6,r3
  806474:	4190b03a 	or	r8,r8,r6
  806478:	12006215 	stw	r8,392(r2)
  80647c:	21c04215 	stw	r7,264(r4)
  806480:	01000084 	movi	r4,2
  806484:	893fe71e 	bne	r17,r4,806424 <__reset+0xff805424>
  806488:	11006317 	ldw	r4,396(r2)
  80648c:	218cb03a 	or	r6,r4,r6
  806490:	11806315 	stw	r6,396(r2)
  806494:	003fe306 	br	806424 <__reset+0xff805424>
  806498:	80805304 	addi	r2,r16,332
  80649c:	80805215 	stw	r2,328(r16)
  8064a0:	003fc306 	br	8063b0 <__reset+0xff8053b0>

008064a4 <__call_exitprocs>:
  8064a4:	00802074 	movhi	r2,129
  8064a8:	10a07104 	addi	r2,r2,-32316
  8064ac:	10800017 	ldw	r2,0(r2)
  8064b0:	defff304 	addi	sp,sp,-52
  8064b4:	df000b15 	stw	fp,44(sp)
  8064b8:	d8800015 	stw	r2,0(sp)
  8064bc:	10805204 	addi	r2,r2,328
  8064c0:	dd400815 	stw	r21,32(sp)
  8064c4:	dfc00c15 	stw	ra,48(sp)
  8064c8:	ddc00a15 	stw	r23,40(sp)
  8064cc:	dd800915 	stw	r22,36(sp)
  8064d0:	dd000715 	stw	r20,28(sp)
  8064d4:	dcc00615 	stw	r19,24(sp)
  8064d8:	dc800515 	stw	r18,20(sp)
  8064dc:	dc400415 	stw	r17,16(sp)
  8064e0:	dc000315 	stw	r16,12(sp)
  8064e4:	d9000115 	stw	r4,4(sp)
  8064e8:	2839883a 	mov	fp,r5
  8064ec:	d8800215 	stw	r2,8(sp)
  8064f0:	057fffc4 	movi	r21,-1
  8064f4:	d8800017 	ldw	r2,0(sp)
  8064f8:	14805217 	ldw	r18,328(r2)
  8064fc:	90001826 	beq	r18,zero,806560 <__call_exitprocs+0xbc>
  806500:	ddc00217 	ldw	r23,8(sp)
  806504:	90c00117 	ldw	r3,4(r18)
  806508:	1c3fffc4 	addi	r16,r3,-1
  80650c:	80001116 	blt	r16,zero,806554 <__call_exitprocs+0xb0>
  806510:	18c00044 	addi	r3,r3,1
  806514:	8427883a 	add	r19,r16,r16
  806518:	18c7883a 	add	r3,r3,r3
  80651c:	95802204 	addi	r22,r18,136
  806520:	9ce7883a 	add	r19,r19,r19
  806524:	18c7883a 	add	r3,r3,r3
  806528:	b4e7883a 	add	r19,r22,r19
  80652c:	90e3883a 	add	r17,r18,r3
  806530:	e0001726 	beq	fp,zero,806590 <__call_exitprocs+0xec>
  806534:	8c87c83a 	sub	r3,r17,r18
  806538:	b0c7883a 	add	r3,r22,r3
  80653c:	18c01e17 	ldw	r3,120(r3)
  806540:	1f001326 	beq	r3,fp,806590 <__call_exitprocs+0xec>
  806544:	843fffc4 	addi	r16,r16,-1
  806548:	9cffff04 	addi	r19,r19,-4
  80654c:	8c7fff04 	addi	r17,r17,-4
  806550:	857ff71e 	bne	r16,r21,806530 <__reset+0xff805530>
  806554:	00800034 	movhi	r2,0
  806558:	10800004 	addi	r2,r2,0
  80655c:	10002a1e 	bne	r2,zero,806608 <__call_exitprocs+0x164>
  806560:	dfc00c17 	ldw	ra,48(sp)
  806564:	df000b17 	ldw	fp,44(sp)
  806568:	ddc00a17 	ldw	r23,40(sp)
  80656c:	dd800917 	ldw	r22,36(sp)
  806570:	dd400817 	ldw	r21,32(sp)
  806574:	dd000717 	ldw	r20,28(sp)
  806578:	dcc00617 	ldw	r19,24(sp)
  80657c:	dc800517 	ldw	r18,20(sp)
  806580:	dc400417 	ldw	r17,16(sp)
  806584:	dc000317 	ldw	r16,12(sp)
  806588:	dec00d04 	addi	sp,sp,52
  80658c:	f800283a 	ret
  806590:	91000117 	ldw	r4,4(r18)
  806594:	88c00017 	ldw	r3,0(r17)
  806598:	213fffc4 	addi	r4,r4,-1
  80659c:	24001526 	beq	r4,r16,8065f4 <__call_exitprocs+0x150>
  8065a0:	88000015 	stw	zero,0(r17)
  8065a4:	183fe726 	beq	r3,zero,806544 <__reset+0xff805544>
  8065a8:	00800044 	movi	r2,1
  8065ac:	1408983a 	sll	r4,r2,r16
  8065b0:	91406217 	ldw	r5,392(r18)
  8065b4:	95000117 	ldw	r20,4(r18)
  8065b8:	214a703a 	and	r5,r4,r5
  8065bc:	28000b26 	beq	r5,zero,8065ec <__call_exitprocs+0x148>
  8065c0:	91406317 	ldw	r5,396(r18)
  8065c4:	2148703a 	and	r4,r4,r5
  8065c8:	20000c1e 	bne	r4,zero,8065fc <__call_exitprocs+0x158>
  8065cc:	99400017 	ldw	r5,0(r19)
  8065d0:	d9000117 	ldw	r4,4(sp)
  8065d4:	183ee83a 	callr	r3
  8065d8:	90c00117 	ldw	r3,4(r18)
  8065dc:	1d3fc51e 	bne	r3,r20,8064f4 <__reset+0xff8054f4>
  8065e0:	b8c00017 	ldw	r3,0(r23)
  8065e4:	1cbfd726 	beq	r3,r18,806544 <__reset+0xff805544>
  8065e8:	003fc206 	br	8064f4 <__reset+0xff8054f4>
  8065ec:	183ee83a 	callr	r3
  8065f0:	003ff906 	br	8065d8 <__reset+0xff8055d8>
  8065f4:	94000115 	stw	r16,4(r18)
  8065f8:	003fea06 	br	8065a4 <__reset+0xff8055a4>
  8065fc:	99000017 	ldw	r4,0(r19)
  806600:	183ee83a 	callr	r3
  806604:	003ff406 	br	8065d8 <__reset+0xff8055d8>
  806608:	90c00117 	ldw	r3,4(r18)
  80660c:	1800081e 	bne	r3,zero,806630 <__call_exitprocs+0x18c>
  806610:	90c00017 	ldw	r3,0(r18)
  806614:	18000a26 	beq	r3,zero,806640 <__call_exitprocs+0x19c>
  806618:	9009883a 	mov	r4,r18
  80661c:	b8c00015 	stw	r3,0(r23)
  806620:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  806624:	bc800017 	ldw	r18,0(r23)
  806628:	903fb61e 	bne	r18,zero,806504 <__reset+0xff805504>
  80662c:	003fcc06 	br	806560 <__reset+0xff805560>
  806630:	90c00017 	ldw	r3,0(r18)
  806634:	902f883a 	mov	r23,r18
  806638:	1825883a 	mov	r18,r3
  80663c:	003ffa06 	br	806628 <__reset+0xff805628>
  806640:	0007883a 	mov	r3,zero
  806644:	003ffb06 	br	806634 <__reset+0xff805634>

00806648 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806648:	defffd04 	addi	sp,sp,-12
  80664c:	df000215 	stw	fp,8(sp)
  806650:	df000204 	addi	fp,sp,8
  806654:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  806658:	0001883a 	nop
  80665c:	e0bfff17 	ldw	r2,-4(fp)
  806660:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  806664:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806668:	10000226 	beq	r2,zero,806674 <_exit+0x2c>
    ALT_SIM_FAIL();
  80666c:	002af070 	cmpltui	zero,zero,43969
  806670:	00000106 	br	806678 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  806674:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806678:	003fff06 	br	806678 <__reset+0xff805678>
